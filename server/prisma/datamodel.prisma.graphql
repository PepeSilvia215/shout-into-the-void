# container of all post messages, such as shout, echo, and replies
# designed so that these are created when an original shout or reply is created
# saves space since all saved shouts, echos, saved echos, and saved replies will
# connect to this and it will only be created once
# also will present unique deletion method where when a user deletes their own shout,
# they can choose to delete the shout and the reference content
# this will cause any that uses this like saved shouts, echos, and saved replies 
# will no longer have the content, very similar to reddits delete function and users
# will see a placeholder. a refernce will be made if this user choses to delete all
# of their content in the future, in a deeper menu to be made
type Content {
    contentId: ID! @id
    createdAt: DateTime! @createdAt
    createdBy: User! @relation(link: INLINE)
    message: String! # todo: crazy, but should this be unique?
}
type VoteBucket {
    voteBucketId: ID! @id
    createdAt: DateTime! @createdAt # for database cleanup
    voteCount: Int!
    votes: [Vote!] @relation(onDelete: CASCADE)
}
type Vote {
    voteId: ID! @id
    updatedAt: DateTime! @updatedAt # for database clearneup
    createdBy: User! @relation(link: INLINE)
    voteBucket: VoteBucket! @relation(link: INLINE)
    isUpvote: Boolean!
    uniqueHash: String! @unique # based on userId, voteBucketId, and upvote
}
type UserLocation {
    userLocationId: ID! @id
    userGeohash: String!
    createdAt: DateTime! @createdAt
    createdBy: User! @relation(name: "UserToUserLocationCreatedBy", link: INLINE)
}
type AdminStatus {
    adminStatusId: ID! @id
    createdAt: DateTime! @createdAt
    createdBy: User! @relation(name: "UserToAdminStatusCreatedBy", link: INLINE)
    user: User! @unique @relation(name: "UserToAdminStatusUser", link: INLINE)
}
type User { # todo: think more about cascading deletes, should all your content go away?
    userId: ID! @id
    createdAt: DateTime! @createdAt
    username: String! @unique
    password: String!
    adminStatus: AdminStatus @relation(name: "UserToAdminStatusUser", onDelete: CASCADE)
    createdAdmins: [AdminStatus!] @relation(name: "UserToAdminStatusCreatedBy")
    lastLocation: UserLocation @relation(name: "UserToUserLocationLastLocation", link: INLINE, onDelete: CASCADE)
    locationHistory: [UserLocation!] @relation(name: "UserToUserLocationCreatedBy", onDelete: CASCADE)
    createdContent: [Content!] @relation(onDelete: CASCADE)
    createdVotes: [Vote!] @relation(onDelete: CASCADE)
    createdVoids: [NVoid!]!
    savedVoids: [UserSavedVoid!] @relation(onDelete:CASCADE)
    createdShoutsInVoids: [ShoutInVoid!] @relation(onDelete:CASCADE)
    activatedEchosOfShouts: [UserActivatedEchoOfShout!] @relation(onDelete:CASCADE)
    createdEchosOfShoutsInVoid: [EchoOfShoutInVoid!] @relation(onDelete:CASCADE)
    repliesToShoutsInVoid: [ReplyToShoutInVoid!] @relation(onDelete:CASCADE)
    repliesToEchosOfShoutsInVoid: [ReplyToEchoOfShoutInVoid!]  @relation(onDelete:CASCADE)
}
type ShoutInVoid {
    shoutInVoidId: ID! @id
    createdAt: DateTime! @createdAt
    createdBy: User! @relation(link: INLINE)
    content: Content! @relation(link: INLINE) 
    uniqueContentMessageHash: String @unique # to make shout message unique
    nVoid: NVoid! @relation(link: INLINE)
    voteBucket: VoteBucket! @relation(onDelete: CASCADE)
    echos: [EchoOfShoutInVoid!]
    replies: [ReplyToShoutInVoid!] @relation(onDelete: CASCADE)
}
type ReplyToShoutInVoid {
    replyToShoutInVoidId: ID! @id
    createdAt: DateTime! @createdAt
    createdBy: User! @relation(link: INLINE)
    content: Content! @relation(link: INLINE, onDelete: CASCADE)
    voteBucket: VoteBucket! @relation(onDelete: CASCADE)
    originalShoutInVoid: ShoutInVoid! @relation(link: INLINE)
}
type UserActivatedEchoOfShout {
    userActivatedEchoOfShoutId: ID! @id
    createdAt: DateTime! @createdAt
    createdBy: User! @relation(link: INLINE)
    originalShoutContent: Content! @relation(link: INLINE)
    originalShoutVoidGeohash: String!
    originalEchoOfShoutInVoid: EchoOfShoutInVoid @relation(link: INLINE)
}
type EchoOfShoutInVoid {
    echoOfShoutInVoidId: ID! @id
    createdAt: DateTime! @createdAt
    createdBy: User! @relation(link: INLINE)
    originalShoutContent: Content! @relation(link: INLINE)
    originalShoutVoidGeohash: String!
    originalShoutInVoid: ShoutInVoid! @relation(link: INLINE)
    originalEchoOfShoutInVoid: EchoOfShoutInVoid @relation(name: "OriginalEchoOfShoutToEchoOfEchoEdge", link: INLINE) # used if echo of echo
    nVoid: NVoid! @relation(link: INLINE)
    voteBucket: VoteBucket! @relation(onDelete: CASCADE)
    echosOfEchos: [EchoOfShoutInVoid!] @relation(name: "OriginalEchoOfShoutToEchoOfEchoEdge") # used to find echos of echo
    replies: [ReplyToEchoOfShoutInVoid!] @relation(onDelete: CASCADE)
}
type ReplyToEchoOfShoutInVoid {
    replyToEchoOfShoutInVoidId: ID! @id
    createdAt: DateTime! @createdAt
    createdBy: User! @relation(link: INLINE)
    content: Content! @relation(link: INLINE, onDelete: CASCADE)
    voteBucket: VoteBucket! @relation(onDelete: CASCADE)
    originalEchoOfShoutInVoid: EchoOfShoutInVoid! @relation(link: INLINE)
}
type NVoid {
    nVoidId: ID! @id
    createdAt: DateTime! @createdAt
    createdBy: User! @relation(link: INLINE)
    voidGeohash: String! @unique
    shouts: [ShoutInVoid!] @relation(onDelete: CASCADE) # might wanna cascade delete
    echos: [EchoOfShoutInVoid!] @relation(onDelete: CASCADE) # might wanna cascade delete
}
type UserSavedVoid {
    userSavedVoidId: ID! @id
    createdAt: DateTime! @createdAt
    createdBy: User! @relation(link: INLINE)
    originalVoidGeohash: String!
}