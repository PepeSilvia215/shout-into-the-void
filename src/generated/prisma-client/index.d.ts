// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  content: (where?: ContentWhereInput) => Promise<boolean>;
  shoutInVoid: (where?: ShoutInVoidWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  content: (where: ContentWhereUniqueInput) => ContentNullablePromise;
  contents: (args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Content>;
  contentsConnection: (args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContentConnectionPromise;
  shoutInVoid: (
    where: ShoutInVoidWhereUniqueInput
  ) => ShoutInVoidNullablePromise;
  shoutInVoids: (args?: {
    where?: ShoutInVoidWhereInput;
    orderBy?: ShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ShoutInVoid>;
  shoutInVoidsConnection: (args?: {
    where?: ShoutInVoidWhereInput;
    orderBy?: ShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ShoutInVoidConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createContent: (data: ContentCreateInput) => ContentPromise;
  updateContent: (args: {
    data: ContentUpdateInput;
    where: ContentWhereUniqueInput;
  }) => ContentPromise;
  updateManyContents: (args: {
    data: ContentUpdateManyMutationInput;
    where?: ContentWhereInput;
  }) => BatchPayloadPromise;
  upsertContent: (args: {
    where: ContentWhereUniqueInput;
    create: ContentCreateInput;
    update: ContentUpdateInput;
  }) => ContentPromise;
  deleteContent: (where: ContentWhereUniqueInput) => ContentPromise;
  deleteManyContents: (where?: ContentWhereInput) => BatchPayloadPromise;
  createShoutInVoid: (data: ShoutInVoidCreateInput) => ShoutInVoidPromise;
  updateShoutInVoid: (args: {
    data: ShoutInVoidUpdateInput;
    where: ShoutInVoidWhereUniqueInput;
  }) => ShoutInVoidPromise;
  updateManyShoutInVoids: (args: {
    data: ShoutInVoidUpdateManyMutationInput;
    where?: ShoutInVoidWhereInput;
  }) => BatchPayloadPromise;
  upsertShoutInVoid: (args: {
    where: ShoutInVoidWhereUniqueInput;
    create: ShoutInVoidCreateInput;
    update: ShoutInVoidUpdateInput;
  }) => ShoutInVoidPromise;
  deleteShoutInVoid: (where: ShoutInVoidWhereUniqueInput) => ShoutInVoidPromise;
  deleteManyShoutInVoids: (
    where?: ShoutInVoidWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  content: (
    where?: ContentSubscriptionWhereInput
  ) => ContentSubscriptionPayloadSubscription;
  shoutInVoid: (
    where?: ShoutInVoidSubscriptionWhereInput
  ) => ShoutInVoidSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ShoutInVoidOrderByInput =
  | "shoutInVoidId_ASC"
  | "shoutInVoidId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "voteCount_ASC"
  | "voteCount_DESC";

export type ContentOrderByInput =
  | "contentId_ASC"
  | "contentId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "message_ASC"
  | "message_DESC"
  | "includeUsername_ASC"
  | "includeUsername_DESC";

export type UserOrderByInput =
  | "userId_ASC"
  | "userId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "currentLocationGeohash_ASC"
  | "currentLocationGeohash_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ContentWhereUniqueInput = AtLeastOne<{
  contentId: Maybe<ID_Input>;
}>;

export interface ShoutInVoidWhereInput {
  shoutInVoidId?: Maybe<ID_Input>;
  shoutInVoidId_not?: Maybe<ID_Input>;
  shoutInVoidId_in?: Maybe<ID_Input[] | ID_Input>;
  shoutInVoidId_not_in?: Maybe<ID_Input[] | ID_Input>;
  shoutInVoidId_lt?: Maybe<ID_Input>;
  shoutInVoidId_lte?: Maybe<ID_Input>;
  shoutInVoidId_gt?: Maybe<ID_Input>;
  shoutInVoidId_gte?: Maybe<ID_Input>;
  shoutInVoidId_contains?: Maybe<ID_Input>;
  shoutInVoidId_not_contains?: Maybe<ID_Input>;
  shoutInVoidId_starts_with?: Maybe<ID_Input>;
  shoutInVoidId_not_starts_with?: Maybe<ID_Input>;
  shoutInVoidId_ends_with?: Maybe<ID_Input>;
  shoutInVoidId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  shoutedBy?: Maybe<UserWhereInput>;
  content?: Maybe<ContentWhereInput>;
  voteCount?: Maybe<Int>;
  voteCount_not?: Maybe<Int>;
  voteCount_in?: Maybe<Int[] | Int>;
  voteCount_not_in?: Maybe<Int[] | Int>;
  voteCount_lt?: Maybe<Int>;
  voteCount_lte?: Maybe<Int>;
  voteCount_gt?: Maybe<Int>;
  voteCount_gte?: Maybe<Int>;
  AND?: Maybe<ShoutInVoidWhereInput[] | ShoutInVoidWhereInput>;
  OR?: Maybe<ShoutInVoidWhereInput[] | ShoutInVoidWhereInput>;
  NOT?: Maybe<ShoutInVoidWhereInput[] | ShoutInVoidWhereInput>;
}

export interface UserWhereInput {
  userId?: Maybe<ID_Input>;
  userId_not?: Maybe<ID_Input>;
  userId_in?: Maybe<ID_Input[] | ID_Input>;
  userId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userId_lt?: Maybe<ID_Input>;
  userId_lte?: Maybe<ID_Input>;
  userId_gt?: Maybe<ID_Input>;
  userId_gte?: Maybe<ID_Input>;
  userId_contains?: Maybe<ID_Input>;
  userId_not_contains?: Maybe<ID_Input>;
  userId_starts_with?: Maybe<ID_Input>;
  userId_not_starts_with?: Maybe<ID_Input>;
  userId_ends_with?: Maybe<ID_Input>;
  userId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  currentLocationGeohash?: Maybe<String>;
  currentLocationGeohash_not?: Maybe<String>;
  currentLocationGeohash_in?: Maybe<String[] | String>;
  currentLocationGeohash_not_in?: Maybe<String[] | String>;
  currentLocationGeohash_lt?: Maybe<String>;
  currentLocationGeohash_lte?: Maybe<String>;
  currentLocationGeohash_gt?: Maybe<String>;
  currentLocationGeohash_gte?: Maybe<String>;
  currentLocationGeohash_contains?: Maybe<String>;
  currentLocationGeohash_not_contains?: Maybe<String>;
  currentLocationGeohash_starts_with?: Maybe<String>;
  currentLocationGeohash_not_starts_with?: Maybe<String>;
  currentLocationGeohash_ends_with?: Maybe<String>;
  currentLocationGeohash_not_ends_with?: Maybe<String>;
  shoutsInVoids_every?: Maybe<ShoutInVoidWhereInput>;
  shoutsInVoids_some?: Maybe<ShoutInVoidWhereInput>;
  shoutsInVoids_none?: Maybe<ShoutInVoidWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ContentWhereInput {
  contentId?: Maybe<ID_Input>;
  contentId_not?: Maybe<ID_Input>;
  contentId_in?: Maybe<ID_Input[] | ID_Input>;
  contentId_not_in?: Maybe<ID_Input[] | ID_Input>;
  contentId_lt?: Maybe<ID_Input>;
  contentId_lte?: Maybe<ID_Input>;
  contentId_gt?: Maybe<ID_Input>;
  contentId_gte?: Maybe<ID_Input>;
  contentId_contains?: Maybe<ID_Input>;
  contentId_not_contains?: Maybe<ID_Input>;
  contentId_starts_with?: Maybe<ID_Input>;
  contentId_not_starts_with?: Maybe<ID_Input>;
  contentId_ends_with?: Maybe<ID_Input>;
  contentId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<UserWhereInput>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  includeUsername?: Maybe<Boolean>;
  includeUsername_not?: Maybe<Boolean>;
  AND?: Maybe<ContentWhereInput[] | ContentWhereInput>;
  OR?: Maybe<ContentWhereInput[] | ContentWhereInput>;
  NOT?: Maybe<ContentWhereInput[] | ContentWhereInput>;
}

export type ShoutInVoidWhereUniqueInput = AtLeastOne<{
  shoutInVoidId: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  userId: Maybe<ID_Input>;
}>;

export interface ContentCreateInput {
  contentId?: Maybe<ID_Input>;
  createdBy: UserCreateOneInput;
  message: String;
  includeUsername: Boolean;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  userId?: Maybe<ID_Input>;
  username: String;
  password: String;
  currentLocationGeohash: String;
  shoutsInVoids?: Maybe<ShoutInVoidCreateManyWithoutShoutedByInput>;
}

export interface ShoutInVoidCreateManyWithoutShoutedByInput {
  create?: Maybe<
    | ShoutInVoidCreateWithoutShoutedByInput[]
    | ShoutInVoidCreateWithoutShoutedByInput
  >;
  connect?: Maybe<ShoutInVoidWhereUniqueInput[] | ShoutInVoidWhereUniqueInput>;
}

export interface ShoutInVoidCreateWithoutShoutedByInput {
  shoutInVoidId?: Maybe<ID_Input>;
  content: ContentCreateOneInput;
  voteCount: Int;
}

export interface ContentCreateOneInput {
  create?: Maybe<ContentCreateInput>;
  connect?: Maybe<ContentWhereUniqueInput>;
}

export interface ContentUpdateInput {
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  message?: Maybe<String>;
  includeUsername?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  currentLocationGeohash?: Maybe<String>;
  shoutsInVoids?: Maybe<ShoutInVoidUpdateManyWithoutShoutedByInput>;
}

export interface ShoutInVoidUpdateManyWithoutShoutedByInput {
  create?: Maybe<
    | ShoutInVoidCreateWithoutShoutedByInput[]
    | ShoutInVoidCreateWithoutShoutedByInput
  >;
  delete?: Maybe<ShoutInVoidWhereUniqueInput[] | ShoutInVoidWhereUniqueInput>;
  connect?: Maybe<ShoutInVoidWhereUniqueInput[] | ShoutInVoidWhereUniqueInput>;
  set?: Maybe<ShoutInVoidWhereUniqueInput[] | ShoutInVoidWhereUniqueInput>;
  disconnect?: Maybe<
    ShoutInVoidWhereUniqueInput[] | ShoutInVoidWhereUniqueInput
  >;
  update?: Maybe<
    | ShoutInVoidUpdateWithWhereUniqueWithoutShoutedByInput[]
    | ShoutInVoidUpdateWithWhereUniqueWithoutShoutedByInput
  >;
  upsert?: Maybe<
    | ShoutInVoidUpsertWithWhereUniqueWithoutShoutedByInput[]
    | ShoutInVoidUpsertWithWhereUniqueWithoutShoutedByInput
  >;
  deleteMany?: Maybe<
    ShoutInVoidScalarWhereInput[] | ShoutInVoidScalarWhereInput
  >;
  updateMany?: Maybe<
    | ShoutInVoidUpdateManyWithWhereNestedInput[]
    | ShoutInVoidUpdateManyWithWhereNestedInput
  >;
}

export interface ShoutInVoidUpdateWithWhereUniqueWithoutShoutedByInput {
  where: ShoutInVoidWhereUniqueInput;
  data: ShoutInVoidUpdateWithoutShoutedByDataInput;
}

export interface ShoutInVoidUpdateWithoutShoutedByDataInput {
  content?: Maybe<ContentUpdateOneRequiredInput>;
  voteCount?: Maybe<Int>;
}

export interface ContentUpdateOneRequiredInput {
  create?: Maybe<ContentCreateInput>;
  update?: Maybe<ContentUpdateDataInput>;
  upsert?: Maybe<ContentUpsertNestedInput>;
  connect?: Maybe<ContentWhereUniqueInput>;
}

export interface ContentUpdateDataInput {
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  message?: Maybe<String>;
  includeUsername?: Maybe<Boolean>;
}

export interface ContentUpsertNestedInput {
  update: ContentUpdateDataInput;
  create: ContentCreateInput;
}

export interface ShoutInVoidUpsertWithWhereUniqueWithoutShoutedByInput {
  where: ShoutInVoidWhereUniqueInput;
  update: ShoutInVoidUpdateWithoutShoutedByDataInput;
  create: ShoutInVoidCreateWithoutShoutedByInput;
}

export interface ShoutInVoidScalarWhereInput {
  shoutInVoidId?: Maybe<ID_Input>;
  shoutInVoidId_not?: Maybe<ID_Input>;
  shoutInVoidId_in?: Maybe<ID_Input[] | ID_Input>;
  shoutInVoidId_not_in?: Maybe<ID_Input[] | ID_Input>;
  shoutInVoidId_lt?: Maybe<ID_Input>;
  shoutInVoidId_lte?: Maybe<ID_Input>;
  shoutInVoidId_gt?: Maybe<ID_Input>;
  shoutInVoidId_gte?: Maybe<ID_Input>;
  shoutInVoidId_contains?: Maybe<ID_Input>;
  shoutInVoidId_not_contains?: Maybe<ID_Input>;
  shoutInVoidId_starts_with?: Maybe<ID_Input>;
  shoutInVoidId_not_starts_with?: Maybe<ID_Input>;
  shoutInVoidId_ends_with?: Maybe<ID_Input>;
  shoutInVoidId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  voteCount?: Maybe<Int>;
  voteCount_not?: Maybe<Int>;
  voteCount_in?: Maybe<Int[] | Int>;
  voteCount_not_in?: Maybe<Int[] | Int>;
  voteCount_lt?: Maybe<Int>;
  voteCount_lte?: Maybe<Int>;
  voteCount_gt?: Maybe<Int>;
  voteCount_gte?: Maybe<Int>;
  AND?: Maybe<ShoutInVoidScalarWhereInput[] | ShoutInVoidScalarWhereInput>;
  OR?: Maybe<ShoutInVoidScalarWhereInput[] | ShoutInVoidScalarWhereInput>;
  NOT?: Maybe<ShoutInVoidScalarWhereInput[] | ShoutInVoidScalarWhereInput>;
}

export interface ShoutInVoidUpdateManyWithWhereNestedInput {
  where: ShoutInVoidScalarWhereInput;
  data: ShoutInVoidUpdateManyDataInput;
}

export interface ShoutInVoidUpdateManyDataInput {
  voteCount?: Maybe<Int>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ContentUpdateManyMutationInput {
  message?: Maybe<String>;
  includeUsername?: Maybe<Boolean>;
}

export interface ShoutInVoidCreateInput {
  shoutInVoidId?: Maybe<ID_Input>;
  shoutedBy: UserCreateOneWithoutShoutsInVoidsInput;
  content: ContentCreateOneInput;
  voteCount: Int;
}

export interface UserCreateOneWithoutShoutsInVoidsInput {
  create?: Maybe<UserCreateWithoutShoutsInVoidsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutShoutsInVoidsInput {
  userId?: Maybe<ID_Input>;
  username: String;
  password: String;
  currentLocationGeohash: String;
}

export interface ShoutInVoidUpdateInput {
  shoutedBy?: Maybe<UserUpdateOneRequiredWithoutShoutsInVoidsInput>;
  content?: Maybe<ContentUpdateOneRequiredInput>;
  voteCount?: Maybe<Int>;
}

export interface UserUpdateOneRequiredWithoutShoutsInVoidsInput {
  create?: Maybe<UserCreateWithoutShoutsInVoidsInput>;
  update?: Maybe<UserUpdateWithoutShoutsInVoidsDataInput>;
  upsert?: Maybe<UserUpsertWithoutShoutsInVoidsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutShoutsInVoidsDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  currentLocationGeohash?: Maybe<String>;
}

export interface UserUpsertWithoutShoutsInVoidsInput {
  update: UserUpdateWithoutShoutsInVoidsDataInput;
  create: UserCreateWithoutShoutsInVoidsInput;
}

export interface ShoutInVoidUpdateManyMutationInput {
  voteCount?: Maybe<Int>;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  currentLocationGeohash?: Maybe<String>;
  shoutsInVoids?: Maybe<ShoutInVoidUpdateManyWithoutShoutedByInput>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  currentLocationGeohash?: Maybe<String>;
}

export interface ContentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContentWhereInput>;
  AND?: Maybe<ContentSubscriptionWhereInput[] | ContentSubscriptionWhereInput>;
  OR?: Maybe<ContentSubscriptionWhereInput[] | ContentSubscriptionWhereInput>;
  NOT?: Maybe<ContentSubscriptionWhereInput[] | ContentSubscriptionWhereInput>;
}

export interface ShoutInVoidSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ShoutInVoidWhereInput>;
  AND?: Maybe<
    ShoutInVoidSubscriptionWhereInput[] | ShoutInVoidSubscriptionWhereInput
  >;
  OR?: Maybe<
    ShoutInVoidSubscriptionWhereInput[] | ShoutInVoidSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ShoutInVoidSubscriptionWhereInput[] | ShoutInVoidSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Content {
  contentId: ID_Output;
  createdAt: DateTimeOutput;
  message: String;
  includeUsername: Boolean;
}

export interface ContentPromise extends Promise<Content>, Fragmentable {
  contentId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  message: () => Promise<String>;
  includeUsername: () => Promise<Boolean>;
}

export interface ContentSubscription
  extends Promise<AsyncIterator<Content>>,
    Fragmentable {
  contentId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = UserSubscription>() => T;
  message: () => Promise<AsyncIterator<String>>;
  includeUsername: () => Promise<AsyncIterator<Boolean>>;
}

export interface ContentNullablePromise
  extends Promise<Content | null>,
    Fragmentable {
  contentId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  message: () => Promise<String>;
  includeUsername: () => Promise<Boolean>;
}

export interface User {
  userId: ID_Output;
  createdAt: DateTimeOutput;
  username: String;
  password: String;
  currentLocationGeohash: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  userId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  currentLocationGeohash: () => Promise<String>;
  shoutsInVoids: <T = FragmentableArray<ShoutInVoid>>(args?: {
    where?: ShoutInVoidWhereInput;
    orderBy?: ShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  userId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  currentLocationGeohash: () => Promise<AsyncIterator<String>>;
  shoutsInVoids: <T = Promise<AsyncIterator<ShoutInVoidSubscription>>>(args?: {
    where?: ShoutInVoidWhereInput;
    orderBy?: ShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  userId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  currentLocationGeohash: () => Promise<String>;
  shoutsInVoids: <T = FragmentableArray<ShoutInVoid>>(args?: {
    where?: ShoutInVoidWhereInput;
    orderBy?: ShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ShoutInVoid {
  shoutInVoidId: ID_Output;
  createdAt: DateTimeOutput;
  voteCount: Int;
}

export interface ShoutInVoidPromise extends Promise<ShoutInVoid>, Fragmentable {
  shoutInVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  shoutedBy: <T = UserPromise>() => T;
  content: <T = ContentPromise>() => T;
  voteCount: () => Promise<Int>;
}

export interface ShoutInVoidSubscription
  extends Promise<AsyncIterator<ShoutInVoid>>,
    Fragmentable {
  shoutInVoidId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  shoutedBy: <T = UserSubscription>() => T;
  content: <T = ContentSubscription>() => T;
  voteCount: () => Promise<AsyncIterator<Int>>;
}

export interface ShoutInVoidNullablePromise
  extends Promise<ShoutInVoid | null>,
    Fragmentable {
  shoutInVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  shoutedBy: <T = UserPromise>() => T;
  content: <T = ContentPromise>() => T;
  voteCount: () => Promise<Int>;
}

export interface ContentConnection {
  pageInfo: PageInfo;
  edges: ContentEdge[];
}

export interface ContentConnectionPromise
  extends Promise<ContentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContentEdge>>() => T;
  aggregate: <T = AggregateContentPromise>() => T;
}

export interface ContentConnectionSubscription
  extends Promise<AsyncIterator<ContentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ContentEdge {
  node: Content;
  cursor: String;
}

export interface ContentEdgePromise extends Promise<ContentEdge>, Fragmentable {
  node: <T = ContentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContentEdgeSubscription
  extends Promise<AsyncIterator<ContentEdge>>,
    Fragmentable {
  node: <T = ContentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateContent {
  count: Int;
}

export interface AggregateContentPromise
  extends Promise<AggregateContent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContentSubscription
  extends Promise<AsyncIterator<AggregateContent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ShoutInVoidConnection {
  pageInfo: PageInfo;
  edges: ShoutInVoidEdge[];
}

export interface ShoutInVoidConnectionPromise
  extends Promise<ShoutInVoidConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ShoutInVoidEdge>>() => T;
  aggregate: <T = AggregateShoutInVoidPromise>() => T;
}

export interface ShoutInVoidConnectionSubscription
  extends Promise<AsyncIterator<ShoutInVoidConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ShoutInVoidEdgeSubscription>>>() => T;
  aggregate: <T = AggregateShoutInVoidSubscription>() => T;
}

export interface ShoutInVoidEdge {
  node: ShoutInVoid;
  cursor: String;
}

export interface ShoutInVoidEdgePromise
  extends Promise<ShoutInVoidEdge>,
    Fragmentable {
  node: <T = ShoutInVoidPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ShoutInVoidEdgeSubscription
  extends Promise<AsyncIterator<ShoutInVoidEdge>>,
    Fragmentable {
  node: <T = ShoutInVoidSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateShoutInVoid {
  count: Int;
}

export interface AggregateShoutInVoidPromise
  extends Promise<AggregateShoutInVoid>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateShoutInVoidSubscription
  extends Promise<AsyncIterator<AggregateShoutInVoid>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ContentSubscriptionPayload {
  mutation: MutationType;
  node: Content;
  updatedFields: String[];
  previousValues: ContentPreviousValues;
}

export interface ContentSubscriptionPayloadPromise
  extends Promise<ContentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContentPreviousValuesPromise>() => T;
}

export interface ContentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContentPreviousValuesSubscription>() => T;
}

export interface ContentPreviousValues {
  contentId: ID_Output;
  createdAt: DateTimeOutput;
  message: String;
  includeUsername: Boolean;
}

export interface ContentPreviousValuesPromise
  extends Promise<ContentPreviousValues>,
    Fragmentable {
  contentId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  message: () => Promise<String>;
  includeUsername: () => Promise<Boolean>;
}

export interface ContentPreviousValuesSubscription
  extends Promise<AsyncIterator<ContentPreviousValues>>,
    Fragmentable {
  contentId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  message: () => Promise<AsyncIterator<String>>;
  includeUsername: () => Promise<AsyncIterator<Boolean>>;
}

export interface ShoutInVoidSubscriptionPayload {
  mutation: MutationType;
  node: ShoutInVoid;
  updatedFields: String[];
  previousValues: ShoutInVoidPreviousValues;
}

export interface ShoutInVoidSubscriptionPayloadPromise
  extends Promise<ShoutInVoidSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ShoutInVoidPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ShoutInVoidPreviousValuesPromise>() => T;
}

export interface ShoutInVoidSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ShoutInVoidSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ShoutInVoidSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ShoutInVoidPreviousValuesSubscription>() => T;
}

export interface ShoutInVoidPreviousValues {
  shoutInVoidId: ID_Output;
  createdAt: DateTimeOutput;
  voteCount: Int;
}

export interface ShoutInVoidPreviousValuesPromise
  extends Promise<ShoutInVoidPreviousValues>,
    Fragmentable {
  shoutInVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  voteCount: () => Promise<Int>;
}

export interface ShoutInVoidPreviousValuesSubscription
  extends Promise<AsyncIterator<ShoutInVoidPreviousValues>>,
    Fragmentable {
  shoutInVoidId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  voteCount: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  userId: ID_Output;
  createdAt: DateTimeOutput;
  username: String;
  password: String;
  currentLocationGeohash: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  userId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  currentLocationGeohash: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  userId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  currentLocationGeohash: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Content",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "ShoutInVoid",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
