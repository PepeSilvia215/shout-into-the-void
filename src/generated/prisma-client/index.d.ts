// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  content: (where?: ContentWhereInput) => Promise<boolean>;
  echoOfShoutInVoid: (where?: EchoOfShoutInVoidWhereInput) => Promise<boolean>;
  nVoid: (where?: NVoidWhereInput) => Promise<boolean>;
  replyToEchoOfShoutInVoid: (
    where?: ReplyToEchoOfShoutInVoidWhereInput
  ) => Promise<boolean>;
  replyToShoutInVoid: (
    where?: ReplyToShoutInVoidWhereInput
  ) => Promise<boolean>;
  shoutInVoid: (where?: ShoutInVoidWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userActivatedEchoOfShout: (
    where?: UserActivatedEchoOfShoutWhereInput
  ) => Promise<boolean>;
  userLocation: (where?: UserLocationWhereInput) => Promise<boolean>;
  userSavedVoid: (where?: UserSavedVoidWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
  voteBucket: (where?: VoteBucketWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  content: (where: ContentWhereUniqueInput) => ContentNullablePromise;
  contents: (args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Content>;
  contentsConnection: (args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContentConnectionPromise;
  echoOfShoutInVoid: (
    where: EchoOfShoutInVoidWhereUniqueInput
  ) => EchoOfShoutInVoidNullablePromise;
  echoOfShoutInVoids: (args?: {
    where?: EchoOfShoutInVoidWhereInput;
    orderBy?: EchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EchoOfShoutInVoid>;
  echoOfShoutInVoidsConnection: (args?: {
    where?: EchoOfShoutInVoidWhereInput;
    orderBy?: EchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EchoOfShoutInVoidConnectionPromise;
  nVoid: (where: NVoidWhereUniqueInput) => NVoidNullablePromise;
  nVoids: (args?: {
    where?: NVoidWhereInput;
    orderBy?: NVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<NVoid>;
  nVoidsConnection: (args?: {
    where?: NVoidWhereInput;
    orderBy?: NVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NVoidConnectionPromise;
  replyToEchoOfShoutInVoid: (
    where: ReplyToEchoOfShoutInVoidWhereUniqueInput
  ) => ReplyToEchoOfShoutInVoidNullablePromise;
  replyToEchoOfShoutInVoids: (args?: {
    where?: ReplyToEchoOfShoutInVoidWhereInput;
    orderBy?: ReplyToEchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ReplyToEchoOfShoutInVoid>;
  replyToEchoOfShoutInVoidsConnection: (args?: {
    where?: ReplyToEchoOfShoutInVoidWhereInput;
    orderBy?: ReplyToEchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReplyToEchoOfShoutInVoidConnectionPromise;
  replyToShoutInVoid: (
    where: ReplyToShoutInVoidWhereUniqueInput
  ) => ReplyToShoutInVoidNullablePromise;
  replyToShoutInVoids: (args?: {
    where?: ReplyToShoutInVoidWhereInput;
    orderBy?: ReplyToShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ReplyToShoutInVoid>;
  replyToShoutInVoidsConnection: (args?: {
    where?: ReplyToShoutInVoidWhereInput;
    orderBy?: ReplyToShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReplyToShoutInVoidConnectionPromise;
  shoutInVoid: (
    where: ShoutInVoidWhereUniqueInput
  ) => ShoutInVoidNullablePromise;
  shoutInVoids: (args?: {
    where?: ShoutInVoidWhereInput;
    orderBy?: ShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ShoutInVoid>;
  shoutInVoidsConnection: (args?: {
    where?: ShoutInVoidWhereInput;
    orderBy?: ShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ShoutInVoidConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userActivatedEchoOfShout: (
    where: UserActivatedEchoOfShoutWhereUniqueInput
  ) => UserActivatedEchoOfShoutNullablePromise;
  userActivatedEchoOfShouts: (args?: {
    where?: UserActivatedEchoOfShoutWhereInput;
    orderBy?: UserActivatedEchoOfShoutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserActivatedEchoOfShout>;
  userActivatedEchoOfShoutsConnection: (args?: {
    where?: UserActivatedEchoOfShoutWhereInput;
    orderBy?: UserActivatedEchoOfShoutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserActivatedEchoOfShoutConnectionPromise;
  userLocation: (
    where: UserLocationWhereUniqueInput
  ) => UserLocationNullablePromise;
  userLocations: (args?: {
    where?: UserLocationWhereInput;
    orderBy?: UserLocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserLocation>;
  userLocationsConnection: (args?: {
    where?: UserLocationWhereInput;
    orderBy?: UserLocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserLocationConnectionPromise;
  userSavedVoid: (
    where: UserSavedVoidWhereUniqueInput
  ) => UserSavedVoidNullablePromise;
  userSavedVoids: (args?: {
    where?: UserSavedVoidWhereInput;
    orderBy?: UserSavedVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserSavedVoid>;
  userSavedVoidsConnection: (args?: {
    where?: UserSavedVoidWhereInput;
    orderBy?: UserSavedVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserSavedVoidConnectionPromise;
  vote: (where: VoteWhereUniqueInput) => VoteNullablePromise;
  votes: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vote>;
  votesConnection: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VoteConnectionPromise;
  voteBucket: (where: VoteBucketWhereUniqueInput) => VoteBucketNullablePromise;
  voteBuckets: (args?: {
    where?: VoteBucketWhereInput;
    orderBy?: VoteBucketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<VoteBucket>;
  voteBucketsConnection: (args?: {
    where?: VoteBucketWhereInput;
    orderBy?: VoteBucketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VoteBucketConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createContent: (data: ContentCreateInput) => ContentPromise;
  updateContent: (args: {
    data: ContentUpdateInput;
    where: ContentWhereUniqueInput;
  }) => ContentPromise;
  updateManyContents: (args: {
    data: ContentUpdateManyMutationInput;
    where?: ContentWhereInput;
  }) => BatchPayloadPromise;
  upsertContent: (args: {
    where: ContentWhereUniqueInput;
    create: ContentCreateInput;
    update: ContentUpdateInput;
  }) => ContentPromise;
  deleteContent: (where: ContentWhereUniqueInput) => ContentPromise;
  deleteManyContents: (where?: ContentWhereInput) => BatchPayloadPromise;
  createEchoOfShoutInVoid: (
    data: EchoOfShoutInVoidCreateInput
  ) => EchoOfShoutInVoidPromise;
  updateEchoOfShoutInVoid: (args: {
    data: EchoOfShoutInVoidUpdateInput;
    where: EchoOfShoutInVoidWhereUniqueInput;
  }) => EchoOfShoutInVoidPromise;
  updateManyEchoOfShoutInVoids: (args: {
    data: EchoOfShoutInVoidUpdateManyMutationInput;
    where?: EchoOfShoutInVoidWhereInput;
  }) => BatchPayloadPromise;
  upsertEchoOfShoutInVoid: (args: {
    where: EchoOfShoutInVoidWhereUniqueInput;
    create: EchoOfShoutInVoidCreateInput;
    update: EchoOfShoutInVoidUpdateInput;
  }) => EchoOfShoutInVoidPromise;
  deleteEchoOfShoutInVoid: (
    where: EchoOfShoutInVoidWhereUniqueInput
  ) => EchoOfShoutInVoidPromise;
  deleteManyEchoOfShoutInVoids: (
    where?: EchoOfShoutInVoidWhereInput
  ) => BatchPayloadPromise;
  createNVoid: (data: NVoidCreateInput) => NVoidPromise;
  updateNVoid: (args: {
    data: NVoidUpdateInput;
    where: NVoidWhereUniqueInput;
  }) => NVoidPromise;
  updateManyNVoids: (args: {
    data: NVoidUpdateManyMutationInput;
    where?: NVoidWhereInput;
  }) => BatchPayloadPromise;
  upsertNVoid: (args: {
    where: NVoidWhereUniqueInput;
    create: NVoidCreateInput;
    update: NVoidUpdateInput;
  }) => NVoidPromise;
  deleteNVoid: (where: NVoidWhereUniqueInput) => NVoidPromise;
  deleteManyNVoids: (where?: NVoidWhereInput) => BatchPayloadPromise;
  createReplyToEchoOfShoutInVoid: (
    data: ReplyToEchoOfShoutInVoidCreateInput
  ) => ReplyToEchoOfShoutInVoidPromise;
  updateReplyToEchoOfShoutInVoid: (args: {
    data: ReplyToEchoOfShoutInVoidUpdateInput;
    where: ReplyToEchoOfShoutInVoidWhereUniqueInput;
  }) => ReplyToEchoOfShoutInVoidPromise;
  upsertReplyToEchoOfShoutInVoid: (args: {
    where: ReplyToEchoOfShoutInVoidWhereUniqueInput;
    create: ReplyToEchoOfShoutInVoidCreateInput;
    update: ReplyToEchoOfShoutInVoidUpdateInput;
  }) => ReplyToEchoOfShoutInVoidPromise;
  deleteReplyToEchoOfShoutInVoid: (
    where: ReplyToEchoOfShoutInVoidWhereUniqueInput
  ) => ReplyToEchoOfShoutInVoidPromise;
  deleteManyReplyToEchoOfShoutInVoids: (
    where?: ReplyToEchoOfShoutInVoidWhereInput
  ) => BatchPayloadPromise;
  createReplyToShoutInVoid: (
    data: ReplyToShoutInVoidCreateInput
  ) => ReplyToShoutInVoidPromise;
  updateReplyToShoutInVoid: (args: {
    data: ReplyToShoutInVoidUpdateInput;
    where: ReplyToShoutInVoidWhereUniqueInput;
  }) => ReplyToShoutInVoidPromise;
  upsertReplyToShoutInVoid: (args: {
    where: ReplyToShoutInVoidWhereUniqueInput;
    create: ReplyToShoutInVoidCreateInput;
    update: ReplyToShoutInVoidUpdateInput;
  }) => ReplyToShoutInVoidPromise;
  deleteReplyToShoutInVoid: (
    where: ReplyToShoutInVoidWhereUniqueInput
  ) => ReplyToShoutInVoidPromise;
  deleteManyReplyToShoutInVoids: (
    where?: ReplyToShoutInVoidWhereInput
  ) => BatchPayloadPromise;
  createShoutInVoid: (data: ShoutInVoidCreateInput) => ShoutInVoidPromise;
  updateShoutInVoid: (args: {
    data: ShoutInVoidUpdateInput;
    where: ShoutInVoidWhereUniqueInput;
  }) => ShoutInVoidPromise;
  updateManyShoutInVoids: (args: {
    data: ShoutInVoidUpdateManyMutationInput;
    where?: ShoutInVoidWhereInput;
  }) => BatchPayloadPromise;
  upsertShoutInVoid: (args: {
    where: ShoutInVoidWhereUniqueInput;
    create: ShoutInVoidCreateInput;
    update: ShoutInVoidUpdateInput;
  }) => ShoutInVoidPromise;
  deleteShoutInVoid: (where: ShoutInVoidWhereUniqueInput) => ShoutInVoidPromise;
  deleteManyShoutInVoids: (
    where?: ShoutInVoidWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserActivatedEchoOfShout: (
    data: UserActivatedEchoOfShoutCreateInput
  ) => UserActivatedEchoOfShoutPromise;
  updateUserActivatedEchoOfShout: (args: {
    data: UserActivatedEchoOfShoutUpdateInput;
    where: UserActivatedEchoOfShoutWhereUniqueInput;
  }) => UserActivatedEchoOfShoutPromise;
  updateManyUserActivatedEchoOfShouts: (args: {
    data: UserActivatedEchoOfShoutUpdateManyMutationInput;
    where?: UserActivatedEchoOfShoutWhereInput;
  }) => BatchPayloadPromise;
  upsertUserActivatedEchoOfShout: (args: {
    where: UserActivatedEchoOfShoutWhereUniqueInput;
    create: UserActivatedEchoOfShoutCreateInput;
    update: UserActivatedEchoOfShoutUpdateInput;
  }) => UserActivatedEchoOfShoutPromise;
  deleteUserActivatedEchoOfShout: (
    where: UserActivatedEchoOfShoutWhereUniqueInput
  ) => UserActivatedEchoOfShoutPromise;
  deleteManyUserActivatedEchoOfShouts: (
    where?: UserActivatedEchoOfShoutWhereInput
  ) => BatchPayloadPromise;
  createUserLocation: (data: UserLocationCreateInput) => UserLocationPromise;
  updateUserLocation: (args: {
    data: UserLocationUpdateInput;
    where: UserLocationWhereUniqueInput;
  }) => UserLocationPromise;
  updateManyUserLocations: (args: {
    data: UserLocationUpdateManyMutationInput;
    where?: UserLocationWhereInput;
  }) => BatchPayloadPromise;
  upsertUserLocation: (args: {
    where: UserLocationWhereUniqueInput;
    create: UserLocationCreateInput;
    update: UserLocationUpdateInput;
  }) => UserLocationPromise;
  deleteUserLocation: (
    where: UserLocationWhereUniqueInput
  ) => UserLocationPromise;
  deleteManyUserLocations: (
    where?: UserLocationWhereInput
  ) => BatchPayloadPromise;
  createUserSavedVoid: (data: UserSavedVoidCreateInput) => UserSavedVoidPromise;
  updateUserSavedVoid: (args: {
    data: UserSavedVoidUpdateInput;
    where: UserSavedVoidWhereUniqueInput;
  }) => UserSavedVoidPromise;
  updateManyUserSavedVoids: (args: {
    data: UserSavedVoidUpdateManyMutationInput;
    where?: UserSavedVoidWhereInput;
  }) => BatchPayloadPromise;
  upsertUserSavedVoid: (args: {
    where: UserSavedVoidWhereUniqueInput;
    create: UserSavedVoidCreateInput;
    update: UserSavedVoidUpdateInput;
  }) => UserSavedVoidPromise;
  deleteUserSavedVoid: (
    where: UserSavedVoidWhereUniqueInput
  ) => UserSavedVoidPromise;
  deleteManyUserSavedVoids: (
    where?: UserSavedVoidWhereInput
  ) => BatchPayloadPromise;
  createVote: (data: VoteCreateInput) => VotePromise;
  updateVote: (args: {
    data: VoteUpdateInput;
    where: VoteWhereUniqueInput;
  }) => VotePromise;
  updateManyVotes: (args: {
    data: VoteUpdateManyMutationInput;
    where?: VoteWhereInput;
  }) => BatchPayloadPromise;
  upsertVote: (args: {
    where: VoteWhereUniqueInput;
    create: VoteCreateInput;
    update: VoteUpdateInput;
  }) => VotePromise;
  deleteVote: (where: VoteWhereUniqueInput) => VotePromise;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayloadPromise;
  createVoteBucket: (data: VoteBucketCreateInput) => VoteBucketPromise;
  updateVoteBucket: (args: {
    data: VoteBucketUpdateInput;
    where: VoteBucketWhereUniqueInput;
  }) => VoteBucketPromise;
  updateManyVoteBuckets: (args: {
    data: VoteBucketUpdateManyMutationInput;
    where?: VoteBucketWhereInput;
  }) => BatchPayloadPromise;
  upsertVoteBucket: (args: {
    where: VoteBucketWhereUniqueInput;
    create: VoteBucketCreateInput;
    update: VoteBucketUpdateInput;
  }) => VoteBucketPromise;
  deleteVoteBucket: (where: VoteBucketWhereUniqueInput) => VoteBucketPromise;
  deleteManyVoteBuckets: (where?: VoteBucketWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  content: (
    where?: ContentSubscriptionWhereInput
  ) => ContentSubscriptionPayloadSubscription;
  echoOfShoutInVoid: (
    where?: EchoOfShoutInVoidSubscriptionWhereInput
  ) => EchoOfShoutInVoidSubscriptionPayloadSubscription;
  nVoid: (
    where?: NVoidSubscriptionWhereInput
  ) => NVoidSubscriptionPayloadSubscription;
  replyToEchoOfShoutInVoid: (
    where?: ReplyToEchoOfShoutInVoidSubscriptionWhereInput
  ) => ReplyToEchoOfShoutInVoidSubscriptionPayloadSubscription;
  replyToShoutInVoid: (
    where?: ReplyToShoutInVoidSubscriptionWhereInput
  ) => ReplyToShoutInVoidSubscriptionPayloadSubscription;
  shoutInVoid: (
    where?: ShoutInVoidSubscriptionWhereInput
  ) => ShoutInVoidSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userActivatedEchoOfShout: (
    where?: UserActivatedEchoOfShoutSubscriptionWhereInput
  ) => UserActivatedEchoOfShoutSubscriptionPayloadSubscription;
  userLocation: (
    where?: UserLocationSubscriptionWhereInput
  ) => UserLocationSubscriptionPayloadSubscription;
  userSavedVoid: (
    where?: UserSavedVoidSubscriptionWhereInput
  ) => UserSavedVoidSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
  voteBucket: (
    where?: VoteBucketSubscriptionWhereInput
  ) => VoteBucketSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ReplyToEchoOfShoutInVoidOrderByInput =
  | "replyToEchoOfShoutInVoidId_ASC"
  | "replyToEchoOfShoutInVoidId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserLocationOrderByInput =
  | "userLocationId_ASC"
  | "userLocationId_DESC"
  | "userGeohash_ASC"
  | "userGeohash_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type EchoOfShoutInVoidOrderByInput =
  | "echoOfShoutInVoidId_ASC"
  | "echoOfShoutInVoidId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "originalShoutVoidGeohash_ASC"
  | "originalShoutVoidGeohash_DESC";

export type VoteBucketOrderByInput =
  | "voteBucketId_ASC"
  | "voteBucketId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "voteCount_ASC"
  | "voteCount_DESC";

export type ContentOrderByInput =
  | "contentId_ASC"
  | "contentId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "message_ASC"
  | "message_DESC";

export type VoteOrderByInput =
  | "voteId_ASC"
  | "voteId_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "isUpvote_ASC"
  | "isUpvote_DESC"
  | "uniqueHash_ASC"
  | "uniqueHash_DESC";

export type NVoidOrderByInput =
  | "voidId_ASC"
  | "voidId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "voidGeohash_ASC"
  | "voidGeohash_DESC";

export type ShoutInVoidOrderByInput =
  | "shoutInVoidId_ASC"
  | "shoutInVoidId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "contentMessageHash_ASC"
  | "contentMessageHash_DESC";

export type UserOrderByInput =
  | "userId_ASC"
  | "userId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ReplyToShoutInVoidOrderByInput =
  | "replyToShoutInVoidId_ASC"
  | "replyToShoutInVoidId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserSavedVoidOrderByInput =
  | "userSavedVoidId_ASC"
  | "userSavedVoidId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "originalVoidGeohash_ASC"
  | "originalVoidGeohash_DESC";

export type UserActivatedEchoOfShoutOrderByInput =
  | "userActivatedEchoOfShoutId_ASC"
  | "userActivatedEchoOfShoutId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "originalShoutVoidGeohash_ASC"
  | "originalShoutVoidGeohash_DESC";

export interface UserLocationUpdateWithWhereUniqueWithoutCreatedByInput {
  where: UserLocationWhereUniqueInput;
  data: UserLocationUpdateWithoutCreatedByDataInput;
}

export type ContentWhereUniqueInput = AtLeastOne<{
  contentId: Maybe<ID_Input>;
}>;

export interface UserSavedVoidUpdateWithoutCreatedByDataInput {
  originalVoidGeohash?: Maybe<String>;
}

export interface ShoutInVoidWhereInput {
  shoutInVoidId?: Maybe<ID_Input>;
  shoutInVoidId_not?: Maybe<ID_Input>;
  shoutInVoidId_in?: Maybe<ID_Input[] | ID_Input>;
  shoutInVoidId_not_in?: Maybe<ID_Input[] | ID_Input>;
  shoutInVoidId_lt?: Maybe<ID_Input>;
  shoutInVoidId_lte?: Maybe<ID_Input>;
  shoutInVoidId_gt?: Maybe<ID_Input>;
  shoutInVoidId_gte?: Maybe<ID_Input>;
  shoutInVoidId_contains?: Maybe<ID_Input>;
  shoutInVoidId_not_contains?: Maybe<ID_Input>;
  shoutInVoidId_starts_with?: Maybe<ID_Input>;
  shoutInVoidId_not_starts_with?: Maybe<ID_Input>;
  shoutInVoidId_ends_with?: Maybe<ID_Input>;
  shoutInVoidId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<UserWhereInput>;
  content?: Maybe<ContentWhereInput>;
  contentMessageHash?: Maybe<String>;
  contentMessageHash_not?: Maybe<String>;
  contentMessageHash_in?: Maybe<String[] | String>;
  contentMessageHash_not_in?: Maybe<String[] | String>;
  contentMessageHash_lt?: Maybe<String>;
  contentMessageHash_lte?: Maybe<String>;
  contentMessageHash_gt?: Maybe<String>;
  contentMessageHash_gte?: Maybe<String>;
  contentMessageHash_contains?: Maybe<String>;
  contentMessageHash_not_contains?: Maybe<String>;
  contentMessageHash_starts_with?: Maybe<String>;
  contentMessageHash_not_starts_with?: Maybe<String>;
  contentMessageHash_ends_with?: Maybe<String>;
  contentMessageHash_not_ends_with?: Maybe<String>;
  nVoid?: Maybe<NVoidWhereInput>;
  voteBucket?: Maybe<VoteBucketWhereInput>;
  echos_every?: Maybe<EchoOfShoutInVoidWhereInput>;
  echos_some?: Maybe<EchoOfShoutInVoidWhereInput>;
  echos_none?: Maybe<EchoOfShoutInVoidWhereInput>;
  replies_every?: Maybe<ReplyToShoutInVoidWhereInput>;
  replies_some?: Maybe<ReplyToShoutInVoidWhereInput>;
  replies_none?: Maybe<ReplyToShoutInVoidWhereInput>;
  AND?: Maybe<ShoutInVoidWhereInput[] | ShoutInVoidWhereInput>;
  OR?: Maybe<ShoutInVoidWhereInput[] | ShoutInVoidWhereInput>;
  NOT?: Maybe<ShoutInVoidWhereInput[] | ShoutInVoidWhereInput>;
}

export interface UserSavedVoidUpsertWithWhereUniqueWithoutCreatedByInput {
  where: UserSavedVoidWhereUniqueInput;
  update: UserSavedVoidUpdateWithoutCreatedByDataInput;
  create: UserSavedVoidCreateWithoutCreatedByInput;
}

export interface ReplyToEchoOfShoutInVoidWhereInput {
  replyToEchoOfShoutInVoidId?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_not?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_in?: Maybe<ID_Input[] | ID_Input>;
  replyToEchoOfShoutInVoidId_not_in?: Maybe<ID_Input[] | ID_Input>;
  replyToEchoOfShoutInVoidId_lt?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_lte?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_gt?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_gte?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_contains?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_not_contains?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_starts_with?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_not_starts_with?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_ends_with?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<UserWhereInput>;
  content?: Maybe<ContentWhereInput>;
  voteBucket?: Maybe<VoteBucketWhereInput>;
  originalEchoOfShoutInVoid?: Maybe<EchoOfShoutInVoidWhereInput>;
  AND?: Maybe<
    ReplyToEchoOfShoutInVoidWhereInput[] | ReplyToEchoOfShoutInVoidWhereInput
  >;
  OR?: Maybe<
    ReplyToEchoOfShoutInVoidWhereInput[] | ReplyToEchoOfShoutInVoidWhereInput
  >;
  NOT?: Maybe<
    ReplyToEchoOfShoutInVoidWhereInput[] | ReplyToEchoOfShoutInVoidWhereInput
  >;
}

export interface UserSavedVoidScalarWhereInput {
  userSavedVoidId?: Maybe<ID_Input>;
  userSavedVoidId_not?: Maybe<ID_Input>;
  userSavedVoidId_in?: Maybe<ID_Input[] | ID_Input>;
  userSavedVoidId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userSavedVoidId_lt?: Maybe<ID_Input>;
  userSavedVoidId_lte?: Maybe<ID_Input>;
  userSavedVoidId_gt?: Maybe<ID_Input>;
  userSavedVoidId_gte?: Maybe<ID_Input>;
  userSavedVoidId_contains?: Maybe<ID_Input>;
  userSavedVoidId_not_contains?: Maybe<ID_Input>;
  userSavedVoidId_starts_with?: Maybe<ID_Input>;
  userSavedVoidId_not_starts_with?: Maybe<ID_Input>;
  userSavedVoidId_ends_with?: Maybe<ID_Input>;
  userSavedVoidId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  originalVoidGeohash?: Maybe<String>;
  originalVoidGeohash_not?: Maybe<String>;
  originalVoidGeohash_in?: Maybe<String[] | String>;
  originalVoidGeohash_not_in?: Maybe<String[] | String>;
  originalVoidGeohash_lt?: Maybe<String>;
  originalVoidGeohash_lte?: Maybe<String>;
  originalVoidGeohash_gt?: Maybe<String>;
  originalVoidGeohash_gte?: Maybe<String>;
  originalVoidGeohash_contains?: Maybe<String>;
  originalVoidGeohash_not_contains?: Maybe<String>;
  originalVoidGeohash_starts_with?: Maybe<String>;
  originalVoidGeohash_not_starts_with?: Maybe<String>;
  originalVoidGeohash_ends_with?: Maybe<String>;
  originalVoidGeohash_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserSavedVoidScalarWhereInput[] | UserSavedVoidScalarWhereInput>;
  OR?: Maybe<UserSavedVoidScalarWhereInput[] | UserSavedVoidScalarWhereInput>;
  NOT?: Maybe<UserSavedVoidScalarWhereInput[] | UserSavedVoidScalarWhereInput>;
}

export interface UserSavedVoidWhereInput {
  userSavedVoidId?: Maybe<ID_Input>;
  userSavedVoidId_not?: Maybe<ID_Input>;
  userSavedVoidId_in?: Maybe<ID_Input[] | ID_Input>;
  userSavedVoidId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userSavedVoidId_lt?: Maybe<ID_Input>;
  userSavedVoidId_lte?: Maybe<ID_Input>;
  userSavedVoidId_gt?: Maybe<ID_Input>;
  userSavedVoidId_gte?: Maybe<ID_Input>;
  userSavedVoidId_contains?: Maybe<ID_Input>;
  userSavedVoidId_not_contains?: Maybe<ID_Input>;
  userSavedVoidId_starts_with?: Maybe<ID_Input>;
  userSavedVoidId_not_starts_with?: Maybe<ID_Input>;
  userSavedVoidId_ends_with?: Maybe<ID_Input>;
  userSavedVoidId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<UserWhereInput>;
  originalVoidGeohash?: Maybe<String>;
  originalVoidGeohash_not?: Maybe<String>;
  originalVoidGeohash_in?: Maybe<String[] | String>;
  originalVoidGeohash_not_in?: Maybe<String[] | String>;
  originalVoidGeohash_lt?: Maybe<String>;
  originalVoidGeohash_lte?: Maybe<String>;
  originalVoidGeohash_gt?: Maybe<String>;
  originalVoidGeohash_gte?: Maybe<String>;
  originalVoidGeohash_contains?: Maybe<String>;
  originalVoidGeohash_not_contains?: Maybe<String>;
  originalVoidGeohash_starts_with?: Maybe<String>;
  originalVoidGeohash_not_starts_with?: Maybe<String>;
  originalVoidGeohash_ends_with?: Maybe<String>;
  originalVoidGeohash_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserSavedVoidWhereInput[] | UserSavedVoidWhereInput>;
  OR?: Maybe<UserSavedVoidWhereInput[] | UserSavedVoidWhereInput>;
  NOT?: Maybe<UserSavedVoidWhereInput[] | UserSavedVoidWhereInput>;
}

export interface UserSavedVoidUpdateManyWithWhereNestedInput {
  where: UserSavedVoidScalarWhereInput;
  data: UserSavedVoidUpdateManyDataInput;
}

export interface NVoidWhereInput {
  voidId?: Maybe<ID_Input>;
  voidId_not?: Maybe<ID_Input>;
  voidId_in?: Maybe<ID_Input[] | ID_Input>;
  voidId_not_in?: Maybe<ID_Input[] | ID_Input>;
  voidId_lt?: Maybe<ID_Input>;
  voidId_lte?: Maybe<ID_Input>;
  voidId_gt?: Maybe<ID_Input>;
  voidId_gte?: Maybe<ID_Input>;
  voidId_contains?: Maybe<ID_Input>;
  voidId_not_contains?: Maybe<ID_Input>;
  voidId_starts_with?: Maybe<ID_Input>;
  voidId_not_starts_with?: Maybe<ID_Input>;
  voidId_ends_with?: Maybe<ID_Input>;
  voidId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<UserWhereInput>;
  voidGeohash?: Maybe<String>;
  voidGeohash_not?: Maybe<String>;
  voidGeohash_in?: Maybe<String[] | String>;
  voidGeohash_not_in?: Maybe<String[] | String>;
  voidGeohash_lt?: Maybe<String>;
  voidGeohash_lte?: Maybe<String>;
  voidGeohash_gt?: Maybe<String>;
  voidGeohash_gte?: Maybe<String>;
  voidGeohash_contains?: Maybe<String>;
  voidGeohash_not_contains?: Maybe<String>;
  voidGeohash_starts_with?: Maybe<String>;
  voidGeohash_not_starts_with?: Maybe<String>;
  voidGeohash_ends_with?: Maybe<String>;
  voidGeohash_not_ends_with?: Maybe<String>;
  shouts_every?: Maybe<ShoutInVoidWhereInput>;
  shouts_some?: Maybe<ShoutInVoidWhereInput>;
  shouts_none?: Maybe<ShoutInVoidWhereInput>;
  echos_every?: Maybe<EchoOfShoutInVoidWhereInput>;
  echos_some?: Maybe<EchoOfShoutInVoidWhereInput>;
  echos_none?: Maybe<EchoOfShoutInVoidWhereInput>;
  AND?: Maybe<NVoidWhereInput[] | NVoidWhereInput>;
  OR?: Maybe<NVoidWhereInput[] | NVoidWhereInput>;
  NOT?: Maybe<NVoidWhereInput[] | NVoidWhereInput>;
}

export interface UserUpdateWithoutLocationHistoryDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  lastLocation?: Maybe<UserLocationUpdateOneInput>;
  createdContent?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteUpdateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidUpdateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidUpdateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidUpdateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutUpdateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
}

export interface UserLocationUpsertNestedInput {
  update: UserLocationUpdateDataInput;
  create: UserLocationCreateInput;
}

export interface ContentUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    ContentCreateWithoutCreatedByInput[] | ContentCreateWithoutCreatedByInput
  >;
  delete?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  connect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  set?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  disconnect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  update?: Maybe<
    | ContentUpdateWithWhereUniqueWithoutCreatedByInput[]
    | ContentUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | ContentUpsertWithWhereUniqueWithoutCreatedByInput[]
    | ContentUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<ContentScalarWhereInput[] | ContentScalarWhereInput>;
  updateMany?: Maybe<
    | ContentUpdateManyWithWhereNestedInput[]
    | ContentUpdateManyWithWhereNestedInput
  >;
}

export interface UserSavedVoidUpdateManyDataInput {
  originalVoidGeohash?: Maybe<String>;
}

export interface ContentUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ContentWhereUniqueInput;
  data: ContentUpdateWithoutCreatedByDataInput;
}

export interface VoteBucketWhereInput {
  voteBucketId?: Maybe<ID_Input>;
  voteBucketId_not?: Maybe<ID_Input>;
  voteBucketId_in?: Maybe<ID_Input[] | ID_Input>;
  voteBucketId_not_in?: Maybe<ID_Input[] | ID_Input>;
  voteBucketId_lt?: Maybe<ID_Input>;
  voteBucketId_lte?: Maybe<ID_Input>;
  voteBucketId_gt?: Maybe<ID_Input>;
  voteBucketId_gte?: Maybe<ID_Input>;
  voteBucketId_contains?: Maybe<ID_Input>;
  voteBucketId_not_contains?: Maybe<ID_Input>;
  voteBucketId_starts_with?: Maybe<ID_Input>;
  voteBucketId_not_starts_with?: Maybe<ID_Input>;
  voteBucketId_ends_with?: Maybe<ID_Input>;
  voteBucketId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  voteCount?: Maybe<Int>;
  voteCount_not?: Maybe<Int>;
  voteCount_in?: Maybe<Int[] | Int>;
  voteCount_not_in?: Maybe<Int[] | Int>;
  voteCount_lt?: Maybe<Int>;
  voteCount_lte?: Maybe<Int>;
  voteCount_gt?: Maybe<Int>;
  voteCount_gte?: Maybe<Int>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  AND?: Maybe<VoteBucketWhereInput[] | VoteBucketWhereInput>;
  OR?: Maybe<VoteBucketWhereInput[] | VoteBucketWhereInput>;
  NOT?: Maybe<VoteBucketWhereInput[] | VoteBucketWhereInput>;
}

export interface ContentUpdateWithoutCreatedByDataInput {
  message?: Maybe<String>;
}

export interface VoteWhereInput {
  voteId?: Maybe<ID_Input>;
  voteId_not?: Maybe<ID_Input>;
  voteId_in?: Maybe<ID_Input[] | ID_Input>;
  voteId_not_in?: Maybe<ID_Input[] | ID_Input>;
  voteId_lt?: Maybe<ID_Input>;
  voteId_lte?: Maybe<ID_Input>;
  voteId_gt?: Maybe<ID_Input>;
  voteId_gte?: Maybe<ID_Input>;
  voteId_contains?: Maybe<ID_Input>;
  voteId_not_contains?: Maybe<ID_Input>;
  voteId_starts_with?: Maybe<ID_Input>;
  voteId_not_starts_with?: Maybe<ID_Input>;
  voteId_ends_with?: Maybe<ID_Input>;
  voteId_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<UserWhereInput>;
  voteBucket?: Maybe<VoteBucketWhereInput>;
  isUpvote?: Maybe<Boolean>;
  isUpvote_not?: Maybe<Boolean>;
  uniqueHash?: Maybe<String>;
  uniqueHash_not?: Maybe<String>;
  uniqueHash_in?: Maybe<String[] | String>;
  uniqueHash_not_in?: Maybe<String[] | String>;
  uniqueHash_lt?: Maybe<String>;
  uniqueHash_lte?: Maybe<String>;
  uniqueHash_gt?: Maybe<String>;
  uniqueHash_gte?: Maybe<String>;
  uniqueHash_contains?: Maybe<String>;
  uniqueHash_not_contains?: Maybe<String>;
  uniqueHash_starts_with?: Maybe<String>;
  uniqueHash_not_starts_with?: Maybe<String>;
  uniqueHash_ends_with?: Maybe<String>;
  uniqueHash_not_ends_with?: Maybe<String>;
  AND?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  OR?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  NOT?: Maybe<VoteWhereInput[] | VoteWhereInput>;
}

export interface ContentUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ContentWhereUniqueInput;
  update: ContentUpdateWithoutCreatedByDataInput;
  create: ContentCreateWithoutCreatedByInput;
}

export interface ContentWhereInput {
  contentId?: Maybe<ID_Input>;
  contentId_not?: Maybe<ID_Input>;
  contentId_in?: Maybe<ID_Input[] | ID_Input>;
  contentId_not_in?: Maybe<ID_Input[] | ID_Input>;
  contentId_lt?: Maybe<ID_Input>;
  contentId_lte?: Maybe<ID_Input>;
  contentId_gt?: Maybe<ID_Input>;
  contentId_gte?: Maybe<ID_Input>;
  contentId_contains?: Maybe<ID_Input>;
  contentId_not_contains?: Maybe<ID_Input>;
  contentId_starts_with?: Maybe<ID_Input>;
  contentId_not_starts_with?: Maybe<ID_Input>;
  contentId_ends_with?: Maybe<ID_Input>;
  contentId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<UserWhereInput>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  AND?: Maybe<ContentWhereInput[] | ContentWhereInput>;
  OR?: Maybe<ContentWhereInput[] | ContentWhereInput>;
  NOT?: Maybe<ContentWhereInput[] | ContentWhereInput>;
}

export interface ContentScalarWhereInput {
  contentId?: Maybe<ID_Input>;
  contentId_not?: Maybe<ID_Input>;
  contentId_in?: Maybe<ID_Input[] | ID_Input>;
  contentId_not_in?: Maybe<ID_Input[] | ID_Input>;
  contentId_lt?: Maybe<ID_Input>;
  contentId_lte?: Maybe<ID_Input>;
  contentId_gt?: Maybe<ID_Input>;
  contentId_gte?: Maybe<ID_Input>;
  contentId_contains?: Maybe<ID_Input>;
  contentId_not_contains?: Maybe<ID_Input>;
  contentId_starts_with?: Maybe<ID_Input>;
  contentId_not_starts_with?: Maybe<ID_Input>;
  contentId_ends_with?: Maybe<ID_Input>;
  contentId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  AND?: Maybe<ContentScalarWhereInput[] | ContentScalarWhereInput>;
  OR?: Maybe<ContentScalarWhereInput[] | ContentScalarWhereInput>;
  NOT?: Maybe<ContentScalarWhereInput[] | ContentScalarWhereInput>;
}

export interface UserWhereInput {
  userId?: Maybe<ID_Input>;
  userId_not?: Maybe<ID_Input>;
  userId_in?: Maybe<ID_Input[] | ID_Input>;
  userId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userId_lt?: Maybe<ID_Input>;
  userId_lte?: Maybe<ID_Input>;
  userId_gt?: Maybe<ID_Input>;
  userId_gte?: Maybe<ID_Input>;
  userId_contains?: Maybe<ID_Input>;
  userId_not_contains?: Maybe<ID_Input>;
  userId_starts_with?: Maybe<ID_Input>;
  userId_not_starts_with?: Maybe<ID_Input>;
  userId_ends_with?: Maybe<ID_Input>;
  userId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  lastLocation?: Maybe<UserLocationWhereInput>;
  locationHistory_every?: Maybe<UserLocationWhereInput>;
  locationHistory_some?: Maybe<UserLocationWhereInput>;
  locationHistory_none?: Maybe<UserLocationWhereInput>;
  createdContent_every?: Maybe<ContentWhereInput>;
  createdContent_some?: Maybe<ContentWhereInput>;
  createdContent_none?: Maybe<ContentWhereInput>;
  createdVotes_every?: Maybe<VoteWhereInput>;
  createdVotes_some?: Maybe<VoteWhereInput>;
  createdVotes_none?: Maybe<VoteWhereInput>;
  createdVoids_every?: Maybe<NVoidWhereInput>;
  createdVoids_some?: Maybe<NVoidWhereInput>;
  createdVoids_none?: Maybe<NVoidWhereInput>;
  savedVoids_every?: Maybe<UserSavedVoidWhereInput>;
  savedVoids_some?: Maybe<UserSavedVoidWhereInput>;
  savedVoids_none?: Maybe<UserSavedVoidWhereInput>;
  createdShoutsInVoids_every?: Maybe<ShoutInVoidWhereInput>;
  createdShoutsInVoids_some?: Maybe<ShoutInVoidWhereInput>;
  createdShoutsInVoids_none?: Maybe<ShoutInVoidWhereInput>;
  activatedEchosOfShouts_every?: Maybe<UserActivatedEchoOfShoutWhereInput>;
  activatedEchosOfShouts_some?: Maybe<UserActivatedEchoOfShoutWhereInput>;
  activatedEchosOfShouts_none?: Maybe<UserActivatedEchoOfShoutWhereInput>;
  createdEchosOfShoutsInVoid_every?: Maybe<EchoOfShoutInVoidWhereInput>;
  createdEchosOfShoutsInVoid_some?: Maybe<EchoOfShoutInVoidWhereInput>;
  createdEchosOfShoutsInVoid_none?: Maybe<EchoOfShoutInVoidWhereInput>;
  repliesToShoutsInVoid_every?: Maybe<ReplyToShoutInVoidWhereInput>;
  repliesToShoutsInVoid_some?: Maybe<ReplyToShoutInVoidWhereInput>;
  repliesToShoutsInVoid_none?: Maybe<ReplyToShoutInVoidWhereInput>;
  repliesToEchosOfShoutsInVoid_every?: Maybe<
    ReplyToEchoOfShoutInVoidWhereInput
  >;
  repliesToEchosOfShoutsInVoid_some?: Maybe<ReplyToEchoOfShoutInVoidWhereInput>;
  repliesToEchosOfShoutsInVoid_none?: Maybe<ReplyToEchoOfShoutInVoidWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ContentUpdateManyWithWhereNestedInput {
  where: ContentScalarWhereInput;
  data: ContentUpdateManyDataInput;
}

export interface UserLocationWhereInput {
  userLocationId?: Maybe<ID_Input>;
  userLocationId_not?: Maybe<ID_Input>;
  userLocationId_in?: Maybe<ID_Input[] | ID_Input>;
  userLocationId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userLocationId_lt?: Maybe<ID_Input>;
  userLocationId_lte?: Maybe<ID_Input>;
  userLocationId_gt?: Maybe<ID_Input>;
  userLocationId_gte?: Maybe<ID_Input>;
  userLocationId_contains?: Maybe<ID_Input>;
  userLocationId_not_contains?: Maybe<ID_Input>;
  userLocationId_starts_with?: Maybe<ID_Input>;
  userLocationId_not_starts_with?: Maybe<ID_Input>;
  userLocationId_ends_with?: Maybe<ID_Input>;
  userLocationId_not_ends_with?: Maybe<ID_Input>;
  userGeohash?: Maybe<String>;
  userGeohash_not?: Maybe<String>;
  userGeohash_in?: Maybe<String[] | String>;
  userGeohash_not_in?: Maybe<String[] | String>;
  userGeohash_lt?: Maybe<String>;
  userGeohash_lte?: Maybe<String>;
  userGeohash_gt?: Maybe<String>;
  userGeohash_gte?: Maybe<String>;
  userGeohash_contains?: Maybe<String>;
  userGeohash_not_contains?: Maybe<String>;
  userGeohash_starts_with?: Maybe<String>;
  userGeohash_not_starts_with?: Maybe<String>;
  userGeohash_ends_with?: Maybe<String>;
  userGeohash_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<UserWhereInput>;
  AND?: Maybe<UserLocationWhereInput[] | UserLocationWhereInput>;
  OR?: Maybe<UserLocationWhereInput[] | UserLocationWhereInput>;
  NOT?: Maybe<UserLocationWhereInput[] | UserLocationWhereInput>;
}

export interface ContentUpdateManyDataInput {
  message?: Maybe<String>;
}

export interface ShoutInVoidSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ShoutInVoidWhereInput>;
  AND?: Maybe<
    ShoutInVoidSubscriptionWhereInput[] | ShoutInVoidSubscriptionWhereInput
  >;
  OR?: Maybe<
    ShoutInVoidSubscriptionWhereInput[] | ShoutInVoidSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ShoutInVoidSubscriptionWhereInput[] | ShoutInVoidSubscriptionWhereInput
  >;
}

export interface VoteUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    VoteCreateWithoutCreatedByInput[] | VoteCreateWithoutCreatedByInput
  >;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutCreatedByInput[]
    | VoteUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutCreatedByInput[]
    | VoteUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  updateMany?: Maybe<
    VoteUpdateManyWithWhereNestedInput[] | VoteUpdateManyWithWhereNestedInput
  >;
}

export interface ReplyToEchoOfShoutInVoidSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReplyToEchoOfShoutInVoidWhereInput>;
  AND?: Maybe<
    | ReplyToEchoOfShoutInVoidSubscriptionWhereInput[]
    | ReplyToEchoOfShoutInVoidSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ReplyToEchoOfShoutInVoidSubscriptionWhereInput[]
    | ReplyToEchoOfShoutInVoidSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ReplyToEchoOfShoutInVoidSubscriptionWhereInput[]
    | ReplyToEchoOfShoutInVoidSubscriptionWhereInput
  >;
}

export interface VoteUpdateWithWhereUniqueWithoutCreatedByInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutCreatedByDataInput;
}

export interface EchoOfShoutInVoidSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EchoOfShoutInVoidWhereInput>;
  AND?: Maybe<
    | EchoOfShoutInVoidSubscriptionWhereInput[]
    | EchoOfShoutInVoidSubscriptionWhereInput
  >;
  OR?: Maybe<
    | EchoOfShoutInVoidSubscriptionWhereInput[]
    | EchoOfShoutInVoidSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | EchoOfShoutInVoidSubscriptionWhereInput[]
    | EchoOfShoutInVoidSubscriptionWhereInput
  >;
}

export interface VoteUpdateWithoutCreatedByDataInput {
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredWithoutVotesInput>;
  isUpvote?: Maybe<Boolean>;
  uniqueHash?: Maybe<String>;
}

export interface VoteBucketUpdateManyMutationInput {
  voteCount?: Maybe<Int>;
}

export interface VoteBucketUpdateOneRequiredWithoutVotesInput {
  create?: Maybe<VoteBucketCreateWithoutVotesInput>;
  update?: Maybe<VoteBucketUpdateWithoutVotesDataInput>;
  upsert?: Maybe<VoteBucketUpsertWithoutVotesInput>;
  connect?: Maybe<VoteBucketWhereUniqueInput>;
}

export type EchoOfShoutInVoidWhereUniqueInput = AtLeastOne<{
  echoOfShoutInVoidId: Maybe<ID_Input>;
}>;

export interface VoteBucketUpdateWithoutVotesDataInput {
  voteCount?: Maybe<Int>;
}

export interface VoteUpdateInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutCreatedVotesInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredWithoutVotesInput>;
  isUpvote?: Maybe<Boolean>;
  uniqueHash?: Maybe<String>;
}

export interface VoteBucketUpsertWithoutVotesInput {
  update: VoteBucketUpdateWithoutVotesDataInput;
  create: VoteBucketCreateWithoutVotesInput;
}

export type NVoidWhereUniqueInput = AtLeastOne<{
  voidId: Maybe<ID_Input>;
  voidGeohash?: Maybe<String>;
}>;

export interface VoteUpsertWithWhereUniqueWithoutCreatedByInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutCreatedByDataInput;
  create: VoteCreateWithoutCreatedByInput;
}

export interface UserUpsertWithoutSavedVoidsInput {
  update: UserUpdateWithoutSavedVoidsDataInput;
  create: UserCreateWithoutSavedVoidsInput;
}

export interface VoteScalarWhereInput {
  voteId?: Maybe<ID_Input>;
  voteId_not?: Maybe<ID_Input>;
  voteId_in?: Maybe<ID_Input[] | ID_Input>;
  voteId_not_in?: Maybe<ID_Input[] | ID_Input>;
  voteId_lt?: Maybe<ID_Input>;
  voteId_lte?: Maybe<ID_Input>;
  voteId_gt?: Maybe<ID_Input>;
  voteId_gte?: Maybe<ID_Input>;
  voteId_contains?: Maybe<ID_Input>;
  voteId_not_contains?: Maybe<ID_Input>;
  voteId_starts_with?: Maybe<ID_Input>;
  voteId_not_starts_with?: Maybe<ID_Input>;
  voteId_ends_with?: Maybe<ID_Input>;
  voteId_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  isUpvote?: Maybe<Boolean>;
  isUpvote_not?: Maybe<Boolean>;
  uniqueHash?: Maybe<String>;
  uniqueHash_not?: Maybe<String>;
  uniqueHash_in?: Maybe<String[] | String>;
  uniqueHash_not_in?: Maybe<String[] | String>;
  uniqueHash_lt?: Maybe<String>;
  uniqueHash_lte?: Maybe<String>;
  uniqueHash_gt?: Maybe<String>;
  uniqueHash_gte?: Maybe<String>;
  uniqueHash_contains?: Maybe<String>;
  uniqueHash_not_contains?: Maybe<String>;
  uniqueHash_starts_with?: Maybe<String>;
  uniqueHash_not_starts_with?: Maybe<String>;
  uniqueHash_ends_with?: Maybe<String>;
  uniqueHash_not_ends_with?: Maybe<String>;
  AND?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  OR?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  NOT?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export type ReplyToEchoOfShoutInVoidWhereUniqueInput = AtLeastOne<{
  replyToEchoOfShoutInVoidId: Maybe<ID_Input>;
}>;

export interface VoteUpdateManyWithWhereNestedInput {
  where: VoteScalarWhereInput;
  data: VoteUpdateManyDataInput;
}

export interface UserSavedVoidUpdateInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutSavedVoidsInput>;
  originalVoidGeohash?: Maybe<String>;
}

export interface VoteUpdateManyDataInput {
  isUpvote?: Maybe<Boolean>;
  uniqueHash?: Maybe<String>;
}

export type ReplyToShoutInVoidWhereUniqueInput = AtLeastOne<{
  replyToShoutInVoidId: Maybe<ID_Input>;
}>;

export interface NVoidUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    NVoidCreateWithoutCreatedByInput[] | NVoidCreateWithoutCreatedByInput
  >;
  delete?: Maybe<NVoidWhereUniqueInput[] | NVoidWhereUniqueInput>;
  connect?: Maybe<NVoidWhereUniqueInput[] | NVoidWhereUniqueInput>;
  set?: Maybe<NVoidWhereUniqueInput[] | NVoidWhereUniqueInput>;
  disconnect?: Maybe<NVoidWhereUniqueInput[] | NVoidWhereUniqueInput>;
  update?: Maybe<
    | NVoidUpdateWithWhereUniqueWithoutCreatedByInput[]
    | NVoidUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | NVoidUpsertWithWhereUniqueWithoutCreatedByInput[]
    | NVoidUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<NVoidScalarWhereInput[] | NVoidScalarWhereInput>;
  updateMany?: Maybe<
    NVoidUpdateManyWithWhereNestedInput[] | NVoidUpdateManyWithWhereNestedInput
  >;
}

export interface UserSavedVoidCreateInput {
  userSavedVoidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutSavedVoidsInput;
  originalVoidGeohash: String;
}

export interface NVoidUpdateWithWhereUniqueWithoutCreatedByInput {
  where: NVoidWhereUniqueInput;
  data: NVoidUpdateWithoutCreatedByDataInput;
}

export type ShoutInVoidWhereUniqueInput = AtLeastOne<{
  shoutInVoidId: Maybe<ID_Input>;
  contentMessageHash?: Maybe<String>;
}>;

export interface NVoidUpdateWithoutCreatedByDataInput {
  voidGeohash?: Maybe<String>;
  shouts?: Maybe<ShoutInVoidUpdateManyWithoutNVoidInput>;
  echos?: Maybe<EchoOfShoutInVoidUpdateManyWithoutNVoidInput>;
}

export interface UserActivatedEchoOfShoutUpdateManyMutationInput {
  originalShoutVoidGeohash?: Maybe<String>;
}

export interface ShoutInVoidUpdateManyWithoutNVoidInput {
  create?: Maybe<
    ShoutInVoidCreateWithoutNVoidInput[] | ShoutInVoidCreateWithoutNVoidInput
  >;
  delete?: Maybe<ShoutInVoidWhereUniqueInput[] | ShoutInVoidWhereUniqueInput>;
  connect?: Maybe<ShoutInVoidWhereUniqueInput[] | ShoutInVoidWhereUniqueInput>;
  set?: Maybe<ShoutInVoidWhereUniqueInput[] | ShoutInVoidWhereUniqueInput>;
  disconnect?: Maybe<
    ShoutInVoidWhereUniqueInput[] | ShoutInVoidWhereUniqueInput
  >;
  update?: Maybe<
    | ShoutInVoidUpdateWithWhereUniqueWithoutNVoidInput[]
    | ShoutInVoidUpdateWithWhereUniqueWithoutNVoidInput
  >;
  upsert?: Maybe<
    | ShoutInVoidUpsertWithWhereUniqueWithoutNVoidInput[]
    | ShoutInVoidUpsertWithWhereUniqueWithoutNVoidInput
  >;
  deleteMany?: Maybe<
    ShoutInVoidScalarWhereInput[] | ShoutInVoidScalarWhereInput
  >;
  updateMany?: Maybe<
    | ShoutInVoidUpdateManyWithWhereNestedInput[]
    | ShoutInVoidUpdateManyWithWhereNestedInput
  >;
}

export type UserWhereUniqueInput = AtLeastOne<{
  userId: Maybe<ID_Input>;
  username?: Maybe<String>;
}>;

export interface ShoutInVoidUpdateWithWhereUniqueWithoutNVoidInput {
  where: ShoutInVoidWhereUniqueInput;
  data: ShoutInVoidUpdateWithoutNVoidDataInput;
}

export interface UserUpdateOneRequiredWithoutActivatedEchosOfShoutsInput {
  create?: Maybe<UserCreateWithoutActivatedEchosOfShoutsInput>;
  update?: Maybe<UserUpdateWithoutActivatedEchosOfShoutsDataInput>;
  upsert?: Maybe<UserUpsertWithoutActivatedEchosOfShoutsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ShoutInVoidUpdateWithoutNVoidDataInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutCreatedShoutsInVoidsInput>;
  content?: Maybe<ContentUpdateOneRequiredInput>;
  contentMessageHash?: Maybe<String>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
  echos?: Maybe<EchoOfShoutInVoidUpdateManyWithoutOriginalShoutInVoidInput>;
  replies?: Maybe<ReplyToShoutInVoidUpdateManyWithoutOriginalShoutInVoidInput>;
}

export interface UserCreateWithoutActivatedEchosOfShoutsInput {
  userId?: Maybe<ID_Input>;
  username: String;
  password: String;
  lastLocation?: Maybe<UserLocationCreateOneInput>;
  locationHistory?: Maybe<UserLocationCreateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteCreateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidCreateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidCreateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidCreateManyWithoutCreatedByInput>;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
}

export interface UserUpdateOneRequiredWithoutCreatedShoutsInVoidsInput {
  create?: Maybe<UserCreateWithoutCreatedShoutsInVoidsInput>;
  update?: Maybe<UserUpdateWithoutCreatedShoutsInVoidsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCreatedShoutsInVoidsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateOneWithoutActivatedEchosOfShoutsInput {
  create?: Maybe<UserCreateWithoutActivatedEchosOfShoutsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCreatedShoutsInVoidsDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  lastLocation?: Maybe<UserLocationUpdateOneInput>;
  locationHistory?: Maybe<UserLocationUpdateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteUpdateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidUpdateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidUpdateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutUpdateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserLocationUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    | UserLocationCreateWithoutCreatedByInput[]
    | UserLocationCreateWithoutCreatedByInput
  >;
  delete?: Maybe<UserLocationWhereUniqueInput[] | UserLocationWhereUniqueInput>;
  connect?: Maybe<
    UserLocationWhereUniqueInput[] | UserLocationWhereUniqueInput
  >;
  set?: Maybe<UserLocationWhereUniqueInput[] | UserLocationWhereUniqueInput>;
  disconnect?: Maybe<
    UserLocationWhereUniqueInput[] | UserLocationWhereUniqueInput
  >;
  update?: Maybe<
    | UserLocationUpdateWithWhereUniqueWithoutCreatedByInput[]
    | UserLocationUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | UserLocationUpsertWithWhereUniqueWithoutCreatedByInput[]
    | UserLocationUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<
    UserLocationScalarWhereInput[] | UserLocationScalarWhereInput
  >;
  updateMany?: Maybe<
    | UserLocationUpdateManyWithWhereNestedInput[]
    | UserLocationUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  lastLocation?: Maybe<UserLocationUpdateOneInput>;
  locationHistory?: Maybe<UserLocationUpdateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteUpdateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidUpdateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidUpdateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidUpdateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutUpdateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
}

export interface EchoOfShoutInVoidUpdateInput {
  createdBy?: Maybe<
    UserUpdateOneRequiredWithoutCreatedEchosOfShoutsInVoidInput
  >;
  originalShoutContent?: Maybe<ContentUpdateOneRequiredInput>;
  originalShoutVoidGeohash?: Maybe<String>;
  originalShoutInVoid?: Maybe<ShoutInVoidUpdateOneRequiredWithoutEchosInput>;
  originalEchoOfShoutInVoid?: Maybe<
    EchoOfShoutInVoidUpdateOneWithoutEchosOfEchosInput
  >;
  nVoid?: Maybe<NVoidUpdateOneRequiredWithoutEchosInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
  echosOfEchos?: Maybe<
    EchoOfShoutInVoidUpdateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
  replies?: Maybe<
    ReplyToEchoOfShoutInVoidUpdateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
}

export interface ShoutInVoidUpdateManyMutationInput {
  contentMessageHash?: Maybe<String>;
}

export interface UserLocationUpdateWithoutCreatedByDataInput {
  userGeohash?: Maybe<String>;
}

export interface ShoutInVoidUpdateInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutCreatedShoutsInVoidsInput>;
  content?: Maybe<ContentUpdateOneRequiredInput>;
  contentMessageHash?: Maybe<String>;
  nVoid?: Maybe<NVoidUpdateOneRequiredWithoutShoutsInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
  echos?: Maybe<EchoOfShoutInVoidUpdateManyWithoutOriginalShoutInVoidInput>;
  replies?: Maybe<ReplyToShoutInVoidUpdateManyWithoutOriginalShoutInVoidInput>;
}

export interface UserLocationUpsertWithWhereUniqueWithoutCreatedByInput {
  where: UserLocationWhereUniqueInput;
  update: UserLocationUpdateWithoutCreatedByDataInput;
  create: UserLocationCreateWithoutCreatedByInput;
}

export interface ReplyToShoutInVoidUpdateInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutRepliesToShoutsInVoidInput>;
  content?: Maybe<ContentUpdateOneRequiredInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
  originalShoutInVoid?: Maybe<ShoutInVoidUpdateOneRequiredWithoutRepliesInput>;
}

export interface UserLocationScalarWhereInput {
  userLocationId?: Maybe<ID_Input>;
  userLocationId_not?: Maybe<ID_Input>;
  userLocationId_in?: Maybe<ID_Input[] | ID_Input>;
  userLocationId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userLocationId_lt?: Maybe<ID_Input>;
  userLocationId_lte?: Maybe<ID_Input>;
  userLocationId_gt?: Maybe<ID_Input>;
  userLocationId_gte?: Maybe<ID_Input>;
  userLocationId_contains?: Maybe<ID_Input>;
  userLocationId_not_contains?: Maybe<ID_Input>;
  userLocationId_starts_with?: Maybe<ID_Input>;
  userLocationId_not_starts_with?: Maybe<ID_Input>;
  userLocationId_ends_with?: Maybe<ID_Input>;
  userLocationId_not_ends_with?: Maybe<ID_Input>;
  userGeohash?: Maybe<String>;
  userGeohash_not?: Maybe<String>;
  userGeohash_in?: Maybe<String[] | String>;
  userGeohash_not_in?: Maybe<String[] | String>;
  userGeohash_lt?: Maybe<String>;
  userGeohash_lte?: Maybe<String>;
  userGeohash_gt?: Maybe<String>;
  userGeohash_gte?: Maybe<String>;
  userGeohash_contains?: Maybe<String>;
  userGeohash_not_contains?: Maybe<String>;
  userGeohash_starts_with?: Maybe<String>;
  userGeohash_not_starts_with?: Maybe<String>;
  userGeohash_ends_with?: Maybe<String>;
  userGeohash_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserLocationScalarWhereInput[] | UserLocationScalarWhereInput>;
  OR?: Maybe<UserLocationScalarWhereInput[] | UserLocationScalarWhereInput>;
  NOT?: Maybe<UserLocationScalarWhereInput[] | UserLocationScalarWhereInput>;
}

export interface ReplyToShoutInVoidCreateInput {
  replyToShoutInVoidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutRepliesToShoutsInVoidInput;
  content: ContentCreateOneInput;
  voteBucket: VoteBucketCreateOneInput;
  originalShoutInVoid: ShoutInVoidCreateOneWithoutRepliesInput;
}

export interface UserLocationUpdateManyWithWhereNestedInput {
  where: UserLocationScalarWhereInput;
  data: UserLocationUpdateManyDataInput;
}

export interface ReplyToEchoOfShoutInVoidCreateInput {
  replyToEchoOfShoutInVoidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutRepliesToEchosOfShoutsInVoidInput;
  content: ContentCreateOneInput;
  voteBucket: VoteBucketCreateOneInput;
  originalEchoOfShoutInVoid: EchoOfShoutInVoidCreateOneWithoutRepliesInput;
}

export interface UserLocationUpdateManyDataInput {
  userGeohash?: Maybe<String>;
}

export interface NVoidUpdateManyMutationInput {
  voidGeohash?: Maybe<String>;
}

export interface UserSavedVoidUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    | UserSavedVoidCreateWithoutCreatedByInput[]
    | UserSavedVoidCreateWithoutCreatedByInput
  >;
  delete?: Maybe<
    UserSavedVoidWhereUniqueInput[] | UserSavedVoidWhereUniqueInput
  >;
  connect?: Maybe<
    UserSavedVoidWhereUniqueInput[] | UserSavedVoidWhereUniqueInput
  >;
  set?: Maybe<UserSavedVoidWhereUniqueInput[] | UserSavedVoidWhereUniqueInput>;
  disconnect?: Maybe<
    UserSavedVoidWhereUniqueInput[] | UserSavedVoidWhereUniqueInput
  >;
  update?: Maybe<
    | UserSavedVoidUpdateWithWhereUniqueWithoutCreatedByInput[]
    | UserSavedVoidUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | UserSavedVoidUpsertWithWhereUniqueWithoutCreatedByInput[]
    | UserSavedVoidUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<
    UserSavedVoidScalarWhereInput[] | UserSavedVoidScalarWhereInput
  >;
  updateMany?: Maybe<
    | UserSavedVoidUpdateManyWithWhereNestedInput[]
    | UserSavedVoidUpdateManyWithWhereNestedInput
  >;
}

export interface NVoidCreateInput {
  voidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutCreatedVoidsInput;
  voidGeohash: String;
  shouts?: Maybe<ShoutInVoidCreateManyWithoutNVoidInput>;
  echos?: Maybe<EchoOfShoutInVoidCreateManyWithoutNVoidInput>;
}

export interface UserSavedVoidUpdateWithWhereUniqueWithoutCreatedByInput {
  where: UserSavedVoidWhereUniqueInput;
  data: UserSavedVoidUpdateWithoutCreatedByDataInput;
}

export interface UserCreateOneWithoutCreatedContentInput {
  create?: Maybe<UserCreateWithoutCreatedContentInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface EchoOfShoutInVoidWhereInput {
  echoOfShoutInVoidId?: Maybe<ID_Input>;
  echoOfShoutInVoidId_not?: Maybe<ID_Input>;
  echoOfShoutInVoidId_in?: Maybe<ID_Input[] | ID_Input>;
  echoOfShoutInVoidId_not_in?: Maybe<ID_Input[] | ID_Input>;
  echoOfShoutInVoidId_lt?: Maybe<ID_Input>;
  echoOfShoutInVoidId_lte?: Maybe<ID_Input>;
  echoOfShoutInVoidId_gt?: Maybe<ID_Input>;
  echoOfShoutInVoidId_gte?: Maybe<ID_Input>;
  echoOfShoutInVoidId_contains?: Maybe<ID_Input>;
  echoOfShoutInVoidId_not_contains?: Maybe<ID_Input>;
  echoOfShoutInVoidId_starts_with?: Maybe<ID_Input>;
  echoOfShoutInVoidId_not_starts_with?: Maybe<ID_Input>;
  echoOfShoutInVoidId_ends_with?: Maybe<ID_Input>;
  echoOfShoutInVoidId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<UserWhereInput>;
  originalShoutContent?: Maybe<ContentWhereInput>;
  originalShoutVoidGeohash?: Maybe<String>;
  originalShoutVoidGeohash_not?: Maybe<String>;
  originalShoutVoidGeohash_in?: Maybe<String[] | String>;
  originalShoutVoidGeohash_not_in?: Maybe<String[] | String>;
  originalShoutVoidGeohash_lt?: Maybe<String>;
  originalShoutVoidGeohash_lte?: Maybe<String>;
  originalShoutVoidGeohash_gt?: Maybe<String>;
  originalShoutVoidGeohash_gte?: Maybe<String>;
  originalShoutVoidGeohash_contains?: Maybe<String>;
  originalShoutVoidGeohash_not_contains?: Maybe<String>;
  originalShoutVoidGeohash_starts_with?: Maybe<String>;
  originalShoutVoidGeohash_not_starts_with?: Maybe<String>;
  originalShoutVoidGeohash_ends_with?: Maybe<String>;
  originalShoutVoidGeohash_not_ends_with?: Maybe<String>;
  originalShoutInVoid?: Maybe<ShoutInVoidWhereInput>;
  originalEchoOfShoutInVoid?: Maybe<EchoOfShoutInVoidWhereInput>;
  nVoid?: Maybe<NVoidWhereInput>;
  voteBucket?: Maybe<VoteBucketWhereInput>;
  echosOfEchos_every?: Maybe<EchoOfShoutInVoidWhereInput>;
  echosOfEchos_some?: Maybe<EchoOfShoutInVoidWhereInput>;
  echosOfEchos_none?: Maybe<EchoOfShoutInVoidWhereInput>;
  replies_every?: Maybe<ReplyToEchoOfShoutInVoidWhereInput>;
  replies_some?: Maybe<ReplyToEchoOfShoutInVoidWhereInput>;
  replies_none?: Maybe<ReplyToEchoOfShoutInVoidWhereInput>;
  AND?: Maybe<EchoOfShoutInVoidWhereInput[] | EchoOfShoutInVoidWhereInput>;
  OR?: Maybe<EchoOfShoutInVoidWhereInput[] | EchoOfShoutInVoidWhereInput>;
  NOT?: Maybe<EchoOfShoutInVoidWhereInput[] | EchoOfShoutInVoidWhereInput>;
}

export interface UserLocationCreateOneInput {
  create?: Maybe<UserLocationCreateInput>;
  connect?: Maybe<UserLocationWhereUniqueInput>;
}

export interface ReplyToShoutInVoidWhereInput {
  replyToShoutInVoidId?: Maybe<ID_Input>;
  replyToShoutInVoidId_not?: Maybe<ID_Input>;
  replyToShoutInVoidId_in?: Maybe<ID_Input[] | ID_Input>;
  replyToShoutInVoidId_not_in?: Maybe<ID_Input[] | ID_Input>;
  replyToShoutInVoidId_lt?: Maybe<ID_Input>;
  replyToShoutInVoidId_lte?: Maybe<ID_Input>;
  replyToShoutInVoidId_gt?: Maybe<ID_Input>;
  replyToShoutInVoidId_gte?: Maybe<ID_Input>;
  replyToShoutInVoidId_contains?: Maybe<ID_Input>;
  replyToShoutInVoidId_not_contains?: Maybe<ID_Input>;
  replyToShoutInVoidId_starts_with?: Maybe<ID_Input>;
  replyToShoutInVoidId_not_starts_with?: Maybe<ID_Input>;
  replyToShoutInVoidId_ends_with?: Maybe<ID_Input>;
  replyToShoutInVoidId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<UserWhereInput>;
  content?: Maybe<ContentWhereInput>;
  voteBucket?: Maybe<VoteBucketWhereInput>;
  originalShoutInVoid?: Maybe<ShoutInVoidWhereInput>;
  AND?: Maybe<ReplyToShoutInVoidWhereInput[] | ReplyToShoutInVoidWhereInput>;
  OR?: Maybe<ReplyToShoutInVoidWhereInput[] | ReplyToShoutInVoidWhereInput>;
  NOT?: Maybe<ReplyToShoutInVoidWhereInput[] | ReplyToShoutInVoidWhereInput>;
}

export interface UserCreateOneWithoutLocationHistoryInput {
  create?: Maybe<UserCreateWithoutLocationHistoryInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserActivatedEchoOfShoutWhereInput {
  userActivatedEchoOfShoutId?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_not?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_in?: Maybe<ID_Input[] | ID_Input>;
  userActivatedEchoOfShoutId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userActivatedEchoOfShoutId_lt?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_lte?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_gt?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_gte?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_contains?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_not_contains?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_starts_with?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_not_starts_with?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_ends_with?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<UserWhereInput>;
  originalShoutContent?: Maybe<ContentWhereInput>;
  originalShoutVoidGeohash?: Maybe<String>;
  originalShoutVoidGeohash_not?: Maybe<String>;
  originalShoutVoidGeohash_in?: Maybe<String[] | String>;
  originalShoutVoidGeohash_not_in?: Maybe<String[] | String>;
  originalShoutVoidGeohash_lt?: Maybe<String>;
  originalShoutVoidGeohash_lte?: Maybe<String>;
  originalShoutVoidGeohash_gt?: Maybe<String>;
  originalShoutVoidGeohash_gte?: Maybe<String>;
  originalShoutVoidGeohash_contains?: Maybe<String>;
  originalShoutVoidGeohash_not_contains?: Maybe<String>;
  originalShoutVoidGeohash_starts_with?: Maybe<String>;
  originalShoutVoidGeohash_not_starts_with?: Maybe<String>;
  originalShoutVoidGeohash_ends_with?: Maybe<String>;
  originalShoutVoidGeohash_not_ends_with?: Maybe<String>;
  originalEchoOfShoutInVoid?: Maybe<EchoOfShoutInVoidWhereInput>;
  AND?: Maybe<
    UserActivatedEchoOfShoutWhereInput[] | UserActivatedEchoOfShoutWhereInput
  >;
  OR?: Maybe<
    UserActivatedEchoOfShoutWhereInput[] | UserActivatedEchoOfShoutWhereInput
  >;
  NOT?: Maybe<
    UserActivatedEchoOfShoutWhereInput[] | UserActivatedEchoOfShoutWhereInput
  >;
}

export interface ContentCreateManyWithoutCreatedByInput {
  create?: Maybe<
    ContentCreateWithoutCreatedByInput[] | ContentCreateWithoutCreatedByInput
  >;
  connect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
}

export interface ContentUpdateManyMutationInput {
  message?: Maybe<String>;
}

export interface VoteCreateManyWithoutCreatedByInput {
  create?: Maybe<
    VoteCreateWithoutCreatedByInput[] | VoteCreateWithoutCreatedByInput
  >;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface UserUpsertWithoutCreatedContentInput {
  update: UserUpdateWithoutCreatedContentDataInput;
  create: UserCreateWithoutCreatedContentInput;
}

export interface VoteBucketCreateOneWithoutVotesInput {
  create?: Maybe<VoteBucketCreateWithoutVotesInput>;
  connect?: Maybe<VoteBucketWhereUniqueInput>;
}

export interface UserActivatedEchoOfShoutUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    | UserActivatedEchoOfShoutCreateWithoutCreatedByInput[]
    | UserActivatedEchoOfShoutCreateWithoutCreatedByInput
  >;
  delete?: Maybe<
    | UserActivatedEchoOfShoutWhereUniqueInput[]
    | UserActivatedEchoOfShoutWhereUniqueInput
  >;
  connect?: Maybe<
    | UserActivatedEchoOfShoutWhereUniqueInput[]
    | UserActivatedEchoOfShoutWhereUniqueInput
  >;
  set?: Maybe<
    | UserActivatedEchoOfShoutWhereUniqueInput[]
    | UserActivatedEchoOfShoutWhereUniqueInput
  >;
  disconnect?: Maybe<
    | UserActivatedEchoOfShoutWhereUniqueInput[]
    | UserActivatedEchoOfShoutWhereUniqueInput
  >;
  update?: Maybe<
    | UserActivatedEchoOfShoutUpdateWithWhereUniqueWithoutCreatedByInput[]
    | UserActivatedEchoOfShoutUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | UserActivatedEchoOfShoutUpsertWithWhereUniqueWithoutCreatedByInput[]
    | UserActivatedEchoOfShoutUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<
    | UserActivatedEchoOfShoutScalarWhereInput[]
    | UserActivatedEchoOfShoutScalarWhereInput
  >;
  updateMany?: Maybe<
    | UserActivatedEchoOfShoutUpdateManyWithWhereNestedInput[]
    | UserActivatedEchoOfShoutUpdateManyWithWhereNestedInput
  >;
}

export interface NVoidCreateManyWithoutCreatedByInput {
  create?: Maybe<
    NVoidCreateWithoutCreatedByInput[] | NVoidCreateWithoutCreatedByInput
  >;
  connect?: Maybe<NVoidWhereUniqueInput[] | NVoidWhereUniqueInput>;
}

export interface UserActivatedEchoOfShoutUpdateWithWhereUniqueWithoutCreatedByInput {
  where: UserActivatedEchoOfShoutWhereUniqueInput;
  data: UserActivatedEchoOfShoutUpdateWithoutCreatedByDataInput;
}

export interface ShoutInVoidCreateManyWithoutNVoidInput {
  create?: Maybe<
    ShoutInVoidCreateWithoutNVoidInput[] | ShoutInVoidCreateWithoutNVoidInput
  >;
  connect?: Maybe<ShoutInVoidWhereUniqueInput[] | ShoutInVoidWhereUniqueInput>;
}

export interface UserActivatedEchoOfShoutUpdateWithoutCreatedByDataInput {
  originalShoutContent?: Maybe<ContentUpdateOneRequiredInput>;
  originalShoutVoidGeohash?: Maybe<String>;
  originalEchoOfShoutInVoid?: Maybe<EchoOfShoutInVoidUpdateOneInput>;
}

export interface UserCreateOneWithoutCreatedShoutsInVoidsInput {
  create?: Maybe<UserCreateWithoutCreatedShoutsInVoidsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ContentUpdateOneRequiredInput {
  create?: Maybe<ContentCreateInput>;
  update?: Maybe<ContentUpdateDataInput>;
  upsert?: Maybe<ContentUpsertNestedInput>;
  connect?: Maybe<ContentWhereUniqueInput>;
}

export interface UserLocationCreateManyWithoutCreatedByInput {
  create?: Maybe<
    | UserLocationCreateWithoutCreatedByInput[]
    | UserLocationCreateWithoutCreatedByInput
  >;
  connect?: Maybe<
    UserLocationWhereUniqueInput[] | UserLocationWhereUniqueInput
  >;
}

export interface ContentUpdateDataInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutCreatedContentInput>;
  message?: Maybe<String>;
}

export interface UserSavedVoidCreateManyWithoutCreatedByInput {
  create?: Maybe<
    | UserSavedVoidCreateWithoutCreatedByInput[]
    | UserSavedVoidCreateWithoutCreatedByInput
  >;
  connect?: Maybe<
    UserSavedVoidWhereUniqueInput[] | UserSavedVoidWhereUniqueInput
  >;
}

export interface ContentUpsertNestedInput {
  update: ContentUpdateDataInput;
  create: ContentCreateInput;
}

export interface UserActivatedEchoOfShoutCreateManyWithoutCreatedByInput {
  create?: Maybe<
    | UserActivatedEchoOfShoutCreateWithoutCreatedByInput[]
    | UserActivatedEchoOfShoutCreateWithoutCreatedByInput
  >;
  connect?: Maybe<
    | UserActivatedEchoOfShoutWhereUniqueInput[]
    | UserActivatedEchoOfShoutWhereUniqueInput
  >;
}

export interface EchoOfShoutInVoidUpdateOneInput {
  create?: Maybe<EchoOfShoutInVoidCreateInput>;
  update?: Maybe<EchoOfShoutInVoidUpdateDataInput>;
  upsert?: Maybe<EchoOfShoutInVoidUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<EchoOfShoutInVoidWhereUniqueInput>;
}

export interface ContentCreateOneInput {
  create?: Maybe<ContentCreateInput>;
  connect?: Maybe<ContentWhereUniqueInput>;
}

export interface EchoOfShoutInVoidUpdateDataInput {
  createdBy?: Maybe<
    UserUpdateOneRequiredWithoutCreatedEchosOfShoutsInVoidInput
  >;
  originalShoutContent?: Maybe<ContentUpdateOneRequiredInput>;
  originalShoutVoidGeohash?: Maybe<String>;
  originalShoutInVoid?: Maybe<ShoutInVoidUpdateOneRequiredWithoutEchosInput>;
  originalEchoOfShoutInVoid?: Maybe<
    EchoOfShoutInVoidUpdateOneWithoutEchosOfEchosInput
  >;
  nVoid?: Maybe<NVoidUpdateOneRequiredWithoutEchosInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
  echosOfEchos?: Maybe<
    EchoOfShoutInVoidUpdateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
  replies?: Maybe<
    ReplyToEchoOfShoutInVoidUpdateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
}

export interface EchoOfShoutInVoidCreateInput {
  echoOfShoutInVoidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutCreatedEchosOfShoutsInVoidInput;
  originalShoutContent: ContentCreateOneInput;
  originalShoutVoidGeohash: String;
  originalShoutInVoid: ShoutInVoidCreateOneWithoutEchosInput;
  originalEchoOfShoutInVoid?: Maybe<
    EchoOfShoutInVoidCreateOneWithoutEchosOfEchosInput
  >;
  nVoid: NVoidCreateOneWithoutEchosInput;
  voteBucket: VoteBucketCreateOneInput;
  echosOfEchos?: Maybe<
    EchoOfShoutInVoidCreateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
  replies?: Maybe<
    ReplyToEchoOfShoutInVoidCreateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
}

export interface UserUpdateOneRequiredWithoutCreatedEchosOfShoutsInVoidInput {
  create?: Maybe<UserCreateWithoutCreatedEchosOfShoutsInVoidInput>;
  update?: Maybe<UserUpdateWithoutCreatedEchosOfShoutsInVoidDataInput>;
  upsert?: Maybe<UserUpsertWithoutCreatedEchosOfShoutsInVoidInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCreatedEchosOfShoutsInVoidInput {
  userId?: Maybe<ID_Input>;
  username: String;
  password: String;
  lastLocation?: Maybe<UserLocationCreateOneInput>;
  locationHistory?: Maybe<UserLocationCreateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteCreateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidCreateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidCreateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidCreateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutCreateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
}

export interface UserUpdateWithoutCreatedEchosOfShoutsInVoidDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  lastLocation?: Maybe<UserLocationUpdateOneInput>;
  locationHistory?: Maybe<UserLocationUpdateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteUpdateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidUpdateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidUpdateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidUpdateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutUpdateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
}

export interface ShoutInVoidCreateWithoutCreatedByInput {
  shoutInVoidId?: Maybe<ID_Input>;
  content: ContentCreateOneInput;
  contentMessageHash?: Maybe<String>;
  nVoid: NVoidCreateOneWithoutShoutsInput;
  voteBucket: VoteBucketCreateOneInput;
  echos?: Maybe<EchoOfShoutInVoidCreateManyWithoutOriginalShoutInVoidInput>;
  replies?: Maybe<ReplyToShoutInVoidCreateManyWithoutOriginalShoutInVoidInput>;
}

export interface ShoutInVoidUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    | ShoutInVoidCreateWithoutCreatedByInput[]
    | ShoutInVoidCreateWithoutCreatedByInput
  >;
  delete?: Maybe<ShoutInVoidWhereUniqueInput[] | ShoutInVoidWhereUniqueInput>;
  connect?: Maybe<ShoutInVoidWhereUniqueInput[] | ShoutInVoidWhereUniqueInput>;
  set?: Maybe<ShoutInVoidWhereUniqueInput[] | ShoutInVoidWhereUniqueInput>;
  disconnect?: Maybe<
    ShoutInVoidWhereUniqueInput[] | ShoutInVoidWhereUniqueInput
  >;
  update?: Maybe<
    | ShoutInVoidUpdateWithWhereUniqueWithoutCreatedByInput[]
    | ShoutInVoidUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | ShoutInVoidUpsertWithWhereUniqueWithoutCreatedByInput[]
    | ShoutInVoidUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<
    ShoutInVoidScalarWhereInput[] | ShoutInVoidScalarWhereInput
  >;
  updateMany?: Maybe<
    | ShoutInVoidUpdateManyWithWhereNestedInput[]
    | ShoutInVoidUpdateManyWithWhereNestedInput
  >;
}

export interface NVoidCreateWithoutShoutsInput {
  voidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutCreatedVoidsInput;
  voidGeohash: String;
  echos?: Maybe<EchoOfShoutInVoidCreateManyWithoutNVoidInput>;
}

export interface ShoutInVoidUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ShoutInVoidWhereUniqueInput;
  data: ShoutInVoidUpdateWithoutCreatedByDataInput;
}

export interface UserCreateWithoutCreatedVoidsInput {
  userId?: Maybe<ID_Input>;
  username: String;
  password: String;
  lastLocation?: Maybe<UserLocationCreateOneInput>;
  locationHistory?: Maybe<UserLocationCreateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteCreateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidCreateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidCreateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutCreateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
}

export interface ShoutInVoidUpdateWithoutCreatedByDataInput {
  content?: Maybe<ContentUpdateOneRequiredInput>;
  contentMessageHash?: Maybe<String>;
  nVoid?: Maybe<NVoidUpdateOneRequiredWithoutShoutsInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
  echos?: Maybe<EchoOfShoutInVoidUpdateManyWithoutOriginalShoutInVoidInput>;
  replies?: Maybe<ReplyToShoutInVoidUpdateManyWithoutOriginalShoutInVoidInput>;
}

export interface EchoOfShoutInVoidCreateWithoutCreatedByInput {
  echoOfShoutInVoidId?: Maybe<ID_Input>;
  originalShoutContent: ContentCreateOneInput;
  originalShoutVoidGeohash: String;
  originalShoutInVoid: ShoutInVoidCreateOneWithoutEchosInput;
  originalEchoOfShoutInVoid?: Maybe<
    EchoOfShoutInVoidCreateOneWithoutEchosOfEchosInput
  >;
  nVoid: NVoidCreateOneWithoutEchosInput;
  voteBucket: VoteBucketCreateOneInput;
  echosOfEchos?: Maybe<
    EchoOfShoutInVoidCreateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
  replies?: Maybe<
    ReplyToEchoOfShoutInVoidCreateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
}

export interface NVoidUpdateOneRequiredWithoutShoutsInput {
  create?: Maybe<NVoidCreateWithoutShoutsInput>;
  update?: Maybe<NVoidUpdateWithoutShoutsDataInput>;
  upsert?: Maybe<NVoidUpsertWithoutShoutsInput>;
  connect?: Maybe<NVoidWhereUniqueInput>;
}

export interface ShoutInVoidCreateWithoutEchosInput {
  shoutInVoidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutCreatedShoutsInVoidsInput;
  content: ContentCreateOneInput;
  contentMessageHash?: Maybe<String>;
  nVoid: NVoidCreateOneWithoutShoutsInput;
  voteBucket: VoteBucketCreateOneInput;
  replies?: Maybe<ReplyToShoutInVoidCreateManyWithoutOriginalShoutInVoidInput>;
}

export interface NVoidUpdateWithoutShoutsDataInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutCreatedVoidsInput>;
  voidGeohash?: Maybe<String>;
  echos?: Maybe<EchoOfShoutInVoidUpdateManyWithoutNVoidInput>;
}

export interface VoteBucketCreateInput {
  voteBucketId?: Maybe<ID_Input>;
  voteCount: Int;
  votes?: Maybe<VoteCreateManyWithoutVoteBucketInput>;
}

export interface UserUpdateOneRequiredWithoutCreatedVoidsInput {
  create?: Maybe<UserCreateWithoutCreatedVoidsInput>;
  update?: Maybe<UserUpdateWithoutCreatedVoidsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCreatedVoidsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface VoteCreateWithoutVoteBucketInput {
  voteId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutCreatedVotesInput;
  isUpvote: Boolean;
  uniqueHash: String;
}

export interface UserUpdateWithoutCreatedVoidsDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  lastLocation?: Maybe<UserLocationUpdateOneInput>;
  locationHistory?: Maybe<UserLocationUpdateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteUpdateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidUpdateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidUpdateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutUpdateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
}

export interface UserCreateWithoutCreatedVotesInput {
  userId?: Maybe<ID_Input>;
  username: String;
  password: String;
  lastLocation?: Maybe<UserLocationCreateOneInput>;
  locationHistory?: Maybe<UserLocationCreateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidCreateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidCreateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidCreateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutCreateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
}

export interface EchoOfShoutInVoidUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    | EchoOfShoutInVoidCreateWithoutCreatedByInput[]
    | EchoOfShoutInVoidCreateWithoutCreatedByInput
  >;
  delete?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
  connect?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
  set?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
  disconnect?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
  update?: Maybe<
    | EchoOfShoutInVoidUpdateWithWhereUniqueWithoutCreatedByInput[]
    | EchoOfShoutInVoidUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | EchoOfShoutInVoidUpsertWithWhereUniqueWithoutCreatedByInput[]
    | EchoOfShoutInVoidUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<
    EchoOfShoutInVoidScalarWhereInput[] | EchoOfShoutInVoidScalarWhereInput
  >;
  updateMany?: Maybe<
    | EchoOfShoutInVoidUpdateManyWithWhereNestedInput[]
    | EchoOfShoutInVoidUpdateManyWithWhereNestedInput
  >;
}

export interface ReplyToShoutInVoidCreateWithoutCreatedByInput {
  replyToShoutInVoidId?: Maybe<ID_Input>;
  content: ContentCreateOneInput;
  voteBucket: VoteBucketCreateOneInput;
  originalShoutInVoid: ShoutInVoidCreateOneWithoutRepliesInput;
}

export interface EchoOfShoutInVoidUpdateWithWhereUniqueWithoutCreatedByInput {
  where: EchoOfShoutInVoidWhereUniqueInput;
  data: EchoOfShoutInVoidUpdateWithoutCreatedByDataInput;
}

export interface ShoutInVoidCreateWithoutRepliesInput {
  shoutInVoidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutCreatedShoutsInVoidsInput;
  content: ContentCreateOneInput;
  contentMessageHash?: Maybe<String>;
  nVoid: NVoidCreateOneWithoutShoutsInput;
  voteBucket: VoteBucketCreateOneInput;
  echos?: Maybe<EchoOfShoutInVoidCreateManyWithoutOriginalShoutInVoidInput>;
}

export interface EchoOfShoutInVoidUpdateWithoutCreatedByDataInput {
  originalShoutContent?: Maybe<ContentUpdateOneRequiredInput>;
  originalShoutVoidGeohash?: Maybe<String>;
  originalShoutInVoid?: Maybe<ShoutInVoidUpdateOneRequiredWithoutEchosInput>;
  originalEchoOfShoutInVoid?: Maybe<
    EchoOfShoutInVoidUpdateOneWithoutEchosOfEchosInput
  >;
  nVoid?: Maybe<NVoidUpdateOneRequiredWithoutEchosInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
  echosOfEchos?: Maybe<
    EchoOfShoutInVoidUpdateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
  replies?: Maybe<
    ReplyToEchoOfShoutInVoidUpdateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
}

export interface EchoOfShoutInVoidCreateWithoutOriginalShoutInVoidInput {
  echoOfShoutInVoidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutCreatedEchosOfShoutsInVoidInput;
  originalShoutContent: ContentCreateOneInput;
  originalShoutVoidGeohash: String;
  originalEchoOfShoutInVoid?: Maybe<
    EchoOfShoutInVoidCreateOneWithoutEchosOfEchosInput
  >;
  nVoid: NVoidCreateOneWithoutEchosInput;
  voteBucket: VoteBucketCreateOneInput;
  echosOfEchos?: Maybe<
    EchoOfShoutInVoidCreateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
  replies?: Maybe<
    ReplyToEchoOfShoutInVoidCreateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
}

export interface ShoutInVoidUpdateOneRequiredWithoutEchosInput {
  create?: Maybe<ShoutInVoidCreateWithoutEchosInput>;
  update?: Maybe<ShoutInVoidUpdateWithoutEchosDataInput>;
  upsert?: Maybe<ShoutInVoidUpsertWithoutEchosInput>;
  connect?: Maybe<ShoutInVoidWhereUniqueInput>;
}

export interface EchoOfShoutInVoidCreateWithoutEchosOfEchosInput {
  echoOfShoutInVoidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutCreatedEchosOfShoutsInVoidInput;
  originalShoutContent: ContentCreateOneInput;
  originalShoutVoidGeohash: String;
  originalShoutInVoid: ShoutInVoidCreateOneWithoutEchosInput;
  originalEchoOfShoutInVoid?: Maybe<
    EchoOfShoutInVoidCreateOneWithoutEchosOfEchosInput
  >;
  nVoid: NVoidCreateOneWithoutEchosInput;
  voteBucket: VoteBucketCreateOneInput;
  replies?: Maybe<
    ReplyToEchoOfShoutInVoidCreateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
}

export interface ShoutInVoidUpdateWithoutEchosDataInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutCreatedShoutsInVoidsInput>;
  content?: Maybe<ContentUpdateOneRequiredInput>;
  contentMessageHash?: Maybe<String>;
  nVoid?: Maybe<NVoidUpdateOneRequiredWithoutShoutsInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
  replies?: Maybe<ReplyToShoutInVoidUpdateManyWithoutOriginalShoutInVoidInput>;
}

export interface NVoidCreateWithoutEchosInput {
  voidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutCreatedVoidsInput;
  voidGeohash: String;
  shouts?: Maybe<ShoutInVoidCreateManyWithoutNVoidInput>;
}

export interface VoteBucketUpdateOneRequiredInput {
  create?: Maybe<VoteBucketCreateInput>;
  update?: Maybe<VoteBucketUpdateDataInput>;
  upsert?: Maybe<VoteBucketUpsertNestedInput>;
  connect?: Maybe<VoteBucketWhereUniqueInput>;
}

export interface ReplyToEchoOfShoutInVoidCreateWithoutOriginalEchoOfShoutInVoidInput {
  replyToEchoOfShoutInVoidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutRepliesToEchosOfShoutsInVoidInput;
  content: ContentCreateOneInput;
  voteBucket: VoteBucketCreateOneInput;
}

export interface VoteBucketUpdateDataInput {
  voteCount?: Maybe<Int>;
  votes?: Maybe<VoteUpdateManyWithoutVoteBucketInput>;
}

export interface UserCreateWithoutRepliesToEchosOfShoutsInVoidInput {
  userId?: Maybe<ID_Input>;
  username: String;
  password: String;
  lastLocation?: Maybe<UserLocationCreateOneInput>;
  locationHistory?: Maybe<UserLocationCreateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteCreateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidCreateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidCreateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidCreateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutCreateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidCreateManyWithoutCreatedByInput
  >;
}

export interface VoteUpdateManyWithoutVoteBucketInput {
  create?: Maybe<
    VoteCreateWithoutVoteBucketInput[] | VoteCreateWithoutVoteBucketInput
  >;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutVoteBucketInput[]
    | VoteUpdateWithWhereUniqueWithoutVoteBucketInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutVoteBucketInput[]
    | VoteUpsertWithWhereUniqueWithoutVoteBucketInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  updateMany?: Maybe<
    VoteUpdateManyWithWhereNestedInput[] | VoteUpdateManyWithWhereNestedInput
  >;
}

export interface EchoOfShoutInVoidCreateWithoutOriginalEchoOfShoutInVoidInput {
  echoOfShoutInVoidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutCreatedEchosOfShoutsInVoidInput;
  originalShoutContent: ContentCreateOneInput;
  originalShoutVoidGeohash: String;
  originalShoutInVoid: ShoutInVoidCreateOneWithoutEchosInput;
  nVoid: NVoidCreateOneWithoutEchosInput;
  voteBucket: VoteBucketCreateOneInput;
  echosOfEchos?: Maybe<
    EchoOfShoutInVoidCreateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
  replies?: Maybe<
    ReplyToEchoOfShoutInVoidCreateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
}

export interface VoteUpdateWithWhereUniqueWithoutVoteBucketInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutVoteBucketDataInput;
}

export interface ReplyToEchoOfShoutInVoidCreateWithoutCreatedByInput {
  replyToEchoOfShoutInVoidId?: Maybe<ID_Input>;
  content: ContentCreateOneInput;
  voteBucket: VoteBucketCreateOneInput;
  originalEchoOfShoutInVoid: EchoOfShoutInVoidCreateOneWithoutRepliesInput;
}

export interface VoteUpdateWithoutVoteBucketDataInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutCreatedVotesInput>;
  isUpvote?: Maybe<Boolean>;
  uniqueHash?: Maybe<String>;
}

export interface EchoOfShoutInVoidCreateWithoutRepliesInput {
  echoOfShoutInVoidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutCreatedEchosOfShoutsInVoidInput;
  originalShoutContent: ContentCreateOneInput;
  originalShoutVoidGeohash: String;
  originalShoutInVoid: ShoutInVoidCreateOneWithoutEchosInput;
  originalEchoOfShoutInVoid?: Maybe<
    EchoOfShoutInVoidCreateOneWithoutEchosOfEchosInput
  >;
  nVoid: NVoidCreateOneWithoutEchosInput;
  voteBucket: VoteBucketCreateOneInput;
  echosOfEchos?: Maybe<
    EchoOfShoutInVoidCreateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
}

export interface UserUpdateOneRequiredWithoutCreatedVotesInput {
  create?: Maybe<UserCreateWithoutCreatedVotesInput>;
  update?: Maybe<UserUpdateWithoutCreatedVotesDataInput>;
  upsert?: Maybe<UserUpsertWithoutCreatedVotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ReplyToShoutInVoidCreateWithoutOriginalShoutInVoidInput {
  replyToShoutInVoidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutRepliesToShoutsInVoidInput;
  content: ContentCreateOneInput;
  voteBucket: VoteBucketCreateOneInput;
}

export interface UserUpdateWithoutCreatedVotesDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  lastLocation?: Maybe<UserLocationUpdateOneInput>;
  locationHistory?: Maybe<UserLocationUpdateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidUpdateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidUpdateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidUpdateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutUpdateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
}

export interface UserCreateWithoutRepliesToShoutsInVoidInput {
  userId?: Maybe<ID_Input>;
  username: String;
  password: String;
  lastLocation?: Maybe<UserLocationCreateOneInput>;
  locationHistory?: Maybe<UserLocationCreateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteCreateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidCreateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidCreateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidCreateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutCreateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
}

export interface ReplyToShoutInVoidUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    | ReplyToShoutInVoidCreateWithoutCreatedByInput[]
    | ReplyToShoutInVoidCreateWithoutCreatedByInput
  >;
  delete?: Maybe<
    ReplyToShoutInVoidWhereUniqueInput[] | ReplyToShoutInVoidWhereUniqueInput
  >;
  connect?: Maybe<
    ReplyToShoutInVoidWhereUniqueInput[] | ReplyToShoutInVoidWhereUniqueInput
  >;
  set?: Maybe<
    ReplyToShoutInVoidWhereUniqueInput[] | ReplyToShoutInVoidWhereUniqueInput
  >;
  disconnect?: Maybe<
    ReplyToShoutInVoidWhereUniqueInput[] | ReplyToShoutInVoidWhereUniqueInput
  >;
  update?: Maybe<
    | ReplyToShoutInVoidUpdateWithWhereUniqueWithoutCreatedByInput[]
    | ReplyToShoutInVoidUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | ReplyToShoutInVoidUpsertWithWhereUniqueWithoutCreatedByInput[]
    | ReplyToShoutInVoidUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<
    ReplyToShoutInVoidScalarWhereInput[] | ReplyToShoutInVoidScalarWhereInput
  >;
}

export interface EchoOfShoutInVoidCreateWithoutNVoidInput {
  echoOfShoutInVoidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutCreatedEchosOfShoutsInVoidInput;
  originalShoutContent: ContentCreateOneInput;
  originalShoutVoidGeohash: String;
  originalShoutInVoid: ShoutInVoidCreateOneWithoutEchosInput;
  originalEchoOfShoutInVoid?: Maybe<
    EchoOfShoutInVoidCreateOneWithoutEchosOfEchosInput
  >;
  voteBucket: VoteBucketCreateOneInput;
  echosOfEchos?: Maybe<
    EchoOfShoutInVoidCreateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
  replies?: Maybe<
    ReplyToEchoOfShoutInVoidCreateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
}

export interface ReplyToShoutInVoidUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ReplyToShoutInVoidWhereUniqueInput;
  data: ReplyToShoutInVoidUpdateWithoutCreatedByDataInput;
}

export interface UserUpdateOneRequiredWithoutCreatedContentInput {
  create?: Maybe<UserCreateWithoutCreatedContentInput>;
  update?: Maybe<UserUpdateWithoutCreatedContentDataInput>;
  upsert?: Maybe<UserUpsertWithoutCreatedContentInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ReplyToShoutInVoidUpdateWithoutCreatedByDataInput {
  content?: Maybe<ContentUpdateOneRequiredInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
  originalShoutInVoid?: Maybe<ShoutInVoidUpdateOneRequiredWithoutRepliesInput>;
}

export interface UserLocationUpdateOneInput {
  create?: Maybe<UserLocationCreateInput>;
  update?: Maybe<UserLocationUpdateDataInput>;
  upsert?: Maybe<UserLocationUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserLocationWhereUniqueInput>;
}

export interface ShoutInVoidUpdateOneRequiredWithoutRepliesInput {
  create?: Maybe<ShoutInVoidCreateWithoutRepliesInput>;
  update?: Maybe<ShoutInVoidUpdateWithoutRepliesDataInput>;
  upsert?: Maybe<ShoutInVoidUpsertWithoutRepliesInput>;
  connect?: Maybe<ShoutInVoidWhereUniqueInput>;
}

export interface UserUpdateOneRequiredWithoutLocationHistoryInput {
  create?: Maybe<UserCreateWithoutLocationHistoryInput>;
  update?: Maybe<UserUpdateWithoutLocationHistoryDataInput>;
  upsert?: Maybe<UserUpsertWithoutLocationHistoryInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ShoutInVoidUpdateWithoutRepliesDataInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutCreatedShoutsInVoidsInput>;
  content?: Maybe<ContentUpdateOneRequiredInput>;
  contentMessageHash?: Maybe<String>;
  nVoid?: Maybe<NVoidUpdateOneRequiredWithoutShoutsInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
  echos?: Maybe<EchoOfShoutInVoidUpdateManyWithoutOriginalShoutInVoidInput>;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VoteWhereInput>;
  AND?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  OR?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  NOT?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
}

export interface EchoOfShoutInVoidUpdateManyWithoutOriginalShoutInVoidInput {
  create?: Maybe<
    | EchoOfShoutInVoidCreateWithoutOriginalShoutInVoidInput[]
    | EchoOfShoutInVoidCreateWithoutOriginalShoutInVoidInput
  >;
  delete?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
  connect?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
  set?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
  disconnect?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
  update?: Maybe<
    | EchoOfShoutInVoidUpdateWithWhereUniqueWithoutOriginalShoutInVoidInput[]
    | EchoOfShoutInVoidUpdateWithWhereUniqueWithoutOriginalShoutInVoidInput
  >;
  upsert?: Maybe<
    | EchoOfShoutInVoidUpsertWithWhereUniqueWithoutOriginalShoutInVoidInput[]
    | EchoOfShoutInVoidUpsertWithWhereUniqueWithoutOriginalShoutInVoidInput
  >;
  deleteMany?: Maybe<
    EchoOfShoutInVoidScalarWhereInput[] | EchoOfShoutInVoidScalarWhereInput
  >;
  updateMany?: Maybe<
    | EchoOfShoutInVoidUpdateManyWithWhereNestedInput[]
    | EchoOfShoutInVoidUpdateManyWithWhereNestedInput
  >;
}

export interface UserLocationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserLocationWhereInput>;
  AND?: Maybe<
    UserLocationSubscriptionWhereInput[] | UserLocationSubscriptionWhereInput
  >;
  OR?: Maybe<
    UserLocationSubscriptionWhereInput[] | UserLocationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UserLocationSubscriptionWhereInput[] | UserLocationSubscriptionWhereInput
  >;
}

export interface EchoOfShoutInVoidUpdateWithWhereUniqueWithoutOriginalShoutInVoidInput {
  where: EchoOfShoutInVoidWhereUniqueInput;
  data: EchoOfShoutInVoidUpdateWithoutOriginalShoutInVoidDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface EchoOfShoutInVoidUpdateWithoutOriginalShoutInVoidDataInput {
  createdBy?: Maybe<
    UserUpdateOneRequiredWithoutCreatedEchosOfShoutsInVoidInput
  >;
  originalShoutContent?: Maybe<ContentUpdateOneRequiredInput>;
  originalShoutVoidGeohash?: Maybe<String>;
  originalEchoOfShoutInVoid?: Maybe<
    EchoOfShoutInVoidUpdateOneWithoutEchosOfEchosInput
  >;
  nVoid?: Maybe<NVoidUpdateOneRequiredWithoutEchosInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
  echosOfEchos?: Maybe<
    EchoOfShoutInVoidUpdateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
  replies?: Maybe<
    ReplyToEchoOfShoutInVoidUpdateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
}

export interface NVoidSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NVoidWhereInput>;
  AND?: Maybe<NVoidSubscriptionWhereInput[] | NVoidSubscriptionWhereInput>;
  OR?: Maybe<NVoidSubscriptionWhereInput[] | NVoidSubscriptionWhereInput>;
  NOT?: Maybe<NVoidSubscriptionWhereInput[] | NVoidSubscriptionWhereInput>;
}

export interface EchoOfShoutInVoidUpdateOneWithoutEchosOfEchosInput {
  create?: Maybe<EchoOfShoutInVoidCreateWithoutEchosOfEchosInput>;
  update?: Maybe<EchoOfShoutInVoidUpdateWithoutEchosOfEchosDataInput>;
  upsert?: Maybe<EchoOfShoutInVoidUpsertWithoutEchosOfEchosInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<EchoOfShoutInVoidWhereUniqueInput>;
}

export interface VoteBucketUpdateInput {
  voteCount?: Maybe<Int>;
  votes?: Maybe<VoteUpdateManyWithoutVoteBucketInput>;
}

export interface EchoOfShoutInVoidUpdateWithoutEchosOfEchosDataInput {
  createdBy?: Maybe<
    UserUpdateOneRequiredWithoutCreatedEchosOfShoutsInVoidInput
  >;
  originalShoutContent?: Maybe<ContentUpdateOneRequiredInput>;
  originalShoutVoidGeohash?: Maybe<String>;
  originalShoutInVoid?: Maybe<ShoutInVoidUpdateOneRequiredWithoutEchosInput>;
  originalEchoOfShoutInVoid?: Maybe<
    EchoOfShoutInVoidUpdateOneWithoutEchosOfEchosInput
  >;
  nVoid?: Maybe<NVoidUpdateOneRequiredWithoutEchosInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
  replies?: Maybe<
    ReplyToEchoOfShoutInVoidUpdateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
}

export interface VoteCreateInput {
  voteId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutCreatedVotesInput;
  voteBucket: VoteBucketCreateOneWithoutVotesInput;
  isUpvote: Boolean;
  uniqueHash: String;
}

export interface NVoidUpdateOneRequiredWithoutEchosInput {
  create?: Maybe<NVoidCreateWithoutEchosInput>;
  update?: Maybe<NVoidUpdateWithoutEchosDataInput>;
  upsert?: Maybe<NVoidUpsertWithoutEchosInput>;
  connect?: Maybe<NVoidWhereUniqueInput>;
}

export interface UserUpdateWithoutSavedVoidsDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  lastLocation?: Maybe<UserLocationUpdateOneInput>;
  locationHistory?: Maybe<UserLocationUpdateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteUpdateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidUpdateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidUpdateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutUpdateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
}

export interface NVoidUpdateWithoutEchosDataInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutCreatedVoidsInput>;
  voidGeohash?: Maybe<String>;
  shouts?: Maybe<ShoutInVoidUpdateManyWithoutNVoidInput>;
}

export interface UserCreateWithoutSavedVoidsInput {
  userId?: Maybe<ID_Input>;
  username: String;
  password: String;
  lastLocation?: Maybe<UserLocationCreateOneInput>;
  locationHistory?: Maybe<UserLocationCreateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteCreateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidCreateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidCreateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutCreateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
}

export interface NVoidUpsertWithoutEchosInput {
  update: NVoidUpdateWithoutEchosDataInput;
  create: NVoidCreateWithoutEchosInput;
}

export interface UserLocationUpdateManyMutationInput {
  userGeohash?: Maybe<String>;
}

export interface ReplyToEchoOfShoutInVoidUpdateManyWithoutOriginalEchoOfShoutInVoidInput {
  create?: Maybe<
    | ReplyToEchoOfShoutInVoidCreateWithoutOriginalEchoOfShoutInVoidInput[]
    | ReplyToEchoOfShoutInVoidCreateWithoutOriginalEchoOfShoutInVoidInput
  >;
  delete?: Maybe<
    | ReplyToEchoOfShoutInVoidWhereUniqueInput[]
    | ReplyToEchoOfShoutInVoidWhereUniqueInput
  >;
  connect?: Maybe<
    | ReplyToEchoOfShoutInVoidWhereUniqueInput[]
    | ReplyToEchoOfShoutInVoidWhereUniqueInput
  >;
  set?: Maybe<
    | ReplyToEchoOfShoutInVoidWhereUniqueInput[]
    | ReplyToEchoOfShoutInVoidWhereUniqueInput
  >;
  disconnect?: Maybe<
    | ReplyToEchoOfShoutInVoidWhereUniqueInput[]
    | ReplyToEchoOfShoutInVoidWhereUniqueInput
  >;
  update?: Maybe<
    | ReplyToEchoOfShoutInVoidUpdateWithWhereUniqueWithoutOriginalEchoOfShoutInVoidInput[]
    | ReplyToEchoOfShoutInVoidUpdateWithWhereUniqueWithoutOriginalEchoOfShoutInVoidInput
  >;
  upsert?: Maybe<
    | ReplyToEchoOfShoutInVoidUpsertWithWhereUniqueWithoutOriginalEchoOfShoutInVoidInput[]
    | ReplyToEchoOfShoutInVoidUpsertWithWhereUniqueWithoutOriginalEchoOfShoutInVoidInput
  >;
  deleteMany?: Maybe<
    | ReplyToEchoOfShoutInVoidScalarWhereInput[]
    | ReplyToEchoOfShoutInVoidScalarWhereInput
  >;
}

export interface UserUpsertWithoutActivatedEchosOfShoutsInput {
  update: UserUpdateWithoutActivatedEchosOfShoutsDataInput;
  create: UserCreateWithoutActivatedEchosOfShoutsInput;
}

export interface ReplyToEchoOfShoutInVoidUpdateWithWhereUniqueWithoutOriginalEchoOfShoutInVoidInput {
  where: ReplyToEchoOfShoutInVoidWhereUniqueInput;
  data: ReplyToEchoOfShoutInVoidUpdateWithoutOriginalEchoOfShoutInVoidDataInput;
}

export interface UserActivatedEchoOfShoutUpdateInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutActivatedEchosOfShoutsInput>;
  originalShoutContent?: Maybe<ContentUpdateOneRequiredInput>;
  originalShoutVoidGeohash?: Maybe<String>;
  originalEchoOfShoutInVoid?: Maybe<EchoOfShoutInVoidUpdateOneInput>;
}

export interface ReplyToEchoOfShoutInVoidUpdateWithoutOriginalEchoOfShoutInVoidDataInput {
  createdBy?: Maybe<
    UserUpdateOneRequiredWithoutRepliesToEchosOfShoutsInVoidInput
  >;
  content?: Maybe<ContentUpdateOneRequiredInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
}

export interface UserActivatedEchoOfShoutCreateInput {
  userActivatedEchoOfShoutId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutActivatedEchosOfShoutsInput;
  originalShoutContent: ContentCreateOneInput;
  originalShoutVoidGeohash: String;
  originalEchoOfShoutInVoid?: Maybe<EchoOfShoutInVoidCreateOneInput>;
}

export interface UserUpdateOneRequiredWithoutRepliesToEchosOfShoutsInVoidInput {
  create?: Maybe<UserCreateWithoutRepliesToEchosOfShoutsInVoidInput>;
  update?: Maybe<UserUpdateWithoutRepliesToEchosOfShoutsInVoidDataInput>;
  upsert?: Maybe<UserUpsertWithoutRepliesToEchosOfShoutsInVoidInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  userId?: Maybe<ID_Input>;
  username: String;
  password: String;
  lastLocation?: Maybe<UserLocationCreateOneInput>;
  locationHistory?: Maybe<UserLocationCreateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteCreateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidCreateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidCreateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidCreateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutCreateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
}

export interface UserUpdateWithoutRepliesToEchosOfShoutsInVoidDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  lastLocation?: Maybe<UserLocationUpdateOneInput>;
  locationHistory?: Maybe<UserLocationUpdateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteUpdateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidUpdateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidUpdateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidUpdateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutUpdateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidUpdateManyWithoutCreatedByInput
  >;
}

export interface ShoutInVoidCreateInput {
  shoutInVoidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutCreatedShoutsInVoidsInput;
  content: ContentCreateOneInput;
  contentMessageHash?: Maybe<String>;
  nVoid: NVoidCreateOneWithoutShoutsInput;
  voteBucket: VoteBucketCreateOneInput;
  echos?: Maybe<EchoOfShoutInVoidCreateManyWithoutOriginalShoutInVoidInput>;
  replies?: Maybe<ReplyToShoutInVoidCreateManyWithoutOriginalShoutInVoidInput>;
}

export interface UserUpsertWithoutRepliesToEchosOfShoutsInVoidInput {
  update: UserUpdateWithoutRepliesToEchosOfShoutsInVoidDataInput;
  create: UserCreateWithoutRepliesToEchosOfShoutsInVoidInput;
}

export interface ReplyToEchoOfShoutInVoidUpdateInput {
  createdBy?: Maybe<
    UserUpdateOneRequiredWithoutRepliesToEchosOfShoutsInVoidInput
  >;
  content?: Maybe<ContentUpdateOneRequiredInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
  originalEchoOfShoutInVoid?: Maybe<
    EchoOfShoutInVoidUpdateOneRequiredWithoutRepliesInput
  >;
}

export interface ReplyToEchoOfShoutInVoidUpsertWithWhereUniqueWithoutOriginalEchoOfShoutInVoidInput {
  where: ReplyToEchoOfShoutInVoidWhereUniqueInput;
  update: ReplyToEchoOfShoutInVoidUpdateWithoutOriginalEchoOfShoutInVoidDataInput;
  create: ReplyToEchoOfShoutInVoidCreateWithoutOriginalEchoOfShoutInVoidInput;
}

export interface NVoidUpdateInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutCreatedVoidsInput>;
  voidGeohash?: Maybe<String>;
  shouts?: Maybe<ShoutInVoidUpdateManyWithoutNVoidInput>;
  echos?: Maybe<EchoOfShoutInVoidUpdateManyWithoutNVoidInput>;
}

export interface ReplyToEchoOfShoutInVoidScalarWhereInput {
  replyToEchoOfShoutInVoidId?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_not?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_in?: Maybe<ID_Input[] | ID_Input>;
  replyToEchoOfShoutInVoidId_not_in?: Maybe<ID_Input[] | ID_Input>;
  replyToEchoOfShoutInVoidId_lt?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_lte?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_gt?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_gte?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_contains?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_not_contains?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_starts_with?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_not_starts_with?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_ends_with?: Maybe<ID_Input>;
  replyToEchoOfShoutInVoidId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    | ReplyToEchoOfShoutInVoidScalarWhereInput[]
    | ReplyToEchoOfShoutInVoidScalarWhereInput
  >;
  OR?: Maybe<
    | ReplyToEchoOfShoutInVoidScalarWhereInput[]
    | ReplyToEchoOfShoutInVoidScalarWhereInput
  >;
  NOT?: Maybe<
    | ReplyToEchoOfShoutInVoidScalarWhereInput[]
    | ReplyToEchoOfShoutInVoidScalarWhereInput
  >;
}

export interface ContentCreateInput {
  contentId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutCreatedContentInput;
  message: String;
}

export interface EchoOfShoutInVoidUpsertWithoutEchosOfEchosInput {
  update: EchoOfShoutInVoidUpdateWithoutEchosOfEchosDataInput;
  create: EchoOfShoutInVoidCreateWithoutEchosOfEchosInput;
}

export interface UserLocationCreateInput {
  userLocationId?: Maybe<ID_Input>;
  userGeohash: String;
  createdBy: UserCreateOneWithoutLocationHistoryInput;
}

export interface EchoOfShoutInVoidUpdateManyWithoutOriginalEchoOfShoutInVoidInput {
  create?: Maybe<
    | EchoOfShoutInVoidCreateWithoutOriginalEchoOfShoutInVoidInput[]
    | EchoOfShoutInVoidCreateWithoutOriginalEchoOfShoutInVoidInput
  >;
  delete?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
  connect?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
  set?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
  disconnect?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
  update?: Maybe<
    | EchoOfShoutInVoidUpdateWithWhereUniqueWithoutOriginalEchoOfShoutInVoidInput[]
    | EchoOfShoutInVoidUpdateWithWhereUniqueWithoutOriginalEchoOfShoutInVoidInput
  >;
  upsert?: Maybe<
    | EchoOfShoutInVoidUpsertWithWhereUniqueWithoutOriginalEchoOfShoutInVoidInput[]
    | EchoOfShoutInVoidUpsertWithWhereUniqueWithoutOriginalEchoOfShoutInVoidInput
  >;
  deleteMany?: Maybe<
    EchoOfShoutInVoidScalarWhereInput[] | EchoOfShoutInVoidScalarWhereInput
  >;
  updateMany?: Maybe<
    | EchoOfShoutInVoidUpdateManyWithWhereNestedInput[]
    | EchoOfShoutInVoidUpdateManyWithWhereNestedInput
  >;
}

export interface ContentCreateWithoutCreatedByInput {
  contentId?: Maybe<ID_Input>;
  message: String;
}

export interface EchoOfShoutInVoidUpdateWithWhereUniqueWithoutOriginalEchoOfShoutInVoidInput {
  where: EchoOfShoutInVoidWhereUniqueInput;
  data: EchoOfShoutInVoidUpdateWithoutOriginalEchoOfShoutInVoidDataInput;
}

export interface VoteBucketCreateWithoutVotesInput {
  voteBucketId?: Maybe<ID_Input>;
  voteCount: Int;
}

export interface EchoOfShoutInVoidUpdateWithoutOriginalEchoOfShoutInVoidDataInput {
  createdBy?: Maybe<
    UserUpdateOneRequiredWithoutCreatedEchosOfShoutsInVoidInput
  >;
  originalShoutContent?: Maybe<ContentUpdateOneRequiredInput>;
  originalShoutVoidGeohash?: Maybe<String>;
  originalShoutInVoid?: Maybe<ShoutInVoidUpdateOneRequiredWithoutEchosInput>;
  nVoid?: Maybe<NVoidUpdateOneRequiredWithoutEchosInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
  echosOfEchos?: Maybe<
    EchoOfShoutInVoidUpdateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
  replies?: Maybe<
    ReplyToEchoOfShoutInVoidUpdateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
}

export interface ShoutInVoidCreateWithoutNVoidInput {
  shoutInVoidId?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutCreatedShoutsInVoidsInput;
  content: ContentCreateOneInput;
  contentMessageHash?: Maybe<String>;
  voteBucket: VoteBucketCreateOneInput;
  echos?: Maybe<EchoOfShoutInVoidCreateManyWithoutOriginalShoutInVoidInput>;
  replies?: Maybe<ReplyToShoutInVoidCreateManyWithoutOriginalShoutInVoidInput>;
}

export interface EchoOfShoutInVoidUpsertWithWhereUniqueWithoutOriginalEchoOfShoutInVoidInput {
  where: EchoOfShoutInVoidWhereUniqueInput;
  update: EchoOfShoutInVoidUpdateWithoutOriginalEchoOfShoutInVoidDataInput;
  create: EchoOfShoutInVoidCreateWithoutOriginalEchoOfShoutInVoidInput;
}

export interface UserLocationCreateWithoutCreatedByInput {
  userLocationId?: Maybe<ID_Input>;
  userGeohash: String;
}

export interface EchoOfShoutInVoidScalarWhereInput {
  echoOfShoutInVoidId?: Maybe<ID_Input>;
  echoOfShoutInVoidId_not?: Maybe<ID_Input>;
  echoOfShoutInVoidId_in?: Maybe<ID_Input[] | ID_Input>;
  echoOfShoutInVoidId_not_in?: Maybe<ID_Input[] | ID_Input>;
  echoOfShoutInVoidId_lt?: Maybe<ID_Input>;
  echoOfShoutInVoidId_lte?: Maybe<ID_Input>;
  echoOfShoutInVoidId_gt?: Maybe<ID_Input>;
  echoOfShoutInVoidId_gte?: Maybe<ID_Input>;
  echoOfShoutInVoidId_contains?: Maybe<ID_Input>;
  echoOfShoutInVoidId_not_contains?: Maybe<ID_Input>;
  echoOfShoutInVoidId_starts_with?: Maybe<ID_Input>;
  echoOfShoutInVoidId_not_starts_with?: Maybe<ID_Input>;
  echoOfShoutInVoidId_ends_with?: Maybe<ID_Input>;
  echoOfShoutInVoidId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  originalShoutVoidGeohash?: Maybe<String>;
  originalShoutVoidGeohash_not?: Maybe<String>;
  originalShoutVoidGeohash_in?: Maybe<String[] | String>;
  originalShoutVoidGeohash_not_in?: Maybe<String[] | String>;
  originalShoutVoidGeohash_lt?: Maybe<String>;
  originalShoutVoidGeohash_lte?: Maybe<String>;
  originalShoutVoidGeohash_gt?: Maybe<String>;
  originalShoutVoidGeohash_gte?: Maybe<String>;
  originalShoutVoidGeohash_contains?: Maybe<String>;
  originalShoutVoidGeohash_not_contains?: Maybe<String>;
  originalShoutVoidGeohash_starts_with?: Maybe<String>;
  originalShoutVoidGeohash_not_starts_with?: Maybe<String>;
  originalShoutVoidGeohash_ends_with?: Maybe<String>;
  originalShoutVoidGeohash_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    EchoOfShoutInVoidScalarWhereInput[] | EchoOfShoutInVoidScalarWhereInput
  >;
  OR?: Maybe<
    EchoOfShoutInVoidScalarWhereInput[] | EchoOfShoutInVoidScalarWhereInput
  >;
  NOT?: Maybe<
    EchoOfShoutInVoidScalarWhereInput[] | EchoOfShoutInVoidScalarWhereInput
  >;
}

export interface UserActivatedEchoOfShoutCreateWithoutCreatedByInput {
  userActivatedEchoOfShoutId?: Maybe<ID_Input>;
  originalShoutContent: ContentCreateOneInput;
  originalShoutVoidGeohash: String;
  originalEchoOfShoutInVoid?: Maybe<EchoOfShoutInVoidCreateOneInput>;
}

export interface EchoOfShoutInVoidUpdateManyWithWhereNestedInput {
  where: EchoOfShoutInVoidScalarWhereInput;
  data: EchoOfShoutInVoidUpdateManyDataInput;
}

export interface UserCreateOneWithoutCreatedEchosOfShoutsInVoidInput {
  create?: Maybe<UserCreateWithoutCreatedEchosOfShoutsInVoidInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface EchoOfShoutInVoidUpdateManyDataInput {
  originalShoutVoidGeohash?: Maybe<String>;
}

export interface NVoidCreateOneWithoutShoutsInput {
  create?: Maybe<NVoidCreateWithoutShoutsInput>;
  connect?: Maybe<NVoidWhereUniqueInput>;
}

export interface EchoOfShoutInVoidUpsertWithWhereUniqueWithoutOriginalShoutInVoidInput {
  where: EchoOfShoutInVoidWhereUniqueInput;
  update: EchoOfShoutInVoidUpdateWithoutOriginalShoutInVoidDataInput;
  create: EchoOfShoutInVoidCreateWithoutOriginalShoutInVoidInput;
}

export interface EchoOfShoutInVoidCreateManyWithoutCreatedByInput {
  create?: Maybe<
    | EchoOfShoutInVoidCreateWithoutCreatedByInput[]
    | EchoOfShoutInVoidCreateWithoutCreatedByInput
  >;
  connect?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
}

export interface ShoutInVoidUpsertWithoutRepliesInput {
  update: ShoutInVoidUpdateWithoutRepliesDataInput;
  create: ShoutInVoidCreateWithoutRepliesInput;
}

export interface VoteBucketCreateOneInput {
  create?: Maybe<VoteBucketCreateInput>;
  connect?: Maybe<VoteBucketWhereUniqueInput>;
}

export interface ReplyToShoutInVoidUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ReplyToShoutInVoidWhereUniqueInput;
  update: ReplyToShoutInVoidUpdateWithoutCreatedByDataInput;
  create: ReplyToShoutInVoidCreateWithoutCreatedByInput;
}

export interface UserCreateOneWithoutCreatedVotesInput {
  create?: Maybe<UserCreateWithoutCreatedVotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ReplyToShoutInVoidScalarWhereInput {
  replyToShoutInVoidId?: Maybe<ID_Input>;
  replyToShoutInVoidId_not?: Maybe<ID_Input>;
  replyToShoutInVoidId_in?: Maybe<ID_Input[] | ID_Input>;
  replyToShoutInVoidId_not_in?: Maybe<ID_Input[] | ID_Input>;
  replyToShoutInVoidId_lt?: Maybe<ID_Input>;
  replyToShoutInVoidId_lte?: Maybe<ID_Input>;
  replyToShoutInVoidId_gt?: Maybe<ID_Input>;
  replyToShoutInVoidId_gte?: Maybe<ID_Input>;
  replyToShoutInVoidId_contains?: Maybe<ID_Input>;
  replyToShoutInVoidId_not_contains?: Maybe<ID_Input>;
  replyToShoutInVoidId_starts_with?: Maybe<ID_Input>;
  replyToShoutInVoidId_not_starts_with?: Maybe<ID_Input>;
  replyToShoutInVoidId_ends_with?: Maybe<ID_Input>;
  replyToShoutInVoidId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    ReplyToShoutInVoidScalarWhereInput[] | ReplyToShoutInVoidScalarWhereInput
  >;
  OR?: Maybe<
    ReplyToShoutInVoidScalarWhereInput[] | ReplyToShoutInVoidScalarWhereInput
  >;
  NOT?: Maybe<
    ReplyToShoutInVoidScalarWhereInput[] | ReplyToShoutInVoidScalarWhereInput
  >;
}

export interface ShoutInVoidCreateOneWithoutRepliesInput {
  create?: Maybe<ShoutInVoidCreateWithoutRepliesInput>;
  connect?: Maybe<ShoutInVoidWhereUniqueInput>;
}

export interface ReplyToEchoOfShoutInVoidUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    | ReplyToEchoOfShoutInVoidCreateWithoutCreatedByInput[]
    | ReplyToEchoOfShoutInVoidCreateWithoutCreatedByInput
  >;
  delete?: Maybe<
    | ReplyToEchoOfShoutInVoidWhereUniqueInput[]
    | ReplyToEchoOfShoutInVoidWhereUniqueInput
  >;
  connect?: Maybe<
    | ReplyToEchoOfShoutInVoidWhereUniqueInput[]
    | ReplyToEchoOfShoutInVoidWhereUniqueInput
  >;
  set?: Maybe<
    | ReplyToEchoOfShoutInVoidWhereUniqueInput[]
    | ReplyToEchoOfShoutInVoidWhereUniqueInput
  >;
  disconnect?: Maybe<
    | ReplyToEchoOfShoutInVoidWhereUniqueInput[]
    | ReplyToEchoOfShoutInVoidWhereUniqueInput
  >;
  update?: Maybe<
    | ReplyToEchoOfShoutInVoidUpdateWithWhereUniqueWithoutCreatedByInput[]
    | ReplyToEchoOfShoutInVoidUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | ReplyToEchoOfShoutInVoidUpsertWithWhereUniqueWithoutCreatedByInput[]
    | ReplyToEchoOfShoutInVoidUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<
    | ReplyToEchoOfShoutInVoidScalarWhereInput[]
    | ReplyToEchoOfShoutInVoidScalarWhereInput
  >;
}

export interface EchoOfShoutInVoidCreateOneWithoutEchosOfEchosInput {
  create?: Maybe<EchoOfShoutInVoidCreateWithoutEchosOfEchosInput>;
  connect?: Maybe<EchoOfShoutInVoidWhereUniqueInput>;
}

export interface ReplyToEchoOfShoutInVoidUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ReplyToEchoOfShoutInVoidWhereUniqueInput;
  data: ReplyToEchoOfShoutInVoidUpdateWithoutCreatedByDataInput;
}

export interface ReplyToEchoOfShoutInVoidCreateManyWithoutOriginalEchoOfShoutInVoidInput {
  create?: Maybe<
    | ReplyToEchoOfShoutInVoidCreateWithoutOriginalEchoOfShoutInVoidInput[]
    | ReplyToEchoOfShoutInVoidCreateWithoutOriginalEchoOfShoutInVoidInput
  >;
  connect?: Maybe<
    | ReplyToEchoOfShoutInVoidWhereUniqueInput[]
    | ReplyToEchoOfShoutInVoidWhereUniqueInput
  >;
}

export interface ReplyToEchoOfShoutInVoidUpdateWithoutCreatedByDataInput {
  content?: Maybe<ContentUpdateOneRequiredInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
  originalEchoOfShoutInVoid?: Maybe<
    EchoOfShoutInVoidUpdateOneRequiredWithoutRepliesInput
  >;
}

export interface EchoOfShoutInVoidCreateManyWithoutOriginalEchoOfShoutInVoidInput {
  create?: Maybe<
    | EchoOfShoutInVoidCreateWithoutOriginalEchoOfShoutInVoidInput[]
    | EchoOfShoutInVoidCreateWithoutOriginalEchoOfShoutInVoidInput
  >;
  connect?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
}

export interface EchoOfShoutInVoidUpdateOneRequiredWithoutRepliesInput {
  create?: Maybe<EchoOfShoutInVoidCreateWithoutRepliesInput>;
  update?: Maybe<EchoOfShoutInVoidUpdateWithoutRepliesDataInput>;
  upsert?: Maybe<EchoOfShoutInVoidUpsertWithoutRepliesInput>;
  connect?: Maybe<EchoOfShoutInVoidWhereUniqueInput>;
}

export interface EchoOfShoutInVoidCreateOneWithoutRepliesInput {
  create?: Maybe<EchoOfShoutInVoidCreateWithoutRepliesInput>;
  connect?: Maybe<EchoOfShoutInVoidWhereUniqueInput>;
}

export interface EchoOfShoutInVoidUpdateWithoutRepliesDataInput {
  createdBy?: Maybe<
    UserUpdateOneRequiredWithoutCreatedEchosOfShoutsInVoidInput
  >;
  originalShoutContent?: Maybe<ContentUpdateOneRequiredInput>;
  originalShoutVoidGeohash?: Maybe<String>;
  originalShoutInVoid?: Maybe<ShoutInVoidUpdateOneRequiredWithoutEchosInput>;
  originalEchoOfShoutInVoid?: Maybe<
    EchoOfShoutInVoidUpdateOneWithoutEchosOfEchosInput
  >;
  nVoid?: Maybe<NVoidUpdateOneRequiredWithoutEchosInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
  echosOfEchos?: Maybe<
    EchoOfShoutInVoidUpdateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
}

export interface UserCreateOneWithoutRepliesToShoutsInVoidInput {
  create?: Maybe<UserCreateWithoutRepliesToShoutsInVoidInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface EchoOfShoutInVoidUpsertWithoutRepliesInput {
  update: EchoOfShoutInVoidUpdateWithoutRepliesDataInput;
  create: EchoOfShoutInVoidCreateWithoutRepliesInput;
}

export interface ContentUpdateInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutCreatedContentInput>;
  message?: Maybe<String>;
}

export interface ReplyToEchoOfShoutInVoidUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ReplyToEchoOfShoutInVoidWhereUniqueInput;
  update: ReplyToEchoOfShoutInVoidUpdateWithoutCreatedByDataInput;
  create: ReplyToEchoOfShoutInVoidCreateWithoutCreatedByInput;
}

export interface UserLocationUpdateDataInput {
  userGeohash?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutLocationHistoryInput>;
}

export interface UserUpsertWithoutCreatedVotesInput {
  update: UserUpdateWithoutCreatedVotesDataInput;
  create: UserCreateWithoutCreatedVotesInput;
}

export interface UserSavedVoidSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserSavedVoidWhereInput>;
  AND?: Maybe<
    UserSavedVoidSubscriptionWhereInput[] | UserSavedVoidSubscriptionWhereInput
  >;
  OR?: Maybe<
    UserSavedVoidSubscriptionWhereInput[] | UserSavedVoidSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UserSavedVoidSubscriptionWhereInput[] | UserSavedVoidSubscriptionWhereInput
  >;
}

export interface VoteUpsertWithWhereUniqueWithoutVoteBucketInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutVoteBucketDataInput;
  create: VoteCreateWithoutVoteBucketInput;
}

export interface ReplyToShoutInVoidSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReplyToShoutInVoidWhereInput>;
  AND?: Maybe<
    | ReplyToShoutInVoidSubscriptionWhereInput[]
    | ReplyToShoutInVoidSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ReplyToShoutInVoidSubscriptionWhereInput[]
    | ReplyToShoutInVoidSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ReplyToShoutInVoidSubscriptionWhereInput[]
    | ReplyToShoutInVoidSubscriptionWhereInput
  >;
}

export interface VoteBucketUpsertNestedInput {
  update: VoteBucketUpdateDataInput;
  create: VoteBucketCreateInput;
}

export interface VoteUpdateManyMutationInput {
  isUpvote?: Maybe<Boolean>;
  uniqueHash?: Maybe<String>;
}

export interface ReplyToShoutInVoidUpdateManyWithoutOriginalShoutInVoidInput {
  create?: Maybe<
    | ReplyToShoutInVoidCreateWithoutOriginalShoutInVoidInput[]
    | ReplyToShoutInVoidCreateWithoutOriginalShoutInVoidInput
  >;
  delete?: Maybe<
    ReplyToShoutInVoidWhereUniqueInput[] | ReplyToShoutInVoidWhereUniqueInput
  >;
  connect?: Maybe<
    ReplyToShoutInVoidWhereUniqueInput[] | ReplyToShoutInVoidWhereUniqueInput
  >;
  set?: Maybe<
    ReplyToShoutInVoidWhereUniqueInput[] | ReplyToShoutInVoidWhereUniqueInput
  >;
  disconnect?: Maybe<
    ReplyToShoutInVoidWhereUniqueInput[] | ReplyToShoutInVoidWhereUniqueInput
  >;
  update?: Maybe<
    | ReplyToShoutInVoidUpdateWithWhereUniqueWithoutOriginalShoutInVoidInput[]
    | ReplyToShoutInVoidUpdateWithWhereUniqueWithoutOriginalShoutInVoidInput
  >;
  upsert?: Maybe<
    | ReplyToShoutInVoidUpsertWithWhereUniqueWithoutOriginalShoutInVoidInput[]
    | ReplyToShoutInVoidUpsertWithWhereUniqueWithoutOriginalShoutInVoidInput
  >;
  deleteMany?: Maybe<
    ReplyToShoutInVoidScalarWhereInput[] | ReplyToShoutInVoidScalarWhereInput
  >;
}

export interface UserUpdateOneRequiredWithoutSavedVoidsInput {
  create?: Maybe<UserCreateWithoutSavedVoidsInput>;
  update?: Maybe<UserUpdateWithoutSavedVoidsDataInput>;
  upsert?: Maybe<UserUpsertWithoutSavedVoidsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ReplyToShoutInVoidUpdateWithWhereUniqueWithoutOriginalShoutInVoidInput {
  where: ReplyToShoutInVoidWhereUniqueInput;
  data: ReplyToShoutInVoidUpdateWithoutOriginalShoutInVoidDataInput;
}

export interface UserLocationUpdateInput {
  userGeohash?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutLocationHistoryInput>;
}

export interface ReplyToShoutInVoidUpdateWithoutOriginalShoutInVoidDataInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutRepliesToShoutsInVoidInput>;
  content?: Maybe<ContentUpdateOneRequiredInput>;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
}

export type UserActivatedEchoOfShoutWhereUniqueInput = AtLeastOne<{
  userActivatedEchoOfShoutId: Maybe<ID_Input>;
}>;

export interface UserUpdateOneRequiredWithoutRepliesToShoutsInVoidInput {
  create?: Maybe<UserCreateWithoutRepliesToShoutsInVoidInput>;
  update?: Maybe<UserUpdateWithoutRepliesToShoutsInVoidDataInput>;
  upsert?: Maybe<UserUpsertWithoutRepliesToShoutsInVoidInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type UserSavedVoidWhereUniqueInput = AtLeastOne<{
  userSavedVoidId: Maybe<ID_Input>;
}>;

export interface UserUpdateWithoutRepliesToShoutsInVoidDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  lastLocation?: Maybe<UserLocationUpdateOneInput>;
  locationHistory?: Maybe<UserLocationUpdateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteUpdateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidUpdateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidUpdateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidUpdateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutUpdateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
}

export type VoteBucketWhereUniqueInput = AtLeastOne<{
  voteBucketId: Maybe<ID_Input>;
}>;

export interface UserUpsertWithoutRepliesToShoutsInVoidInput {
  update: UserUpdateWithoutRepliesToShoutsInVoidDataInput;
  create: UserCreateWithoutRepliesToShoutsInVoidInput;
}

export interface UserCreateWithoutCreatedContentInput {
  userId?: Maybe<ID_Input>;
  username: String;
  password: String;
  lastLocation?: Maybe<UserLocationCreateOneInput>;
  locationHistory?: Maybe<UserLocationCreateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteCreateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidCreateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidCreateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidCreateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutCreateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
}

export interface ReplyToShoutInVoidUpsertWithWhereUniqueWithoutOriginalShoutInVoidInput {
  where: ReplyToShoutInVoidWhereUniqueInput;
  update: ReplyToShoutInVoidUpdateWithoutOriginalShoutInVoidDataInput;
  create: ReplyToShoutInVoidCreateWithoutOriginalShoutInVoidInput;
}

export interface VoteCreateWithoutCreatedByInput {
  voteId?: Maybe<ID_Input>;
  voteBucket: VoteBucketCreateOneWithoutVotesInput;
  isUpvote: Boolean;
  uniqueHash: String;
}

export interface ShoutInVoidUpsertWithoutEchosInput {
  update: ShoutInVoidUpdateWithoutEchosDataInput;
  create: ShoutInVoidCreateWithoutEchosInput;
}

export interface UserCreateWithoutCreatedShoutsInVoidsInput {
  userId?: Maybe<ID_Input>;
  username: String;
  password: String;
  lastLocation?: Maybe<UserLocationCreateOneInput>;
  locationHistory?: Maybe<UserLocationCreateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteCreateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidCreateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidCreateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutCreateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
}

export interface EchoOfShoutInVoidUpsertWithWhereUniqueWithoutCreatedByInput {
  where: EchoOfShoutInVoidWhereUniqueInput;
  update: EchoOfShoutInVoidUpdateWithoutCreatedByDataInput;
  create: EchoOfShoutInVoidCreateWithoutCreatedByInput;
}

export interface EchoOfShoutInVoidCreateOneInput {
  create?: Maybe<EchoOfShoutInVoidCreateInput>;
  connect?: Maybe<EchoOfShoutInVoidWhereUniqueInput>;
}

export interface UserUpsertWithoutCreatedVoidsInput {
  update: UserUpdateWithoutCreatedVoidsDataInput;
  create: UserCreateWithoutCreatedVoidsInput;
}

export interface UserCreateOneWithoutCreatedVoidsInput {
  create?: Maybe<UserCreateWithoutCreatedVoidsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface EchoOfShoutInVoidUpdateManyWithoutNVoidInput {
  create?: Maybe<
    | EchoOfShoutInVoidCreateWithoutNVoidInput[]
    | EchoOfShoutInVoidCreateWithoutNVoidInput
  >;
  delete?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
  connect?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
  set?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
  disconnect?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
  update?: Maybe<
    | EchoOfShoutInVoidUpdateWithWhereUniqueWithoutNVoidInput[]
    | EchoOfShoutInVoidUpdateWithWhereUniqueWithoutNVoidInput
  >;
  upsert?: Maybe<
    | EchoOfShoutInVoidUpsertWithWhereUniqueWithoutNVoidInput[]
    | EchoOfShoutInVoidUpsertWithWhereUniqueWithoutNVoidInput
  >;
  deleteMany?: Maybe<
    EchoOfShoutInVoidScalarWhereInput[] | EchoOfShoutInVoidScalarWhereInput
  >;
  updateMany?: Maybe<
    | EchoOfShoutInVoidUpdateManyWithWhereNestedInput[]
    | EchoOfShoutInVoidUpdateManyWithWhereNestedInput
  >;
}

export interface VoteCreateManyWithoutVoteBucketInput {
  create?: Maybe<
    VoteCreateWithoutVoteBucketInput[] | VoteCreateWithoutVoteBucketInput
  >;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface EchoOfShoutInVoidUpdateWithWhereUniqueWithoutNVoidInput {
  where: EchoOfShoutInVoidWhereUniqueInput;
  data: EchoOfShoutInVoidUpdateWithoutNVoidDataInput;
}

export interface EchoOfShoutInVoidCreateManyWithoutOriginalShoutInVoidInput {
  create?: Maybe<
    | EchoOfShoutInVoidCreateWithoutOriginalShoutInVoidInput[]
    | EchoOfShoutInVoidCreateWithoutOriginalShoutInVoidInput
  >;
  connect?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
}

export interface EchoOfShoutInVoidUpdateWithoutNVoidDataInput {
  createdBy?: Maybe<
    UserUpdateOneRequiredWithoutCreatedEchosOfShoutsInVoidInput
  >;
  originalShoutContent?: Maybe<ContentUpdateOneRequiredInput>;
  originalShoutVoidGeohash?: Maybe<String>;
  originalShoutInVoid?: Maybe<ShoutInVoidUpdateOneRequiredWithoutEchosInput>;
  originalEchoOfShoutInVoid?: Maybe<
    EchoOfShoutInVoidUpdateOneWithoutEchosOfEchosInput
  >;
  voteBucket?: Maybe<VoteBucketUpdateOneRequiredInput>;
  echosOfEchos?: Maybe<
    EchoOfShoutInVoidUpdateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
  replies?: Maybe<
    ReplyToEchoOfShoutInVoidUpdateManyWithoutOriginalEchoOfShoutInVoidInput
  >;
}

export interface UserCreateOneWithoutRepliesToEchosOfShoutsInVoidInput {
  create?: Maybe<UserCreateWithoutRepliesToEchosOfShoutsInVoidInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface EchoOfShoutInVoidUpsertWithWhereUniqueWithoutNVoidInput {
  where: EchoOfShoutInVoidWhereUniqueInput;
  update: EchoOfShoutInVoidUpdateWithoutNVoidDataInput;
  create: EchoOfShoutInVoidCreateWithoutNVoidInput;
}

export interface ReplyToShoutInVoidCreateManyWithoutOriginalShoutInVoidInput {
  create?: Maybe<
    | ReplyToShoutInVoidCreateWithoutOriginalShoutInVoidInput[]
    | ReplyToShoutInVoidCreateWithoutOriginalShoutInVoidInput
  >;
  connect?: Maybe<
    ReplyToShoutInVoidWhereUniqueInput[] | ReplyToShoutInVoidWhereUniqueInput
  >;
}

export interface NVoidUpsertWithoutShoutsInput {
  update: NVoidUpdateWithoutShoutsDataInput;
  create: NVoidCreateWithoutShoutsInput;
}

export interface UserUpdateWithoutCreatedContentDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  lastLocation?: Maybe<UserLocationUpdateOneInput>;
  locationHistory?: Maybe<UserLocationUpdateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteUpdateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidUpdateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidUpdateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidUpdateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutUpdateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
}

export interface ShoutInVoidUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ShoutInVoidWhereUniqueInput;
  update: ShoutInVoidUpdateWithoutCreatedByDataInput;
  create: ShoutInVoidCreateWithoutCreatedByInput;
}

export interface UserActivatedEchoOfShoutSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserActivatedEchoOfShoutWhereInput>;
  AND?: Maybe<
    | UserActivatedEchoOfShoutSubscriptionWhereInput[]
    | UserActivatedEchoOfShoutSubscriptionWhereInput
  >;
  OR?: Maybe<
    | UserActivatedEchoOfShoutSubscriptionWhereInput[]
    | UserActivatedEchoOfShoutSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | UserActivatedEchoOfShoutSubscriptionWhereInput[]
    | UserActivatedEchoOfShoutSubscriptionWhereInput
  >;
}

export interface ShoutInVoidScalarWhereInput {
  shoutInVoidId?: Maybe<ID_Input>;
  shoutInVoidId_not?: Maybe<ID_Input>;
  shoutInVoidId_in?: Maybe<ID_Input[] | ID_Input>;
  shoutInVoidId_not_in?: Maybe<ID_Input[] | ID_Input>;
  shoutInVoidId_lt?: Maybe<ID_Input>;
  shoutInVoidId_lte?: Maybe<ID_Input>;
  shoutInVoidId_gt?: Maybe<ID_Input>;
  shoutInVoidId_gte?: Maybe<ID_Input>;
  shoutInVoidId_contains?: Maybe<ID_Input>;
  shoutInVoidId_not_contains?: Maybe<ID_Input>;
  shoutInVoidId_starts_with?: Maybe<ID_Input>;
  shoutInVoidId_not_starts_with?: Maybe<ID_Input>;
  shoutInVoidId_ends_with?: Maybe<ID_Input>;
  shoutInVoidId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  contentMessageHash?: Maybe<String>;
  contentMessageHash_not?: Maybe<String>;
  contentMessageHash_in?: Maybe<String[] | String>;
  contentMessageHash_not_in?: Maybe<String[] | String>;
  contentMessageHash_lt?: Maybe<String>;
  contentMessageHash_lte?: Maybe<String>;
  contentMessageHash_gt?: Maybe<String>;
  contentMessageHash_gte?: Maybe<String>;
  contentMessageHash_contains?: Maybe<String>;
  contentMessageHash_not_contains?: Maybe<String>;
  contentMessageHash_starts_with?: Maybe<String>;
  contentMessageHash_not_starts_with?: Maybe<String>;
  contentMessageHash_ends_with?: Maybe<String>;
  contentMessageHash_not_ends_with?: Maybe<String>;
  AND?: Maybe<ShoutInVoidScalarWhereInput[] | ShoutInVoidScalarWhereInput>;
  OR?: Maybe<ShoutInVoidScalarWhereInput[] | ShoutInVoidScalarWhereInput>;
  NOT?: Maybe<ShoutInVoidScalarWhereInput[] | ShoutInVoidScalarWhereInput>;
}

export interface UserSavedVoidUpdateManyMutationInput {
  originalVoidGeohash?: Maybe<String>;
}

export interface ShoutInVoidUpdateManyWithWhereNestedInput {
  where: ShoutInVoidScalarWhereInput;
  data: ShoutInVoidUpdateManyDataInput;
}

export interface UserUpdateWithoutActivatedEchosOfShoutsDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  lastLocation?: Maybe<UserLocationUpdateOneInput>;
  locationHistory?: Maybe<UserLocationUpdateManyWithoutCreatedByInput>;
  createdContent?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteUpdateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidUpdateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidUpdateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidUpdateManyWithoutCreatedByInput>;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidUpdateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidUpdateManyWithoutCreatedByInput
  >;
}

export interface ShoutInVoidUpdateManyDataInput {
  contentMessageHash?: Maybe<String>;
}

export type VoteWhereUniqueInput = AtLeastOne<{
  voteId: Maybe<ID_Input>;
  uniqueHash?: Maybe<String>;
}>;

export interface UserUpsertWithoutCreatedEchosOfShoutsInVoidInput {
  update: UserUpdateWithoutCreatedEchosOfShoutsInVoidDataInput;
  create: UserCreateWithoutCreatedEchosOfShoutsInVoidInput;
}

export interface UserCreateWithoutLocationHistoryInput {
  userId?: Maybe<ID_Input>;
  username: String;
  password: String;
  lastLocation?: Maybe<UserLocationCreateOneInput>;
  createdContent?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  createdVotes?: Maybe<VoteCreateManyWithoutCreatedByInput>;
  createdVoids?: Maybe<NVoidCreateManyWithoutCreatedByInput>;
  savedVoids?: Maybe<UserSavedVoidCreateManyWithoutCreatedByInput>;
  createdShoutsInVoids?: Maybe<ShoutInVoidCreateManyWithoutCreatedByInput>;
  activatedEchosOfShouts?: Maybe<
    UserActivatedEchoOfShoutCreateManyWithoutCreatedByInput
  >;
  createdEchosOfShoutsInVoid?: Maybe<
    EchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToShoutsInVoid?: Maybe<
    ReplyToShoutInVoidCreateManyWithoutCreatedByInput
  >;
  repliesToEchosOfShoutsInVoid?: Maybe<
    ReplyToEchoOfShoutInVoidCreateManyWithoutCreatedByInput
  >;
}

export interface EchoOfShoutInVoidUpsertNestedInput {
  update: EchoOfShoutInVoidUpdateDataInput;
  create: EchoOfShoutInVoidCreateInput;
}

export interface UserSavedVoidCreateWithoutCreatedByInput {
  userSavedVoidId?: Maybe<ID_Input>;
  originalVoidGeohash: String;
}

export interface UserActivatedEchoOfShoutUpsertWithWhereUniqueWithoutCreatedByInput {
  where: UserActivatedEchoOfShoutWhereUniqueInput;
  update: UserActivatedEchoOfShoutUpdateWithoutCreatedByDataInput;
  create: UserActivatedEchoOfShoutCreateWithoutCreatedByInput;
}

export interface ShoutInVoidCreateOneWithoutEchosInput {
  create?: Maybe<ShoutInVoidCreateWithoutEchosInput>;
  connect?: Maybe<ShoutInVoidWhereUniqueInput>;
}

export interface UserActivatedEchoOfShoutScalarWhereInput {
  userActivatedEchoOfShoutId?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_not?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_in?: Maybe<ID_Input[] | ID_Input>;
  userActivatedEchoOfShoutId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userActivatedEchoOfShoutId_lt?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_lte?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_gt?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_gte?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_contains?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_not_contains?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_starts_with?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_not_starts_with?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_ends_with?: Maybe<ID_Input>;
  userActivatedEchoOfShoutId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  originalShoutVoidGeohash?: Maybe<String>;
  originalShoutVoidGeohash_not?: Maybe<String>;
  originalShoutVoidGeohash_in?: Maybe<String[] | String>;
  originalShoutVoidGeohash_not_in?: Maybe<String[] | String>;
  originalShoutVoidGeohash_lt?: Maybe<String>;
  originalShoutVoidGeohash_lte?: Maybe<String>;
  originalShoutVoidGeohash_gt?: Maybe<String>;
  originalShoutVoidGeohash_gte?: Maybe<String>;
  originalShoutVoidGeohash_contains?: Maybe<String>;
  originalShoutVoidGeohash_not_contains?: Maybe<String>;
  originalShoutVoidGeohash_starts_with?: Maybe<String>;
  originalShoutVoidGeohash_not_starts_with?: Maybe<String>;
  originalShoutVoidGeohash_ends_with?: Maybe<String>;
  originalShoutVoidGeohash_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    | UserActivatedEchoOfShoutScalarWhereInput[]
    | UserActivatedEchoOfShoutScalarWhereInput
  >;
  OR?: Maybe<
    | UserActivatedEchoOfShoutScalarWhereInput[]
    | UserActivatedEchoOfShoutScalarWhereInput
  >;
  NOT?: Maybe<
    | UserActivatedEchoOfShoutScalarWhereInput[]
    | UserActivatedEchoOfShoutScalarWhereInput
  >;
}

export interface NVoidCreateOneWithoutEchosInput {
  create?: Maybe<NVoidCreateWithoutEchosInput>;
  connect?: Maybe<NVoidWhereUniqueInput>;
}

export interface UserActivatedEchoOfShoutUpdateManyWithWhereNestedInput {
  where: UserActivatedEchoOfShoutScalarWhereInput;
  data: UserActivatedEchoOfShoutUpdateManyDataInput;
}

export interface EchoOfShoutInVoidCreateManyWithoutNVoidInput {
  create?: Maybe<
    | EchoOfShoutInVoidCreateWithoutNVoidInput[]
    | EchoOfShoutInVoidCreateWithoutNVoidInput
  >;
  connect?: Maybe<
    EchoOfShoutInVoidWhereUniqueInput[] | EchoOfShoutInVoidWhereUniqueInput
  >;
}

export interface UserActivatedEchoOfShoutUpdateManyDataInput {
  originalShoutVoidGeohash?: Maybe<String>;
}

export interface ContentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContentWhereInput>;
  AND?: Maybe<ContentSubscriptionWhereInput[] | ContentSubscriptionWhereInput>;
  OR?: Maybe<ContentSubscriptionWhereInput[] | ContentSubscriptionWhereInput>;
  NOT?: Maybe<ContentSubscriptionWhereInput[] | ContentSubscriptionWhereInput>;
}

export interface UserUpsertWithoutCreatedShoutsInVoidsInput {
  update: UserUpdateWithoutCreatedShoutsInVoidsDataInput;
  create: UserCreateWithoutCreatedShoutsInVoidsInput;
}

export type UserLocationWhereUniqueInput = AtLeastOne<{
  userLocationId: Maybe<ID_Input>;
}>;

export interface ShoutInVoidUpsertWithWhereUniqueWithoutNVoidInput {
  where: ShoutInVoidWhereUniqueInput;
  update: ShoutInVoidUpdateWithoutNVoidDataInput;
  create: ShoutInVoidCreateWithoutNVoidInput;
}

export interface NVoidCreateWithoutCreatedByInput {
  voidId?: Maybe<ID_Input>;
  voidGeohash: String;
  shouts?: Maybe<ShoutInVoidCreateManyWithoutNVoidInput>;
  echos?: Maybe<EchoOfShoutInVoidCreateManyWithoutNVoidInput>;
}

export interface NVoidUpsertWithWhereUniqueWithoutCreatedByInput {
  where: NVoidWhereUniqueInput;
  update: NVoidUpdateWithoutCreatedByDataInput;
  create: NVoidCreateWithoutCreatedByInput;
}

export interface ReplyToShoutInVoidCreateManyWithoutCreatedByInput {
  create?: Maybe<
    | ReplyToShoutInVoidCreateWithoutCreatedByInput[]
    | ReplyToShoutInVoidCreateWithoutCreatedByInput
  >;
  connect?: Maybe<
    ReplyToShoutInVoidWhereUniqueInput[] | ReplyToShoutInVoidWhereUniqueInput
  >;
}

export interface UserUpsertWithoutLocationHistoryInput {
  update: UserUpdateWithoutLocationHistoryDataInput;
  create: UserCreateWithoutLocationHistoryInput;
}

export interface NVoidUpdateManyDataInput {
  voidGeohash?: Maybe<String>;
}

export interface NVoidUpdateManyWithWhereNestedInput {
  where: NVoidScalarWhereInput;
  data: NVoidUpdateManyDataInput;
}

export interface NVoidScalarWhereInput {
  voidId?: Maybe<ID_Input>;
  voidId_not?: Maybe<ID_Input>;
  voidId_in?: Maybe<ID_Input[] | ID_Input>;
  voidId_not_in?: Maybe<ID_Input[] | ID_Input>;
  voidId_lt?: Maybe<ID_Input>;
  voidId_lte?: Maybe<ID_Input>;
  voidId_gt?: Maybe<ID_Input>;
  voidId_gte?: Maybe<ID_Input>;
  voidId_contains?: Maybe<ID_Input>;
  voidId_not_contains?: Maybe<ID_Input>;
  voidId_starts_with?: Maybe<ID_Input>;
  voidId_not_starts_with?: Maybe<ID_Input>;
  voidId_ends_with?: Maybe<ID_Input>;
  voidId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  voidGeohash?: Maybe<String>;
  voidGeohash_not?: Maybe<String>;
  voidGeohash_in?: Maybe<String[] | String>;
  voidGeohash_not_in?: Maybe<String[] | String>;
  voidGeohash_lt?: Maybe<String>;
  voidGeohash_lte?: Maybe<String>;
  voidGeohash_gt?: Maybe<String>;
  voidGeohash_gte?: Maybe<String>;
  voidGeohash_contains?: Maybe<String>;
  voidGeohash_not_contains?: Maybe<String>;
  voidGeohash_starts_with?: Maybe<String>;
  voidGeohash_not_starts_with?: Maybe<String>;
  voidGeohash_ends_with?: Maybe<String>;
  voidGeohash_not_ends_with?: Maybe<String>;
  AND?: Maybe<NVoidScalarWhereInput[] | NVoidScalarWhereInput>;
  OR?: Maybe<NVoidScalarWhereInput[] | NVoidScalarWhereInput>;
  NOT?: Maybe<NVoidScalarWhereInput[] | NVoidScalarWhereInput>;
}

export interface ReplyToEchoOfShoutInVoidCreateManyWithoutCreatedByInput {
  create?: Maybe<
    | ReplyToEchoOfShoutInVoidCreateWithoutCreatedByInput[]
    | ReplyToEchoOfShoutInVoidCreateWithoutCreatedByInput
  >;
  connect?: Maybe<
    | ReplyToEchoOfShoutInVoidWhereUniqueInput[]
    | ReplyToEchoOfShoutInVoidWhereUniqueInput
  >;
}

export interface ShoutInVoidCreateManyWithoutCreatedByInput {
  create?: Maybe<
    | ShoutInVoidCreateWithoutCreatedByInput[]
    | ShoutInVoidCreateWithoutCreatedByInput
  >;
  connect?: Maybe<ShoutInVoidWhereUniqueInput[] | ShoutInVoidWhereUniqueInput>;
}

export interface EchoOfShoutInVoidUpdateManyMutationInput {
  originalShoutVoidGeohash?: Maybe<String>;
}

export interface UserCreateOneWithoutSavedVoidsInput {
  create?: Maybe<UserCreateWithoutSavedVoidsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface VoteBucketSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VoteBucketWhereInput>;
  AND?: Maybe<
    VoteBucketSubscriptionWhereInput[] | VoteBucketSubscriptionWhereInput
  >;
  OR?: Maybe<
    VoteBucketSubscriptionWhereInput[] | VoteBucketSubscriptionWhereInput
  >;
  NOT?: Maybe<
    VoteBucketSubscriptionWhereInput[] | VoteBucketSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VoteBucketPreviousValues {
  voteBucketId: ID_Output;
  createdAt: DateTimeOutput;
  voteCount: Int;
}

export interface VoteBucketPreviousValuesPromise
  extends Promise<VoteBucketPreviousValues>,
    Fragmentable {
  voteBucketId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  voteCount: () => Promise<Int>;
}

export interface VoteBucketPreviousValuesSubscription
  extends Promise<AsyncIterator<VoteBucketPreviousValues>>,
    Fragmentable {
  voteBucketId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  voteCount: () => Promise<AsyncIterator<Int>>;
}

export interface EchoOfShoutInVoidConnection {
  pageInfo: PageInfo;
  edges: EchoOfShoutInVoidEdge[];
}

export interface EchoOfShoutInVoidConnectionPromise
  extends Promise<EchoOfShoutInVoidConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EchoOfShoutInVoidEdge>>() => T;
  aggregate: <T = AggregateEchoOfShoutInVoidPromise>() => T;
}

export interface EchoOfShoutInVoidConnectionSubscription
  extends Promise<AsyncIterator<EchoOfShoutInVoidConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EchoOfShoutInVoidEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEchoOfShoutInVoidSubscription>() => T;
}

export interface Vote {
  voteId: ID_Output;
  updatedAt: DateTimeOutput;
  isUpvote: Boolean;
  uniqueHash: String;
}

export interface VotePromise extends Promise<Vote>, Fragmentable {
  voteId: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  voteBucket: <T = VoteBucketPromise>() => T;
  isUpvote: () => Promise<Boolean>;
  uniqueHash: () => Promise<String>;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<Vote>>,
    Fragmentable {
  voteId: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = UserSubscription>() => T;
  voteBucket: <T = VoteBucketSubscription>() => T;
  isUpvote: () => Promise<AsyncIterator<Boolean>>;
  uniqueHash: () => Promise<AsyncIterator<String>>;
}

export interface VoteNullablePromise
  extends Promise<Vote | null>,
    Fragmentable {
  voteId: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  voteBucket: <T = VoteBucketPromise>() => T;
  isUpvote: () => Promise<Boolean>;
  uniqueHash: () => Promise<String>;
}

export interface AggregateContent {
  count: Int;
}

export interface AggregateContentPromise
  extends Promise<AggregateContent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContentSubscription
  extends Promise<AsyncIterator<AggregateContent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface VoteBucket {
  voteBucketId: ID_Output;
  createdAt: DateTimeOutput;
  voteCount: Int;
}

export interface VoteBucketPromise extends Promise<VoteBucket>, Fragmentable {
  voteBucketId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  voteCount: () => Promise<Int>;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface VoteBucketSubscription
  extends Promise<AsyncIterator<VoteBucket>>,
    Fragmentable {
  voteBucketId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  voteCount: () => Promise<AsyncIterator<Int>>;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface VoteBucketNullablePromise
  extends Promise<VoteBucket | null>,
    Fragmentable {
  voteBucketId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  voteCount: () => Promise<Int>;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NVoid {
  voidId: ID_Output;
  createdAt: DateTimeOutput;
  voidGeohash: String;
}

export interface NVoidPromise extends Promise<NVoid>, Fragmentable {
  voidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  voidGeohash: () => Promise<String>;
  shouts: <T = FragmentableArray<ShoutInVoid>>(args?: {
    where?: ShoutInVoidWhereInput;
    orderBy?: ShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  echos: <T = FragmentableArray<EchoOfShoutInVoid>>(args?: {
    where?: EchoOfShoutInVoidWhereInput;
    orderBy?: EchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NVoidSubscription
  extends Promise<AsyncIterator<NVoid>>,
    Fragmentable {
  voidId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = UserSubscription>() => T;
  voidGeohash: () => Promise<AsyncIterator<String>>;
  shouts: <T = Promise<AsyncIterator<ShoutInVoidSubscription>>>(args?: {
    where?: ShoutInVoidWhereInput;
    orderBy?: ShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  echos: <T = Promise<AsyncIterator<EchoOfShoutInVoidSubscription>>>(args?: {
    where?: EchoOfShoutInVoidWhereInput;
    orderBy?: EchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NVoidNullablePromise
  extends Promise<NVoid | null>,
    Fragmentable {
  voidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  voidGeohash: () => Promise<String>;
  shouts: <T = FragmentableArray<ShoutInVoid>>(args?: {
    where?: ShoutInVoidWhereInput;
    orderBy?: ShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  echos: <T = FragmentableArray<EchoOfShoutInVoid>>(args?: {
    where?: EchoOfShoutInVoidWhereInput;
    orderBy?: EchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface VotePreviousValues {
  voteId: ID_Output;
  updatedAt: DateTimeOutput;
  isUpvote: Boolean;
  uniqueHash: String;
}

export interface VotePreviousValuesPromise
  extends Promise<VotePreviousValues>,
    Fragmentable {
  voteId: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  isUpvote: () => Promise<Boolean>;
  uniqueHash: () => Promise<String>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValues>>,
    Fragmentable {
  voteId: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isUpvote: () => Promise<AsyncIterator<Boolean>>;
  uniqueHash: () => Promise<AsyncIterator<String>>;
}

export interface ContentEdge {
  node: Content;
  cursor: String;
}

export interface ContentEdgePromise extends Promise<ContentEdge>, Fragmentable {
  node: <T = ContentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContentEdgeSubscription
  extends Promise<AsyncIterator<ContentEdge>>,
    Fragmentable {
  node: <T = ContentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVoteBucket {
  count: Int;
}

export interface AggregateVoteBucketPromise
  extends Promise<AggregateVoteBucket>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteBucketSubscription
  extends Promise<AsyncIterator<AggregateVoteBucket>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VoteBucketConnection {
  pageInfo: PageInfo;
  edges: VoteBucketEdge[];
}

export interface VoteBucketConnectionPromise
  extends Promise<VoteBucketConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoteBucketEdge>>() => T;
  aggregate: <T = AggregateVoteBucketPromise>() => T;
}

export interface VoteBucketConnectionSubscription
  extends Promise<AsyncIterator<VoteBucketConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteBucketEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteBucketSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVote {
  count: Int;
}

export interface AggregateVotePromise
  extends Promise<AggregateVote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Content {
  contentId: ID_Output;
  createdAt: DateTimeOutput;
  message: String;
}

export interface ContentPromise extends Promise<Content>, Fragmentable {
  contentId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  message: () => Promise<String>;
}

export interface ContentSubscription
  extends Promise<AsyncIterator<Content>>,
    Fragmentable {
  contentId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = UserSubscription>() => T;
  message: () => Promise<AsyncIterator<String>>;
}

export interface ContentNullablePromise
  extends Promise<Content | null>,
    Fragmentable {
  contentId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  message: () => Promise<String>;
}

export interface VoteConnection {
  pageInfo: PageInfo;
  edges: VoteEdge[];
}

export interface VoteConnectionPromise
  extends Promise<VoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoteEdge>>() => T;
  aggregate: <T = AggregateVotePromise>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

export interface ContentSubscriptionPayload {
  mutation: MutationType;
  node: Content;
  updatedFields: String[];
  previousValues: ContentPreviousValues;
}

export interface ContentSubscriptionPayloadPromise
  extends Promise<ContentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContentPreviousValuesPromise>() => T;
}

export interface ContentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContentPreviousValuesSubscription>() => T;
}

export interface UserSavedVoidEdge {
  node: UserSavedVoid;
  cursor: String;
}

export interface UserSavedVoidEdgePromise
  extends Promise<UserSavedVoidEdge>,
    Fragmentable {
  node: <T = UserSavedVoidPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserSavedVoidEdgeSubscription
  extends Promise<AsyncIterator<UserSavedVoidEdge>>,
    Fragmentable {
  node: <T = UserSavedVoidSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ContentPreviousValues {
  contentId: ID_Output;
  createdAt: DateTimeOutput;
  message: String;
}

export interface ContentPreviousValuesPromise
  extends Promise<ContentPreviousValues>,
    Fragmentable {
  contentId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  message: () => Promise<String>;
}

export interface ContentPreviousValuesSubscription
  extends Promise<AsyncIterator<ContentPreviousValues>>,
    Fragmentable {
  contentId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  message: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserLocation {
  count: Int;
}

export interface AggregateUserLocationPromise
  extends Promise<AggregateUserLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserLocationSubscription
  extends Promise<AsyncIterator<AggregateUserLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ContentConnection {
  pageInfo: PageInfo;
  edges: ContentEdge[];
}

export interface ContentConnectionPromise
  extends Promise<ContentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContentEdge>>() => T;
  aggregate: <T = AggregateContentPromise>() => T;
}

export interface ContentConnectionSubscription
  extends Promise<AsyncIterator<ContentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContentSubscription>() => T;
}

export interface UserLocationConnection {
  pageInfo: PageInfo;
  edges: UserLocationEdge[];
}

export interface UserLocationConnectionPromise
  extends Promise<UserLocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserLocationEdge>>() => T;
  aggregate: <T = AggregateUserLocationPromise>() => T;
}

export interface UserLocationConnectionSubscription
  extends Promise<AsyncIterator<UserLocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserLocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserLocationSubscription>() => T;
}

export interface EchoOfShoutInVoidSubscriptionPayload {
  mutation: MutationType;
  node: EchoOfShoutInVoid;
  updatedFields: String[];
  previousValues: EchoOfShoutInVoidPreviousValues;
}

export interface EchoOfShoutInVoidSubscriptionPayloadPromise
  extends Promise<EchoOfShoutInVoidSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EchoOfShoutInVoidPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EchoOfShoutInVoidPreviousValuesPromise>() => T;
}

export interface EchoOfShoutInVoidSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EchoOfShoutInVoidSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EchoOfShoutInVoidSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EchoOfShoutInVoidPreviousValuesSubscription>() => T;
}

export interface UserActivatedEchoOfShoutEdge {
  node: UserActivatedEchoOfShout;
  cursor: String;
}

export interface UserActivatedEchoOfShoutEdgePromise
  extends Promise<UserActivatedEchoOfShoutEdge>,
    Fragmentable {
  node: <T = UserActivatedEchoOfShoutPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserActivatedEchoOfShoutEdgeSubscription
  extends Promise<AsyncIterator<UserActivatedEchoOfShoutEdge>>,
    Fragmentable {
  node: <T = UserActivatedEchoOfShoutSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EchoOfShoutInVoidPreviousValues {
  echoOfShoutInVoidId: ID_Output;
  createdAt: DateTimeOutput;
  originalShoutVoidGeohash: String;
}

export interface EchoOfShoutInVoidPreviousValuesPromise
  extends Promise<EchoOfShoutInVoidPreviousValues>,
    Fragmentable {
  echoOfShoutInVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  originalShoutVoidGeohash: () => Promise<String>;
}

export interface EchoOfShoutInVoidPreviousValuesSubscription
  extends Promise<AsyncIterator<EchoOfShoutInVoidPreviousValues>>,
    Fragmentable {
  echoOfShoutInVoidId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  originalShoutVoidGeohash: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserActivatedEchoOfShout {
  userActivatedEchoOfShoutId: ID_Output;
  createdAt: DateTimeOutput;
  originalShoutVoidGeohash: String;
}

export interface UserActivatedEchoOfShoutPromise
  extends Promise<UserActivatedEchoOfShout>,
    Fragmentable {
  userActivatedEchoOfShoutId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  originalShoutContent: <T = ContentPromise>() => T;
  originalShoutVoidGeohash: () => Promise<String>;
  originalEchoOfShoutInVoid: <T = EchoOfShoutInVoidPromise>() => T;
}

export interface UserActivatedEchoOfShoutSubscription
  extends Promise<AsyncIterator<UserActivatedEchoOfShout>>,
    Fragmentable {
  userActivatedEchoOfShoutId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = UserSubscription>() => T;
  originalShoutContent: <T = ContentSubscription>() => T;
  originalShoutVoidGeohash: () => Promise<AsyncIterator<String>>;
  originalEchoOfShoutInVoid: <T = EchoOfShoutInVoidSubscription>() => T;
}

export interface UserActivatedEchoOfShoutNullablePromise
  extends Promise<UserActivatedEchoOfShout | null>,
    Fragmentable {
  userActivatedEchoOfShoutId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  originalShoutContent: <T = ContentPromise>() => T;
  originalShoutVoidGeohash: () => Promise<String>;
  originalEchoOfShoutInVoid: <T = EchoOfShoutInVoidPromise>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface NVoidSubscriptionPayload {
  mutation: MutationType;
  node: NVoid;
  updatedFields: String[];
  previousValues: NVoidPreviousValues;
}

export interface NVoidSubscriptionPayloadPromise
  extends Promise<NVoidSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NVoidPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NVoidPreviousValuesPromise>() => T;
}

export interface NVoidSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NVoidSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NVoidSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NVoidPreviousValuesSubscription>() => T;
}

export interface AggregateShoutInVoid {
  count: Int;
}

export interface AggregateShoutInVoidPromise
  extends Promise<AggregateShoutInVoid>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateShoutInVoidSubscription
  extends Promise<AsyncIterator<AggregateShoutInVoid>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NVoidPreviousValues {
  voidId: ID_Output;
  createdAt: DateTimeOutput;
  voidGeohash: String;
}

export interface NVoidPreviousValuesPromise
  extends Promise<NVoidPreviousValues>,
    Fragmentable {
  voidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  voidGeohash: () => Promise<String>;
}

export interface NVoidPreviousValuesSubscription
  extends Promise<AsyncIterator<NVoidPreviousValues>>,
    Fragmentable {
  voidId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  voidGeohash: () => Promise<AsyncIterator<String>>;
}

export interface ShoutInVoidConnection {
  pageInfo: PageInfo;
  edges: ShoutInVoidEdge[];
}

export interface ShoutInVoidConnectionPromise
  extends Promise<ShoutInVoidConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ShoutInVoidEdge>>() => T;
  aggregate: <T = AggregateShoutInVoidPromise>() => T;
}

export interface ShoutInVoidConnectionSubscription
  extends Promise<AsyncIterator<ShoutInVoidConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ShoutInVoidEdgeSubscription>>>() => T;
  aggregate: <T = AggregateShoutInVoidSubscription>() => T;
}

export interface VoteSubscriptionPayload {
  mutation: MutationType;
  node: Vote;
  updatedFields: String[];
  previousValues: VotePreviousValues;
}

export interface VoteSubscriptionPayloadPromise
  extends Promise<VoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValuesPromise>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface ReplyToShoutInVoidEdge {
  node: ReplyToShoutInVoid;
  cursor: String;
}

export interface ReplyToShoutInVoidEdgePromise
  extends Promise<ReplyToShoutInVoidEdge>,
    Fragmentable {
  node: <T = ReplyToShoutInVoidPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReplyToShoutInVoidEdgeSubscription
  extends Promise<AsyncIterator<ReplyToShoutInVoidEdge>>,
    Fragmentable {
  node: <T = ReplyToShoutInVoidSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ReplyToEchoOfShoutInVoidSubscriptionPayload {
  mutation: MutationType;
  node: ReplyToEchoOfShoutInVoid;
  updatedFields: String[];
  previousValues: ReplyToEchoOfShoutInVoidPreviousValues;
}

export interface ReplyToEchoOfShoutInVoidSubscriptionPayloadPromise
  extends Promise<ReplyToEchoOfShoutInVoidSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReplyToEchoOfShoutInVoidPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReplyToEchoOfShoutInVoidPreviousValuesPromise>() => T;
}

export interface ReplyToEchoOfShoutInVoidSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReplyToEchoOfShoutInVoidSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReplyToEchoOfShoutInVoidSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ReplyToEchoOfShoutInVoidPreviousValuesSubscription
  >() => T;
}

export interface AggregateReplyToEchoOfShoutInVoid {
  count: Int;
}

export interface AggregateReplyToEchoOfShoutInVoidPromise
  extends Promise<AggregateReplyToEchoOfShoutInVoid>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReplyToEchoOfShoutInVoidSubscription
  extends Promise<AsyncIterator<AggregateReplyToEchoOfShoutInVoid>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReplyToEchoOfShoutInVoidPreviousValues {
  replyToEchoOfShoutInVoidId: ID_Output;
  createdAt: DateTimeOutput;
}

export interface ReplyToEchoOfShoutInVoidPreviousValuesPromise
  extends Promise<ReplyToEchoOfShoutInVoidPreviousValues>,
    Fragmentable {
  replyToEchoOfShoutInVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ReplyToEchoOfShoutInVoidPreviousValuesSubscription
  extends Promise<AsyncIterator<ReplyToEchoOfShoutInVoidPreviousValues>>,
    Fragmentable {
  replyToEchoOfShoutInVoidId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReplyToEchoOfShoutInVoidConnection {
  pageInfo: PageInfo;
  edges: ReplyToEchoOfShoutInVoidEdge[];
}

export interface ReplyToEchoOfShoutInVoidConnectionPromise
  extends Promise<ReplyToEchoOfShoutInVoidConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReplyToEchoOfShoutInVoidEdge>>() => T;
  aggregate: <T = AggregateReplyToEchoOfShoutInVoidPromise>() => T;
}

export interface ReplyToEchoOfShoutInVoidConnectionSubscription
  extends Promise<AsyncIterator<ReplyToEchoOfShoutInVoidConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ReplyToEchoOfShoutInVoidEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateReplyToEchoOfShoutInVoidSubscription>() => T;
}

export interface UserSavedVoid {
  userSavedVoidId: ID_Output;
  createdAt: DateTimeOutput;
  originalVoidGeohash: String;
}

export interface UserSavedVoidPromise
  extends Promise<UserSavedVoid>,
    Fragmentable {
  userSavedVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  originalVoidGeohash: () => Promise<String>;
}

export interface UserSavedVoidSubscription
  extends Promise<AsyncIterator<UserSavedVoid>>,
    Fragmentable {
  userSavedVoidId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = UserSubscription>() => T;
  originalVoidGeohash: () => Promise<AsyncIterator<String>>;
}

export interface UserSavedVoidNullablePromise
  extends Promise<UserSavedVoid | null>,
    Fragmentable {
  userSavedVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  originalVoidGeohash: () => Promise<String>;
}

export interface NVoidEdge {
  node: NVoid;
  cursor: String;
}

export interface NVoidEdgePromise extends Promise<NVoidEdge>, Fragmentable {
  node: <T = NVoidPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NVoidEdgeSubscription
  extends Promise<AsyncIterator<NVoidEdge>>,
    Fragmentable {
  node: <T = NVoidSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ReplyToShoutInVoidSubscriptionPayload {
  mutation: MutationType;
  node: ReplyToShoutInVoid;
  updatedFields: String[];
  previousValues: ReplyToShoutInVoidPreviousValues;
}

export interface ReplyToShoutInVoidSubscriptionPayloadPromise
  extends Promise<ReplyToShoutInVoidSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReplyToShoutInVoidPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReplyToShoutInVoidPreviousValuesPromise>() => T;
}

export interface ReplyToShoutInVoidSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReplyToShoutInVoidSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReplyToShoutInVoidSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReplyToShoutInVoidPreviousValuesSubscription>() => T;
}

export interface AggregateEchoOfShoutInVoid {
  count: Int;
}

export interface AggregateEchoOfShoutInVoidPromise
  extends Promise<AggregateEchoOfShoutInVoid>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEchoOfShoutInVoidSubscription
  extends Promise<AsyncIterator<AggregateEchoOfShoutInVoid>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReplyToShoutInVoidPreviousValues {
  replyToShoutInVoidId: ID_Output;
  createdAt: DateTimeOutput;
}

export interface ReplyToShoutInVoidPreviousValuesPromise
  extends Promise<ReplyToShoutInVoidPreviousValues>,
    Fragmentable {
  replyToShoutInVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ReplyToShoutInVoidPreviousValuesSubscription
  extends Promise<AsyncIterator<ReplyToShoutInVoidPreviousValues>>,
    Fragmentable {
  replyToShoutInVoidId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface VoteBucketEdge {
  node: VoteBucket;
  cursor: String;
}

export interface VoteBucketEdgePromise
  extends Promise<VoteBucketEdge>,
    Fragmentable {
  node: <T = VoteBucketPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoteBucketEdgeSubscription
  extends Promise<AsyncIterator<VoteBucketEdge>>,
    Fragmentable {
  node: <T = VoteBucketSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserLocation {
  userLocationId: ID_Output;
  userGeohash: String;
  createdAt: DateTimeOutput;
}

export interface UserLocationPromise
  extends Promise<UserLocation>,
    Fragmentable {
  userLocationId: () => Promise<ID_Output>;
  userGeohash: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
}

export interface UserLocationSubscription
  extends Promise<AsyncIterator<UserLocation>>,
    Fragmentable {
  userLocationId: () => Promise<AsyncIterator<ID_Output>>;
  userGeohash: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = UserSubscription>() => T;
}

export interface UserLocationNullablePromise
  extends Promise<UserLocation | null>,
    Fragmentable {
  userLocationId: () => Promise<ID_Output>;
  userGeohash: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
}

export interface VoteEdge {
  node: Vote;
  cursor: String;
}

export interface VoteEdgePromise extends Promise<VoteEdge>, Fragmentable {
  node: <T = VotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdge>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ShoutInVoidSubscriptionPayload {
  mutation: MutationType;
  node: ShoutInVoid;
  updatedFields: String[];
  previousValues: ShoutInVoidPreviousValues;
}

export interface ShoutInVoidSubscriptionPayloadPromise
  extends Promise<ShoutInVoidSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ShoutInVoidPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ShoutInVoidPreviousValuesPromise>() => T;
}

export interface ShoutInVoidSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ShoutInVoidSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ShoutInVoidSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ShoutInVoidPreviousValuesSubscription>() => T;
}

export interface UserSavedVoidConnection {
  pageInfo: PageInfo;
  edges: UserSavedVoidEdge[];
}

export interface UserSavedVoidConnectionPromise
  extends Promise<UserSavedVoidConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserSavedVoidEdge>>() => T;
  aggregate: <T = AggregateUserSavedVoidPromise>() => T;
}

export interface UserSavedVoidConnectionSubscription
  extends Promise<AsyncIterator<UserSavedVoidConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserSavedVoidEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSavedVoidSubscription>() => T;
}

export interface ShoutInVoidPreviousValues {
  shoutInVoidId: ID_Output;
  createdAt: DateTimeOutput;
  contentMessageHash?: String;
}

export interface ShoutInVoidPreviousValuesPromise
  extends Promise<ShoutInVoidPreviousValues>,
    Fragmentable {
  shoutInVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  contentMessageHash: () => Promise<String>;
}

export interface ShoutInVoidPreviousValuesSubscription
  extends Promise<AsyncIterator<ShoutInVoidPreviousValues>>,
    Fragmentable {
  shoutInVoidId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  contentMessageHash: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserActivatedEchoOfShout {
  count: Int;
}

export interface AggregateUserActivatedEchoOfShoutPromise
  extends Promise<AggregateUserActivatedEchoOfShout>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserActivatedEchoOfShoutSubscription
  extends Promise<AsyncIterator<AggregateUserActivatedEchoOfShout>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReplyToShoutInVoid {
  replyToShoutInVoidId: ID_Output;
  createdAt: DateTimeOutput;
}

export interface ReplyToShoutInVoidPromise
  extends Promise<ReplyToShoutInVoid>,
    Fragmentable {
  replyToShoutInVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  content: <T = ContentPromise>() => T;
  voteBucket: <T = VoteBucketPromise>() => T;
  originalShoutInVoid: <T = ShoutInVoidPromise>() => T;
}

export interface ReplyToShoutInVoidSubscription
  extends Promise<AsyncIterator<ReplyToShoutInVoid>>,
    Fragmentable {
  replyToShoutInVoidId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = UserSubscription>() => T;
  content: <T = ContentSubscription>() => T;
  voteBucket: <T = VoteBucketSubscription>() => T;
  originalShoutInVoid: <T = ShoutInVoidSubscription>() => T;
}

export interface ReplyToShoutInVoidNullablePromise
  extends Promise<ReplyToShoutInVoid | null>,
    Fragmentable {
  replyToShoutInVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  content: <T = ContentPromise>() => T;
  voteBucket: <T = VoteBucketPromise>() => T;
  originalShoutInVoid: <T = ShoutInVoidPromise>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ShoutInVoidEdge {
  node: ShoutInVoid;
  cursor: String;
}

export interface ShoutInVoidEdgePromise
  extends Promise<ShoutInVoidEdge>,
    Fragmentable {
  node: <T = ShoutInVoidPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ShoutInVoidEdgeSubscription
  extends Promise<AsyncIterator<ShoutInVoidEdge>>,
    Fragmentable {
  node: <T = ShoutInVoidSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  userId: ID_Output;
  createdAt: DateTimeOutput;
  username: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  userId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  userId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface ReplyToShoutInVoidConnection {
  pageInfo: PageInfo;
  edges: ReplyToShoutInVoidEdge[];
}

export interface ReplyToShoutInVoidConnectionPromise
  extends Promise<ReplyToShoutInVoidConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReplyToShoutInVoidEdge>>() => T;
  aggregate: <T = AggregateReplyToShoutInVoidPromise>() => T;
}

export interface ReplyToShoutInVoidConnectionSubscription
  extends Promise<AsyncIterator<ReplyToShoutInVoidConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ReplyToShoutInVoidEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateReplyToShoutInVoidSubscription>() => T;
}

export interface ReplyToEchoOfShoutInVoid {
  replyToEchoOfShoutInVoidId: ID_Output;
  createdAt: DateTimeOutput;
}

export interface ReplyToEchoOfShoutInVoidPromise
  extends Promise<ReplyToEchoOfShoutInVoid>,
    Fragmentable {
  replyToEchoOfShoutInVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  content: <T = ContentPromise>() => T;
  voteBucket: <T = VoteBucketPromise>() => T;
  originalEchoOfShoutInVoid: <T = EchoOfShoutInVoidPromise>() => T;
}

export interface ReplyToEchoOfShoutInVoidSubscription
  extends Promise<AsyncIterator<ReplyToEchoOfShoutInVoid>>,
    Fragmentable {
  replyToEchoOfShoutInVoidId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = UserSubscription>() => T;
  content: <T = ContentSubscription>() => T;
  voteBucket: <T = VoteBucketSubscription>() => T;
  originalEchoOfShoutInVoid: <T = EchoOfShoutInVoidSubscription>() => T;
}

export interface ReplyToEchoOfShoutInVoidNullablePromise
  extends Promise<ReplyToEchoOfShoutInVoid | null>,
    Fragmentable {
  replyToEchoOfShoutInVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  content: <T = ContentPromise>() => T;
  voteBucket: <T = VoteBucketPromise>() => T;
  originalEchoOfShoutInVoid: <T = EchoOfShoutInVoidPromise>() => T;
}

export interface AggregateNVoid {
  count: Int;
}

export interface AggregateNVoidPromise
  extends Promise<AggregateNVoid>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNVoidSubscription
  extends Promise<AsyncIterator<AggregateNVoid>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserActivatedEchoOfShoutSubscriptionPayload {
  mutation: MutationType;
  node: UserActivatedEchoOfShout;
  updatedFields: String[];
  previousValues: UserActivatedEchoOfShoutPreviousValues;
}

export interface UserActivatedEchoOfShoutSubscriptionPayloadPromise
  extends Promise<UserActivatedEchoOfShoutSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserActivatedEchoOfShoutPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserActivatedEchoOfShoutPreviousValuesPromise>() => T;
}

export interface UserActivatedEchoOfShoutSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserActivatedEchoOfShoutSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserActivatedEchoOfShoutSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = UserActivatedEchoOfShoutPreviousValuesSubscription
  >() => T;
}

export interface EchoOfShoutInVoidEdge {
  node: EchoOfShoutInVoid;
  cursor: String;
}

export interface EchoOfShoutInVoidEdgePromise
  extends Promise<EchoOfShoutInVoidEdge>,
    Fragmentable {
  node: <T = EchoOfShoutInVoidPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EchoOfShoutInVoidEdgeSubscription
  extends Promise<AsyncIterator<EchoOfShoutInVoidEdge>>,
    Fragmentable {
  node: <T = EchoOfShoutInVoidSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserActivatedEchoOfShoutPreviousValues {
  userActivatedEchoOfShoutId: ID_Output;
  createdAt: DateTimeOutput;
  originalShoutVoidGeohash: String;
}

export interface UserActivatedEchoOfShoutPreviousValuesPromise
  extends Promise<UserActivatedEchoOfShoutPreviousValues>,
    Fragmentable {
  userActivatedEchoOfShoutId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  originalShoutVoidGeohash: () => Promise<String>;
}

export interface UserActivatedEchoOfShoutPreviousValuesSubscription
  extends Promise<AsyncIterator<UserActivatedEchoOfShoutPreviousValues>>,
    Fragmentable {
  userActivatedEchoOfShoutId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  originalShoutVoidGeohash: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserSavedVoid {
  count: Int;
}

export interface AggregateUserSavedVoidPromise
  extends Promise<AggregateUserSavedVoid>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSavedVoidSubscription
  extends Promise<AsyncIterator<AggregateUserSavedVoid>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EchoOfShoutInVoid {
  echoOfShoutInVoidId: ID_Output;
  createdAt: DateTimeOutput;
  originalShoutVoidGeohash: String;
}

export interface EchoOfShoutInVoidPromise
  extends Promise<EchoOfShoutInVoid>,
    Fragmentable {
  echoOfShoutInVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  originalShoutContent: <T = ContentPromise>() => T;
  originalShoutVoidGeohash: () => Promise<String>;
  originalShoutInVoid: <T = ShoutInVoidPromise>() => T;
  originalEchoOfShoutInVoid: <T = EchoOfShoutInVoidPromise>() => T;
  nVoid: <T = NVoidPromise>() => T;
  voteBucket: <T = VoteBucketPromise>() => T;
  echosOfEchos: <T = FragmentableArray<EchoOfShoutInVoid>>(args?: {
    where?: EchoOfShoutInVoidWhereInput;
    orderBy?: EchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  replies: <T = FragmentableArray<ReplyToEchoOfShoutInVoid>>(args?: {
    where?: ReplyToEchoOfShoutInVoidWhereInput;
    orderBy?: ReplyToEchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EchoOfShoutInVoidSubscription
  extends Promise<AsyncIterator<EchoOfShoutInVoid>>,
    Fragmentable {
  echoOfShoutInVoidId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = UserSubscription>() => T;
  originalShoutContent: <T = ContentSubscription>() => T;
  originalShoutVoidGeohash: () => Promise<AsyncIterator<String>>;
  originalShoutInVoid: <T = ShoutInVoidSubscription>() => T;
  originalEchoOfShoutInVoid: <T = EchoOfShoutInVoidSubscription>() => T;
  nVoid: <T = NVoidSubscription>() => T;
  voteBucket: <T = VoteBucketSubscription>() => T;
  echosOfEchos: <
    T = Promise<AsyncIterator<EchoOfShoutInVoidSubscription>>
  >(args?: {
    where?: EchoOfShoutInVoidWhereInput;
    orderBy?: EchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  replies: <
    T = Promise<AsyncIterator<ReplyToEchoOfShoutInVoidSubscription>>
  >(args?: {
    where?: ReplyToEchoOfShoutInVoidWhereInput;
    orderBy?: ReplyToEchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EchoOfShoutInVoidNullablePromise
  extends Promise<EchoOfShoutInVoid | null>,
    Fragmentable {
  echoOfShoutInVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  originalShoutContent: <T = ContentPromise>() => T;
  originalShoutVoidGeohash: () => Promise<String>;
  originalShoutInVoid: <T = ShoutInVoidPromise>() => T;
  originalEchoOfShoutInVoid: <T = EchoOfShoutInVoidPromise>() => T;
  nVoid: <T = NVoidPromise>() => T;
  voteBucket: <T = VoteBucketPromise>() => T;
  echosOfEchos: <T = FragmentableArray<EchoOfShoutInVoid>>(args?: {
    where?: EchoOfShoutInVoidWhereInput;
    orderBy?: EchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  replies: <T = FragmentableArray<ReplyToEchoOfShoutInVoid>>(args?: {
    where?: ReplyToEchoOfShoutInVoidWhereInput;
    orderBy?: ReplyToEchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserActivatedEchoOfShoutConnection {
  pageInfo: PageInfo;
  edges: UserActivatedEchoOfShoutEdge[];
}

export interface UserActivatedEchoOfShoutConnectionPromise
  extends Promise<UserActivatedEchoOfShoutConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserActivatedEchoOfShoutEdge>>() => T;
  aggregate: <T = AggregateUserActivatedEchoOfShoutPromise>() => T;
}

export interface UserActivatedEchoOfShoutConnectionSubscription
  extends Promise<AsyncIterator<UserActivatedEchoOfShoutConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<UserActivatedEchoOfShoutEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateUserActivatedEchoOfShoutSubscription>() => T;
}

export interface UserLocationSubscriptionPayload {
  mutation: MutationType;
  node: UserLocation;
  updatedFields: String[];
  previousValues: UserLocationPreviousValues;
}

export interface UserLocationSubscriptionPayloadPromise
  extends Promise<UserLocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserLocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserLocationPreviousValuesPromise>() => T;
}

export interface UserLocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserLocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserLocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserLocationPreviousValuesSubscription>() => T;
}

export interface AggregateReplyToShoutInVoid {
  count: Int;
}

export interface AggregateReplyToShoutInVoidPromise
  extends Promise<AggregateReplyToShoutInVoid>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReplyToShoutInVoidSubscription
  extends Promise<AsyncIterator<AggregateReplyToShoutInVoid>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NVoidConnection {
  pageInfo: PageInfo;
  edges: NVoidEdge[];
}

export interface NVoidConnectionPromise
  extends Promise<NVoidConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NVoidEdge>>() => T;
  aggregate: <T = AggregateNVoidPromise>() => T;
}

export interface NVoidConnectionSubscription
  extends Promise<AsyncIterator<NVoidConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NVoidEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNVoidSubscription>() => T;
}

export interface UserSavedVoidPreviousValues {
  userSavedVoidId: ID_Output;
  createdAt: DateTimeOutput;
  originalVoidGeohash: String;
}

export interface UserSavedVoidPreviousValuesPromise
  extends Promise<UserSavedVoidPreviousValues>,
    Fragmentable {
  userSavedVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  originalVoidGeohash: () => Promise<String>;
}

export interface UserSavedVoidPreviousValuesSubscription
  extends Promise<AsyncIterator<UserSavedVoidPreviousValues>>,
    Fragmentable {
  userSavedVoidId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  originalVoidGeohash: () => Promise<AsyncIterator<String>>;
}

export interface UserSavedVoidSubscriptionPayload {
  mutation: MutationType;
  node: UserSavedVoid;
  updatedFields: String[];
  previousValues: UserSavedVoidPreviousValues;
}

export interface UserSavedVoidSubscriptionPayloadPromise
  extends Promise<UserSavedVoidSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserSavedVoidPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserSavedVoidPreviousValuesPromise>() => T;
}

export interface UserSavedVoidSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSavedVoidSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSavedVoidSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserSavedVoidPreviousValuesSubscription>() => T;
}

export interface ShoutInVoid {
  shoutInVoidId: ID_Output;
  createdAt: DateTimeOutput;
  contentMessageHash?: String;
}

export interface ShoutInVoidPromise extends Promise<ShoutInVoid>, Fragmentable {
  shoutInVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  content: <T = ContentPromise>() => T;
  contentMessageHash: () => Promise<String>;
  nVoid: <T = NVoidPromise>() => T;
  voteBucket: <T = VoteBucketPromise>() => T;
  echos: <T = FragmentableArray<EchoOfShoutInVoid>>(args?: {
    where?: EchoOfShoutInVoidWhereInput;
    orderBy?: EchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  replies: <T = FragmentableArray<ReplyToShoutInVoid>>(args?: {
    where?: ReplyToShoutInVoidWhereInput;
    orderBy?: ReplyToShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ShoutInVoidSubscription
  extends Promise<AsyncIterator<ShoutInVoid>>,
    Fragmentable {
  shoutInVoidId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = UserSubscription>() => T;
  content: <T = ContentSubscription>() => T;
  contentMessageHash: () => Promise<AsyncIterator<String>>;
  nVoid: <T = NVoidSubscription>() => T;
  voteBucket: <T = VoteBucketSubscription>() => T;
  echos: <T = Promise<AsyncIterator<EchoOfShoutInVoidSubscription>>>(args?: {
    where?: EchoOfShoutInVoidWhereInput;
    orderBy?: EchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  replies: <T = Promise<AsyncIterator<ReplyToShoutInVoidSubscription>>>(args?: {
    where?: ReplyToShoutInVoidWhereInput;
    orderBy?: ReplyToShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ShoutInVoidNullablePromise
  extends Promise<ShoutInVoid | null>,
    Fragmentable {
  shoutInVoidId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  content: <T = ContentPromise>() => T;
  contentMessageHash: () => Promise<String>;
  nVoid: <T = NVoidPromise>() => T;
  voteBucket: <T = VoteBucketPromise>() => T;
  echos: <T = FragmentableArray<EchoOfShoutInVoid>>(args?: {
    where?: EchoOfShoutInVoidWhereInput;
    orderBy?: EchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  replies: <T = FragmentableArray<ReplyToShoutInVoid>>(args?: {
    where?: ReplyToShoutInVoidWhereInput;
    orderBy?: ReplyToShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserLocationPreviousValues {
  userLocationId: ID_Output;
  userGeohash: String;
  createdAt: DateTimeOutput;
}

export interface UserLocationPreviousValuesPromise
  extends Promise<UserLocationPreviousValues>,
    Fragmentable {
  userLocationId: () => Promise<ID_Output>;
  userGeohash: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserLocationPreviousValuesSubscription
  extends Promise<AsyncIterator<UserLocationPreviousValues>>,
    Fragmentable {
  userLocationId: () => Promise<AsyncIterator<ID_Output>>;
  userGeohash: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface VoteBucketSubscriptionPayload {
  mutation: MutationType;
  node: VoteBucket;
  updatedFields: String[];
  previousValues: VoteBucketPreviousValues;
}

export interface VoteBucketSubscriptionPayloadPromise
  extends Promise<VoteBucketSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VoteBucketPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VoteBucketPreviousValuesPromise>() => T;
}

export interface VoteBucketSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteBucketSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteBucketSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VoteBucketPreviousValuesSubscription>() => T;
}

export interface ReplyToEchoOfShoutInVoidEdge {
  node: ReplyToEchoOfShoutInVoid;
  cursor: String;
}

export interface ReplyToEchoOfShoutInVoidEdgePromise
  extends Promise<ReplyToEchoOfShoutInVoidEdge>,
    Fragmentable {
  node: <T = ReplyToEchoOfShoutInVoidPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReplyToEchoOfShoutInVoidEdgeSubscription
  extends Promise<AsyncIterator<ReplyToEchoOfShoutInVoidEdge>>,
    Fragmentable {
  node: <T = ReplyToEchoOfShoutInVoidSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  userId: ID_Output;
  createdAt: DateTimeOutput;
  username: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  userId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  lastLocation: <T = UserLocationPromise>() => T;
  locationHistory: <T = FragmentableArray<UserLocation>>(args?: {
    where?: UserLocationWhereInput;
    orderBy?: UserLocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdContent: <T = FragmentableArray<Content>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdVotes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdVoids: <T = FragmentableArray<NVoid>>(args?: {
    where?: NVoidWhereInput;
    orderBy?: NVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  savedVoids: <T = FragmentableArray<UserSavedVoid>>(args?: {
    where?: UserSavedVoidWhereInput;
    orderBy?: UserSavedVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdShoutsInVoids: <T = FragmentableArray<ShoutInVoid>>(args?: {
    where?: ShoutInVoidWhereInput;
    orderBy?: ShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  activatedEchosOfShouts: <
    T = FragmentableArray<UserActivatedEchoOfShout>
  >(args?: {
    where?: UserActivatedEchoOfShoutWhereInput;
    orderBy?: UserActivatedEchoOfShoutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdEchosOfShoutsInVoid: <
    T = FragmentableArray<EchoOfShoutInVoid>
  >(args?: {
    where?: EchoOfShoutInVoidWhereInput;
    orderBy?: EchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repliesToShoutsInVoid: <T = FragmentableArray<ReplyToShoutInVoid>>(args?: {
    where?: ReplyToShoutInVoidWhereInput;
    orderBy?: ReplyToShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repliesToEchosOfShoutsInVoid: <
    T = FragmentableArray<ReplyToEchoOfShoutInVoid>
  >(args?: {
    where?: ReplyToEchoOfShoutInVoidWhereInput;
    orderBy?: ReplyToEchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  userId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  lastLocation: <T = UserLocationSubscription>() => T;
  locationHistory: <
    T = Promise<AsyncIterator<UserLocationSubscription>>
  >(args?: {
    where?: UserLocationWhereInput;
    orderBy?: UserLocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdContent: <T = Promise<AsyncIterator<ContentSubscription>>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdVotes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdVoids: <T = Promise<AsyncIterator<NVoidSubscription>>>(args?: {
    where?: NVoidWhereInput;
    orderBy?: NVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  savedVoids: <T = Promise<AsyncIterator<UserSavedVoidSubscription>>>(args?: {
    where?: UserSavedVoidWhereInput;
    orderBy?: UserSavedVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdShoutsInVoids: <
    T = Promise<AsyncIterator<ShoutInVoidSubscription>>
  >(args?: {
    where?: ShoutInVoidWhereInput;
    orderBy?: ShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  activatedEchosOfShouts: <
    T = Promise<AsyncIterator<UserActivatedEchoOfShoutSubscription>>
  >(args?: {
    where?: UserActivatedEchoOfShoutWhereInput;
    orderBy?: UserActivatedEchoOfShoutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdEchosOfShoutsInVoid: <
    T = Promise<AsyncIterator<EchoOfShoutInVoidSubscription>>
  >(args?: {
    where?: EchoOfShoutInVoidWhereInput;
    orderBy?: EchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repliesToShoutsInVoid: <
    T = Promise<AsyncIterator<ReplyToShoutInVoidSubscription>>
  >(args?: {
    where?: ReplyToShoutInVoidWhereInput;
    orderBy?: ReplyToShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repliesToEchosOfShoutsInVoid: <
    T = Promise<AsyncIterator<ReplyToEchoOfShoutInVoidSubscription>>
  >(args?: {
    where?: ReplyToEchoOfShoutInVoidWhereInput;
    orderBy?: ReplyToEchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  userId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  lastLocation: <T = UserLocationPromise>() => T;
  locationHistory: <T = FragmentableArray<UserLocation>>(args?: {
    where?: UserLocationWhereInput;
    orderBy?: UserLocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdContent: <T = FragmentableArray<Content>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdVotes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdVoids: <T = FragmentableArray<NVoid>>(args?: {
    where?: NVoidWhereInput;
    orderBy?: NVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  savedVoids: <T = FragmentableArray<UserSavedVoid>>(args?: {
    where?: UserSavedVoidWhereInput;
    orderBy?: UserSavedVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdShoutsInVoids: <T = FragmentableArray<ShoutInVoid>>(args?: {
    where?: ShoutInVoidWhereInput;
    orderBy?: ShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  activatedEchosOfShouts: <
    T = FragmentableArray<UserActivatedEchoOfShout>
  >(args?: {
    where?: UserActivatedEchoOfShoutWhereInput;
    orderBy?: UserActivatedEchoOfShoutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdEchosOfShoutsInVoid: <
    T = FragmentableArray<EchoOfShoutInVoid>
  >(args?: {
    where?: EchoOfShoutInVoidWhereInput;
    orderBy?: EchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repliesToShoutsInVoid: <T = FragmentableArray<ReplyToShoutInVoid>>(args?: {
    where?: ReplyToShoutInVoidWhereInput;
    orderBy?: ReplyToShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repliesToEchosOfShoutsInVoid: <
    T = FragmentableArray<ReplyToEchoOfShoutInVoid>
  >(args?: {
    where?: ReplyToEchoOfShoutInVoidWhereInput;
    orderBy?: ReplyToEchoOfShoutInVoidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserLocationEdge {
  node: UserLocation;
  cursor: String;
}

export interface UserLocationEdgePromise
  extends Promise<UserLocationEdge>,
    Fragmentable {
  node: <T = UserLocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserLocationEdgeSubscription
  extends Promise<AsyncIterator<UserLocationEdge>>,
    Fragmentable {
  node: <T = UserLocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Content",
    embedded: false
  },
  {
    name: "VoteBucket",
    embedded: false
  },
  {
    name: "Vote",
    embedded: false
  },
  {
    name: "UserLocation",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "ShoutInVoid",
    embedded: false
  },
  {
    name: "ReplyToShoutInVoid",
    embedded: false
  },
  {
    name: "UserActivatedEchoOfShout",
    embedded: false
  },
  {
    name: "EchoOfShoutInVoid",
    embedded: false
  },
  {
    name: "ReplyToEchoOfShoutInVoid",
    embedded: false
  },
  {
    name: "NVoid",
    embedded: false
  },
  {
    name: "UserSavedVoid",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
