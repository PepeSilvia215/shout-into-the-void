module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateEcho {
  count: Int!
}

type AggregateShout {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVoid {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Echo {
  echoId: ID!
  void: Void!
  originalShout: Shout!
  createdAt: DateTime!
  createdBy: User!
  echoedBy: User!
}

type EchoConnection {
  pageInfo: PageInfo!
  edges: [EchoEdge]!
  aggregate: AggregateEcho!
}

input EchoCreateInput {
  echoId: ID
  void: VoidCreateOneWithoutEchosInput!
  originalShout: ShoutCreateOneWithoutEchosInput!
  createdBy: UserCreateOneWithoutEchoesInput!
  echoedBy: UserCreateOneWithoutEchoedShoutsInput!
}

input EchoCreateManyWithoutCreatedByInput {
  create: [EchoCreateWithoutCreatedByInput!]
  connect: [EchoWhereUniqueInput!]
}

input EchoCreateManyWithoutEchoedByInput {
  create: [EchoCreateWithoutEchoedByInput!]
  connect: [EchoWhereUniqueInput!]
}

input EchoCreateManyWithoutOriginalShoutInput {
  create: [EchoCreateWithoutOriginalShoutInput!]
  connect: [EchoWhereUniqueInput!]
}

input EchoCreateManyWithoutVoidInput {
  create: [EchoCreateWithoutVoidInput!]
  connect: [EchoWhereUniqueInput!]
}

input EchoCreateWithoutCreatedByInput {
  echoId: ID
  void: VoidCreateOneWithoutEchosInput!
  originalShout: ShoutCreateOneWithoutEchosInput!
  echoedBy: UserCreateOneWithoutEchoedShoutsInput!
}

input EchoCreateWithoutEchoedByInput {
  echoId: ID
  void: VoidCreateOneWithoutEchosInput!
  originalShout: ShoutCreateOneWithoutEchosInput!
  createdBy: UserCreateOneWithoutEchoesInput!
}

input EchoCreateWithoutOriginalShoutInput {
  echoId: ID
  void: VoidCreateOneWithoutEchosInput!
  createdBy: UserCreateOneWithoutEchoesInput!
  echoedBy: UserCreateOneWithoutEchoedShoutsInput!
}

input EchoCreateWithoutVoidInput {
  echoId: ID
  originalShout: ShoutCreateOneWithoutEchosInput!
  createdBy: UserCreateOneWithoutEchoesInput!
  echoedBy: UserCreateOneWithoutEchoedShoutsInput!
}

type EchoEdge {
  node: Echo!
  cursor: String!
}

enum EchoOrderByInput {
  echoId_ASC
  echoId_DESC
  createdAt_ASC
  createdAt_DESC
}

type EchoPreviousValues {
  echoId: ID!
  createdAt: DateTime!
}

input EchoScalarWhereInput {
  echoId: ID
  echoId_not: ID
  echoId_in: [ID!]
  echoId_not_in: [ID!]
  echoId_lt: ID
  echoId_lte: ID
  echoId_gt: ID
  echoId_gte: ID
  echoId_contains: ID
  echoId_not_contains: ID
  echoId_starts_with: ID
  echoId_not_starts_with: ID
  echoId_ends_with: ID
  echoId_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [EchoScalarWhereInput!]
  OR: [EchoScalarWhereInput!]
  NOT: [EchoScalarWhereInput!]
}

type EchoSubscriptionPayload {
  mutation: MutationType!
  node: Echo
  updatedFields: [String!]
  previousValues: EchoPreviousValues
}

input EchoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EchoWhereInput
  AND: [EchoSubscriptionWhereInput!]
  OR: [EchoSubscriptionWhereInput!]
  NOT: [EchoSubscriptionWhereInput!]
}

input EchoUpdateInput {
  void: VoidUpdateOneRequiredWithoutEchosInput
  originalShout: ShoutUpdateOneRequiredWithoutEchosInput
  createdBy: UserUpdateOneRequiredWithoutEchoesInput
  echoedBy: UserUpdateOneRequiredWithoutEchoedShoutsInput
}

input EchoUpdateManyWithoutCreatedByInput {
  create: [EchoCreateWithoutCreatedByInput!]
  delete: [EchoWhereUniqueInput!]
  connect: [EchoWhereUniqueInput!]
  set: [EchoWhereUniqueInput!]
  disconnect: [EchoWhereUniqueInput!]
  update: [EchoUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [EchoUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [EchoScalarWhereInput!]
}

input EchoUpdateManyWithoutEchoedByInput {
  create: [EchoCreateWithoutEchoedByInput!]
  delete: [EchoWhereUniqueInput!]
  connect: [EchoWhereUniqueInput!]
  set: [EchoWhereUniqueInput!]
  disconnect: [EchoWhereUniqueInput!]
  update: [EchoUpdateWithWhereUniqueWithoutEchoedByInput!]
  upsert: [EchoUpsertWithWhereUniqueWithoutEchoedByInput!]
  deleteMany: [EchoScalarWhereInput!]
}

input EchoUpdateManyWithoutOriginalShoutInput {
  create: [EchoCreateWithoutOriginalShoutInput!]
  delete: [EchoWhereUniqueInput!]
  connect: [EchoWhereUniqueInput!]
  set: [EchoWhereUniqueInput!]
  disconnect: [EchoWhereUniqueInput!]
  update: [EchoUpdateWithWhereUniqueWithoutOriginalShoutInput!]
  upsert: [EchoUpsertWithWhereUniqueWithoutOriginalShoutInput!]
  deleteMany: [EchoScalarWhereInput!]
}

input EchoUpdateManyWithoutVoidInput {
  create: [EchoCreateWithoutVoidInput!]
  delete: [EchoWhereUniqueInput!]
  connect: [EchoWhereUniqueInput!]
  set: [EchoWhereUniqueInput!]
  disconnect: [EchoWhereUniqueInput!]
  update: [EchoUpdateWithWhereUniqueWithoutVoidInput!]
  upsert: [EchoUpsertWithWhereUniqueWithoutVoidInput!]
  deleteMany: [EchoScalarWhereInput!]
}

input EchoUpdateWithoutCreatedByDataInput {
  void: VoidUpdateOneRequiredWithoutEchosInput
  originalShout: ShoutUpdateOneRequiredWithoutEchosInput
  echoedBy: UserUpdateOneRequiredWithoutEchoedShoutsInput
}

input EchoUpdateWithoutEchoedByDataInput {
  void: VoidUpdateOneRequiredWithoutEchosInput
  originalShout: ShoutUpdateOneRequiredWithoutEchosInput
  createdBy: UserUpdateOneRequiredWithoutEchoesInput
}

input EchoUpdateWithoutOriginalShoutDataInput {
  void: VoidUpdateOneRequiredWithoutEchosInput
  createdBy: UserUpdateOneRequiredWithoutEchoesInput
  echoedBy: UserUpdateOneRequiredWithoutEchoedShoutsInput
}

input EchoUpdateWithoutVoidDataInput {
  originalShout: ShoutUpdateOneRequiredWithoutEchosInput
  createdBy: UserUpdateOneRequiredWithoutEchoesInput
  echoedBy: UserUpdateOneRequiredWithoutEchoedShoutsInput
}

input EchoUpdateWithWhereUniqueWithoutCreatedByInput {
  where: EchoWhereUniqueInput!
  data: EchoUpdateWithoutCreatedByDataInput!
}

input EchoUpdateWithWhereUniqueWithoutEchoedByInput {
  where: EchoWhereUniqueInput!
  data: EchoUpdateWithoutEchoedByDataInput!
}

input EchoUpdateWithWhereUniqueWithoutOriginalShoutInput {
  where: EchoWhereUniqueInput!
  data: EchoUpdateWithoutOriginalShoutDataInput!
}

input EchoUpdateWithWhereUniqueWithoutVoidInput {
  where: EchoWhereUniqueInput!
  data: EchoUpdateWithoutVoidDataInput!
}

input EchoUpsertWithWhereUniqueWithoutCreatedByInput {
  where: EchoWhereUniqueInput!
  update: EchoUpdateWithoutCreatedByDataInput!
  create: EchoCreateWithoutCreatedByInput!
}

input EchoUpsertWithWhereUniqueWithoutEchoedByInput {
  where: EchoWhereUniqueInput!
  update: EchoUpdateWithoutEchoedByDataInput!
  create: EchoCreateWithoutEchoedByInput!
}

input EchoUpsertWithWhereUniqueWithoutOriginalShoutInput {
  where: EchoWhereUniqueInput!
  update: EchoUpdateWithoutOriginalShoutDataInput!
  create: EchoCreateWithoutOriginalShoutInput!
}

input EchoUpsertWithWhereUniqueWithoutVoidInput {
  where: EchoWhereUniqueInput!
  update: EchoUpdateWithoutVoidDataInput!
  create: EchoCreateWithoutVoidInput!
}

input EchoWhereInput {
  echoId: ID
  echoId_not: ID
  echoId_in: [ID!]
  echoId_not_in: [ID!]
  echoId_lt: ID
  echoId_lte: ID
  echoId_gt: ID
  echoId_gte: ID
  echoId_contains: ID
  echoId_not_contains: ID
  echoId_starts_with: ID
  echoId_not_starts_with: ID
  echoId_ends_with: ID
  echoId_not_ends_with: ID
  void: VoidWhereInput
  originalShout: ShoutWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdBy: UserWhereInput
  echoedBy: UserWhereInput
  AND: [EchoWhereInput!]
  OR: [EchoWhereInput!]
  NOT: [EchoWhereInput!]
}

input EchoWhereUniqueInput {
  echoId: ID
}

scalar Long

type Mutation {
  createEcho(data: EchoCreateInput!): Echo!
  updateEcho(data: EchoUpdateInput!, where: EchoWhereUniqueInput!): Echo
  upsertEcho(where: EchoWhereUniqueInput!, create: EchoCreateInput!, update: EchoUpdateInput!): Echo!
  deleteEcho(where: EchoWhereUniqueInput!): Echo
  deleteManyEchoes(where: EchoWhereInput): BatchPayload!
  createShout(data: ShoutCreateInput!): Shout!
  updateShout(data: ShoutUpdateInput!, where: ShoutWhereUniqueInput!): Shout
  updateManyShouts(data: ShoutUpdateManyMutationInput!, where: ShoutWhereInput): BatchPayload!
  upsertShout(where: ShoutWhereUniqueInput!, create: ShoutCreateInput!, update: ShoutUpdateInput!): Shout!
  deleteShout(where: ShoutWhereUniqueInput!): Shout
  deleteManyShouts(where: ShoutWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVoid(data: VoidCreateInput!): Void!
  updateVoid(data: VoidUpdateInput!, where: VoidWhereUniqueInput!): Void
  updateManyVoids(data: VoidUpdateManyMutationInput!, where: VoidWhereInput): BatchPayload!
  upsertVoid(where: VoidWhereUniqueInput!, create: VoidCreateInput!, update: VoidUpdateInput!): Void!
  deleteVoid(where: VoidWhereUniqueInput!): Void
  deleteManyVoids(where: VoidWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  echo(where: EchoWhereUniqueInput!): Echo
  echoes(where: EchoWhereInput, orderBy: EchoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Echo]!
  echoesConnection(where: EchoWhereInput, orderBy: EchoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EchoConnection!
  shout(where: ShoutWhereUniqueInput!): Shout
  shouts(where: ShoutWhereInput, orderBy: ShoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shout]!
  shoutsConnection(where: ShoutWhereInput, orderBy: ShoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShoutConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  void(where: VoidWhereUniqueInput!): Void
  voids(where: VoidWhereInput, orderBy: VoidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Void]!
  voidsConnection(where: VoidWhereInput, orderBy: VoidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoidConnection!
  node(id: ID!): Node
}

type Shout {
  voteCount: Int!
  shoutId: ID!
  geohash: String!
  createdAt: DateTime!
  content: String!
  postedBy: User!
  echos(where: EchoWhereInput, orderBy: EchoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Echo!]
  void: Void!
}

type ShoutConnection {
  pageInfo: PageInfo!
  edges: [ShoutEdge]!
  aggregate: AggregateShout!
}

input ShoutCreateInput {
  voteCount: Int!
  shoutId: ID
  geohash: String!
  content: String!
  postedBy: UserCreateOneWithoutCreatedShoutsInput!
  echos: EchoCreateManyWithoutOriginalShoutInput
  void: VoidCreateOneWithoutShoutsInput!
}

input ShoutCreateManyInput {
  create: [ShoutCreateInput!]
  connect: [ShoutWhereUniqueInput!]
}

input ShoutCreateManyWithoutPostedByInput {
  create: [ShoutCreateWithoutPostedByInput!]
  connect: [ShoutWhereUniqueInput!]
}

input ShoutCreateManyWithoutVoidInput {
  create: [ShoutCreateWithoutVoidInput!]
  connect: [ShoutWhereUniqueInput!]
}

input ShoutCreateOneWithoutEchosInput {
  create: ShoutCreateWithoutEchosInput
  connect: ShoutWhereUniqueInput
}

input ShoutCreateWithoutEchosInput {
  voteCount: Int!
  shoutId: ID
  geohash: String!
  content: String!
  postedBy: UserCreateOneWithoutCreatedShoutsInput!
  void: VoidCreateOneWithoutShoutsInput!
}

input ShoutCreateWithoutPostedByInput {
  voteCount: Int!
  shoutId: ID
  geohash: String!
  content: String!
  echos: EchoCreateManyWithoutOriginalShoutInput
  void: VoidCreateOneWithoutShoutsInput!
}

input ShoutCreateWithoutVoidInput {
  voteCount: Int!
  shoutId: ID
  geohash: String!
  content: String!
  postedBy: UserCreateOneWithoutCreatedShoutsInput!
  echos: EchoCreateManyWithoutOriginalShoutInput
}

type ShoutEdge {
  node: Shout!
  cursor: String!
}

enum ShoutOrderByInput {
  voteCount_ASC
  voteCount_DESC
  shoutId_ASC
  shoutId_DESC
  geohash_ASC
  geohash_DESC
  createdAt_ASC
  createdAt_DESC
  content_ASC
  content_DESC
}

type ShoutPreviousValues {
  voteCount: Int!
  shoutId: ID!
  geohash: String!
  createdAt: DateTime!
  content: String!
}

input ShoutScalarWhereInput {
  voteCount: Int
  voteCount_not: Int
  voteCount_in: [Int!]
  voteCount_not_in: [Int!]
  voteCount_lt: Int
  voteCount_lte: Int
  voteCount_gt: Int
  voteCount_gte: Int
  shoutId: ID
  shoutId_not: ID
  shoutId_in: [ID!]
  shoutId_not_in: [ID!]
  shoutId_lt: ID
  shoutId_lte: ID
  shoutId_gt: ID
  shoutId_gte: ID
  shoutId_contains: ID
  shoutId_not_contains: ID
  shoutId_starts_with: ID
  shoutId_not_starts_with: ID
  shoutId_ends_with: ID
  shoutId_not_ends_with: ID
  geohash: String
  geohash_not: String
  geohash_in: [String!]
  geohash_not_in: [String!]
  geohash_lt: String
  geohash_lte: String
  geohash_gt: String
  geohash_gte: String
  geohash_contains: String
  geohash_not_contains: String
  geohash_starts_with: String
  geohash_not_starts_with: String
  geohash_ends_with: String
  geohash_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [ShoutScalarWhereInput!]
  OR: [ShoutScalarWhereInput!]
  NOT: [ShoutScalarWhereInput!]
}

type ShoutSubscriptionPayload {
  mutation: MutationType!
  node: Shout
  updatedFields: [String!]
  previousValues: ShoutPreviousValues
}

input ShoutSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShoutWhereInput
  AND: [ShoutSubscriptionWhereInput!]
  OR: [ShoutSubscriptionWhereInput!]
  NOT: [ShoutSubscriptionWhereInput!]
}

input ShoutUpdateDataInput {
  voteCount: Int
  geohash: String
  content: String
  postedBy: UserUpdateOneRequiredWithoutCreatedShoutsInput
  echos: EchoUpdateManyWithoutOriginalShoutInput
  void: VoidUpdateOneRequiredWithoutShoutsInput
}

input ShoutUpdateInput {
  voteCount: Int
  geohash: String
  content: String
  postedBy: UserUpdateOneRequiredWithoutCreatedShoutsInput
  echos: EchoUpdateManyWithoutOriginalShoutInput
  void: VoidUpdateOneRequiredWithoutShoutsInput
}

input ShoutUpdateManyDataInput {
  voteCount: Int
  geohash: String
  content: String
}

input ShoutUpdateManyInput {
  create: [ShoutCreateInput!]
  update: [ShoutUpdateWithWhereUniqueNestedInput!]
  upsert: [ShoutUpsertWithWhereUniqueNestedInput!]
  delete: [ShoutWhereUniqueInput!]
  connect: [ShoutWhereUniqueInput!]
  set: [ShoutWhereUniqueInput!]
  disconnect: [ShoutWhereUniqueInput!]
  deleteMany: [ShoutScalarWhereInput!]
  updateMany: [ShoutUpdateManyWithWhereNestedInput!]
}

input ShoutUpdateManyMutationInput {
  voteCount: Int
  geohash: String
  content: String
}

input ShoutUpdateManyWithoutPostedByInput {
  create: [ShoutCreateWithoutPostedByInput!]
  delete: [ShoutWhereUniqueInput!]
  connect: [ShoutWhereUniqueInput!]
  set: [ShoutWhereUniqueInput!]
  disconnect: [ShoutWhereUniqueInput!]
  update: [ShoutUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [ShoutUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [ShoutScalarWhereInput!]
  updateMany: [ShoutUpdateManyWithWhereNestedInput!]
}

input ShoutUpdateManyWithoutVoidInput {
  create: [ShoutCreateWithoutVoidInput!]
  delete: [ShoutWhereUniqueInput!]
  connect: [ShoutWhereUniqueInput!]
  set: [ShoutWhereUniqueInput!]
  disconnect: [ShoutWhereUniqueInput!]
  update: [ShoutUpdateWithWhereUniqueWithoutVoidInput!]
  upsert: [ShoutUpsertWithWhereUniqueWithoutVoidInput!]
  deleteMany: [ShoutScalarWhereInput!]
  updateMany: [ShoutUpdateManyWithWhereNestedInput!]
}

input ShoutUpdateManyWithWhereNestedInput {
  where: ShoutScalarWhereInput!
  data: ShoutUpdateManyDataInput!
}

input ShoutUpdateOneRequiredWithoutEchosInput {
  create: ShoutCreateWithoutEchosInput
  update: ShoutUpdateWithoutEchosDataInput
  upsert: ShoutUpsertWithoutEchosInput
  connect: ShoutWhereUniqueInput
}

input ShoutUpdateWithoutEchosDataInput {
  voteCount: Int
  geohash: String
  content: String
  postedBy: UserUpdateOneRequiredWithoutCreatedShoutsInput
  void: VoidUpdateOneRequiredWithoutShoutsInput
}

input ShoutUpdateWithoutPostedByDataInput {
  voteCount: Int
  geohash: String
  content: String
  echos: EchoUpdateManyWithoutOriginalShoutInput
  void: VoidUpdateOneRequiredWithoutShoutsInput
}

input ShoutUpdateWithoutVoidDataInput {
  voteCount: Int
  geohash: String
  content: String
  postedBy: UserUpdateOneRequiredWithoutCreatedShoutsInput
  echos: EchoUpdateManyWithoutOriginalShoutInput
}

input ShoutUpdateWithWhereUniqueNestedInput {
  where: ShoutWhereUniqueInput!
  data: ShoutUpdateDataInput!
}

input ShoutUpdateWithWhereUniqueWithoutPostedByInput {
  where: ShoutWhereUniqueInput!
  data: ShoutUpdateWithoutPostedByDataInput!
}

input ShoutUpdateWithWhereUniqueWithoutVoidInput {
  where: ShoutWhereUniqueInput!
  data: ShoutUpdateWithoutVoidDataInput!
}

input ShoutUpsertWithoutEchosInput {
  update: ShoutUpdateWithoutEchosDataInput!
  create: ShoutCreateWithoutEchosInput!
}

input ShoutUpsertWithWhereUniqueNestedInput {
  where: ShoutWhereUniqueInput!
  update: ShoutUpdateDataInput!
  create: ShoutCreateInput!
}

input ShoutUpsertWithWhereUniqueWithoutPostedByInput {
  where: ShoutWhereUniqueInput!
  update: ShoutUpdateWithoutPostedByDataInput!
  create: ShoutCreateWithoutPostedByInput!
}

input ShoutUpsertWithWhereUniqueWithoutVoidInput {
  where: ShoutWhereUniqueInput!
  update: ShoutUpdateWithoutVoidDataInput!
  create: ShoutCreateWithoutVoidInput!
}

input ShoutWhereInput {
  voteCount: Int
  voteCount_not: Int
  voteCount_in: [Int!]
  voteCount_not_in: [Int!]
  voteCount_lt: Int
  voteCount_lte: Int
  voteCount_gt: Int
  voteCount_gte: Int
  shoutId: ID
  shoutId_not: ID
  shoutId_in: [ID!]
  shoutId_not_in: [ID!]
  shoutId_lt: ID
  shoutId_lte: ID
  shoutId_gt: ID
  shoutId_gte: ID
  shoutId_contains: ID
  shoutId_not_contains: ID
  shoutId_starts_with: ID
  shoutId_not_starts_with: ID
  shoutId_ends_with: ID
  shoutId_not_ends_with: ID
  geohash: String
  geohash_not: String
  geohash_in: [String!]
  geohash_not_in: [String!]
  geohash_lt: String
  geohash_lte: String
  geohash_gt: String
  geohash_gte: String
  geohash_contains: String
  geohash_not_contains: String
  geohash_starts_with: String
  geohash_not_starts_with: String
  geohash_ends_with: String
  geohash_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  postedBy: UserWhereInput
  echos_every: EchoWhereInput
  echos_some: EchoWhereInput
  echos_none: EchoWhereInput
  void: VoidWhereInput
  AND: [ShoutWhereInput!]
  OR: [ShoutWhereInput!]
  NOT: [ShoutWhereInput!]
}

input ShoutWhereUniqueInput {
  shoutId: ID
}

type Subscription {
  echo(where: EchoSubscriptionWhereInput): EchoSubscriptionPayload
  shout(where: ShoutSubscriptionWhereInput): ShoutSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  void(where: VoidSubscriptionWhereInput): VoidSubscriptionPayload
}

type User {
  createdAt: DateTime!
  userId: ID!
  createdShouts(where: ShoutWhereInput, orderBy: ShoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shout!]
  savedShouts(where: ShoutWhereInput, orderBy: ShoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shout!]
  echoedShouts(where: EchoWhereInput, orderBy: EchoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Echo!]
  echoes(where: EchoWhereInput, orderBy: EchoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Echo!]
  savedVoids(where: VoidWhereInput, orderBy: VoidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Void!]
  localVoidGeohash: String!
  email: String!
  password: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  userId: ID
  createdShouts: ShoutCreateManyWithoutPostedByInput
  savedShouts: ShoutCreateManyInput
  echoedShouts: EchoCreateManyWithoutEchoedByInput
  echoes: EchoCreateManyWithoutCreatedByInput
  savedVoids: VoidCreateManyInput
  localVoidGeohash: String!
  email: String!
  password: String!
}

input UserCreateOneWithoutCreatedShoutsInput {
  create: UserCreateWithoutCreatedShoutsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEchoedShoutsInput {
  create: UserCreateWithoutEchoedShoutsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEchoesInput {
  create: UserCreateWithoutEchoesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCreatedShoutsInput {
  userId: ID
  savedShouts: ShoutCreateManyInput
  echoedShouts: EchoCreateManyWithoutEchoedByInput
  echoes: EchoCreateManyWithoutCreatedByInput
  savedVoids: VoidCreateManyInput
  localVoidGeohash: String!
  email: String!
  password: String!
}

input UserCreateWithoutEchoedShoutsInput {
  userId: ID
  createdShouts: ShoutCreateManyWithoutPostedByInput
  savedShouts: ShoutCreateManyInput
  echoes: EchoCreateManyWithoutCreatedByInput
  savedVoids: VoidCreateManyInput
  localVoidGeohash: String!
  email: String!
  password: String!
}

input UserCreateWithoutEchoesInput {
  userId: ID
  createdShouts: ShoutCreateManyWithoutPostedByInput
  savedShouts: ShoutCreateManyInput
  echoedShouts: EchoCreateManyWithoutEchoedByInput
  savedVoids: VoidCreateManyInput
  localVoidGeohash: String!
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  userId_ASC
  userId_DESC
  localVoidGeohash_ASC
  localVoidGeohash_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  createdAt: DateTime!
  userId: ID!
  localVoidGeohash: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  createdShouts: ShoutUpdateManyWithoutPostedByInput
  savedShouts: ShoutUpdateManyInput
  echoedShouts: EchoUpdateManyWithoutEchoedByInput
  echoes: EchoUpdateManyWithoutCreatedByInput
  savedVoids: VoidUpdateManyInput
  localVoidGeohash: String
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  localVoidGeohash: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutCreatedShoutsInput {
  create: UserCreateWithoutCreatedShoutsInput
  update: UserUpdateWithoutCreatedShoutsDataInput
  upsert: UserUpsertWithoutCreatedShoutsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutEchoedShoutsInput {
  create: UserCreateWithoutEchoedShoutsInput
  update: UserUpdateWithoutEchoedShoutsDataInput
  upsert: UserUpsertWithoutEchoedShoutsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutEchoesInput {
  create: UserCreateWithoutEchoesInput
  update: UserUpdateWithoutEchoesDataInput
  upsert: UserUpsertWithoutEchoesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCreatedShoutsDataInput {
  savedShouts: ShoutUpdateManyInput
  echoedShouts: EchoUpdateManyWithoutEchoedByInput
  echoes: EchoUpdateManyWithoutCreatedByInput
  savedVoids: VoidUpdateManyInput
  localVoidGeohash: String
  email: String
  password: String
}

input UserUpdateWithoutEchoedShoutsDataInput {
  createdShouts: ShoutUpdateManyWithoutPostedByInput
  savedShouts: ShoutUpdateManyInput
  echoes: EchoUpdateManyWithoutCreatedByInput
  savedVoids: VoidUpdateManyInput
  localVoidGeohash: String
  email: String
  password: String
}

input UserUpdateWithoutEchoesDataInput {
  createdShouts: ShoutUpdateManyWithoutPostedByInput
  savedShouts: ShoutUpdateManyInput
  echoedShouts: EchoUpdateManyWithoutEchoedByInput
  savedVoids: VoidUpdateManyInput
  localVoidGeohash: String
  email: String
  password: String
}

input UserUpsertWithoutCreatedShoutsInput {
  update: UserUpdateWithoutCreatedShoutsDataInput!
  create: UserCreateWithoutCreatedShoutsInput!
}

input UserUpsertWithoutEchoedShoutsInput {
  update: UserUpdateWithoutEchoedShoutsDataInput!
  create: UserCreateWithoutEchoedShoutsInput!
}

input UserUpsertWithoutEchoesInput {
  update: UserUpdateWithoutEchoesDataInput!
  create: UserCreateWithoutEchoesInput!
}

input UserWhereInput {
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  createdShouts_every: ShoutWhereInput
  createdShouts_some: ShoutWhereInput
  createdShouts_none: ShoutWhereInput
  savedShouts_every: ShoutWhereInput
  savedShouts_some: ShoutWhereInput
  savedShouts_none: ShoutWhereInput
  echoedShouts_every: EchoWhereInput
  echoedShouts_some: EchoWhereInput
  echoedShouts_none: EchoWhereInput
  echoes_every: EchoWhereInput
  echoes_some: EchoWhereInput
  echoes_none: EchoWhereInput
  savedVoids_every: VoidWhereInput
  savedVoids_some: VoidWhereInput
  savedVoids_none: VoidWhereInput
  localVoidGeohash: String
  localVoidGeohash_not: String
  localVoidGeohash_in: [String!]
  localVoidGeohash_not_in: [String!]
  localVoidGeohash_lt: String
  localVoidGeohash_lte: String
  localVoidGeohash_gt: String
  localVoidGeohash_gte: String
  localVoidGeohash_contains: String
  localVoidGeohash_not_contains: String
  localVoidGeohash_starts_with: String
  localVoidGeohash_not_starts_with: String
  localVoidGeohash_ends_with: String
  localVoidGeohash_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  userId: ID
  email: String
}

type Void {
  voidId: ID!
  geohash: String!
  createdAt: DateTime!
  shouts(where: ShoutWhereInput, orderBy: ShoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shout!]
  echos(where: EchoWhereInput, orderBy: EchoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Echo!]
}

type VoidConnection {
  pageInfo: PageInfo!
  edges: [VoidEdge]!
  aggregate: AggregateVoid!
}

input VoidCreateInput {
  voidId: ID
  geohash: String!
  shouts: ShoutCreateManyWithoutVoidInput
  echos: EchoCreateManyWithoutVoidInput
}

input VoidCreateManyInput {
  create: [VoidCreateInput!]
  connect: [VoidWhereUniqueInput!]
}

input VoidCreateOneWithoutEchosInput {
  create: VoidCreateWithoutEchosInput
  connect: VoidWhereUniqueInput
}

input VoidCreateOneWithoutShoutsInput {
  create: VoidCreateWithoutShoutsInput
  connect: VoidWhereUniqueInput
}

input VoidCreateWithoutEchosInput {
  voidId: ID
  geohash: String!
  shouts: ShoutCreateManyWithoutVoidInput
}

input VoidCreateWithoutShoutsInput {
  voidId: ID
  geohash: String!
  echos: EchoCreateManyWithoutVoidInput
}

type VoidEdge {
  node: Void!
  cursor: String!
}

enum VoidOrderByInput {
  voidId_ASC
  voidId_DESC
  geohash_ASC
  geohash_DESC
  createdAt_ASC
  createdAt_DESC
}

type VoidPreviousValues {
  voidId: ID!
  geohash: String!
  createdAt: DateTime!
}

input VoidScalarWhereInput {
  voidId: ID
  voidId_not: ID
  voidId_in: [ID!]
  voidId_not_in: [ID!]
  voidId_lt: ID
  voidId_lte: ID
  voidId_gt: ID
  voidId_gte: ID
  voidId_contains: ID
  voidId_not_contains: ID
  voidId_starts_with: ID
  voidId_not_starts_with: ID
  voidId_ends_with: ID
  voidId_not_ends_with: ID
  geohash: String
  geohash_not: String
  geohash_in: [String!]
  geohash_not_in: [String!]
  geohash_lt: String
  geohash_lte: String
  geohash_gt: String
  geohash_gte: String
  geohash_contains: String
  geohash_not_contains: String
  geohash_starts_with: String
  geohash_not_starts_with: String
  geohash_ends_with: String
  geohash_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [VoidScalarWhereInput!]
  OR: [VoidScalarWhereInput!]
  NOT: [VoidScalarWhereInput!]
}

type VoidSubscriptionPayload {
  mutation: MutationType!
  node: Void
  updatedFields: [String!]
  previousValues: VoidPreviousValues
}

input VoidSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoidWhereInput
  AND: [VoidSubscriptionWhereInput!]
  OR: [VoidSubscriptionWhereInput!]
  NOT: [VoidSubscriptionWhereInput!]
}

input VoidUpdateDataInput {
  geohash: String
  shouts: ShoutUpdateManyWithoutVoidInput
  echos: EchoUpdateManyWithoutVoidInput
}

input VoidUpdateInput {
  geohash: String
  shouts: ShoutUpdateManyWithoutVoidInput
  echos: EchoUpdateManyWithoutVoidInput
}

input VoidUpdateManyDataInput {
  geohash: String
}

input VoidUpdateManyInput {
  create: [VoidCreateInput!]
  update: [VoidUpdateWithWhereUniqueNestedInput!]
  upsert: [VoidUpsertWithWhereUniqueNestedInput!]
  delete: [VoidWhereUniqueInput!]
  connect: [VoidWhereUniqueInput!]
  set: [VoidWhereUniqueInput!]
  disconnect: [VoidWhereUniqueInput!]
  deleteMany: [VoidScalarWhereInput!]
  updateMany: [VoidUpdateManyWithWhereNestedInput!]
}

input VoidUpdateManyMutationInput {
  geohash: String
}

input VoidUpdateManyWithWhereNestedInput {
  where: VoidScalarWhereInput!
  data: VoidUpdateManyDataInput!
}

input VoidUpdateOneRequiredWithoutEchosInput {
  create: VoidCreateWithoutEchosInput
  update: VoidUpdateWithoutEchosDataInput
  upsert: VoidUpsertWithoutEchosInput
  connect: VoidWhereUniqueInput
}

input VoidUpdateOneRequiredWithoutShoutsInput {
  create: VoidCreateWithoutShoutsInput
  update: VoidUpdateWithoutShoutsDataInput
  upsert: VoidUpsertWithoutShoutsInput
  connect: VoidWhereUniqueInput
}

input VoidUpdateWithoutEchosDataInput {
  geohash: String
  shouts: ShoutUpdateManyWithoutVoidInput
}

input VoidUpdateWithoutShoutsDataInput {
  geohash: String
  echos: EchoUpdateManyWithoutVoidInput
}

input VoidUpdateWithWhereUniqueNestedInput {
  where: VoidWhereUniqueInput!
  data: VoidUpdateDataInput!
}

input VoidUpsertWithoutEchosInput {
  update: VoidUpdateWithoutEchosDataInput!
  create: VoidCreateWithoutEchosInput!
}

input VoidUpsertWithoutShoutsInput {
  update: VoidUpdateWithoutShoutsDataInput!
  create: VoidCreateWithoutShoutsInput!
}

input VoidUpsertWithWhereUniqueNestedInput {
  where: VoidWhereUniqueInput!
  update: VoidUpdateDataInput!
  create: VoidCreateInput!
}

input VoidWhereInput {
  voidId: ID
  voidId_not: ID
  voidId_in: [ID!]
  voidId_not_in: [ID!]
  voidId_lt: ID
  voidId_lte: ID
  voidId_gt: ID
  voidId_gte: ID
  voidId_contains: ID
  voidId_not_contains: ID
  voidId_starts_with: ID
  voidId_not_starts_with: ID
  voidId_ends_with: ID
  voidId_not_ends_with: ID
  geohash: String
  geohash_not: String
  geohash_in: [String!]
  geohash_not_in: [String!]
  geohash_lt: String
  geohash_lte: String
  geohash_gt: String
  geohash_gte: String
  geohash_contains: String
  geohash_not_contains: String
  geohash_starts_with: String
  geohash_not_starts_with: String
  geohash_ends_with: String
  geohash_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  shouts_every: ShoutWhereInput
  shouts_some: ShoutWhereInput
  shouts_none: ShoutWhereInput
  echos_every: EchoWhereInput
  echos_some: EchoWhereInput
  echos_none: EchoWhereInput
  AND: [VoidWhereInput!]
  OR: [VoidWhereInput!]
  NOT: [VoidWhereInput!]
}

input VoidWhereUniqueInput {
  voidId: ID
}
`
      }
    