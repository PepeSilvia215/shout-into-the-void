module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateEcho {
  count: Int!
}

type AggregateNVoid {
  count: Int!
}

type AggregateReply {
  count: Int!
}

type AggregateShout {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Echo {
  echoId: ID!
  nvoid: NVoid!
  originalShout: Shout!
  createdAt: DateTime!
  createdBy: User!
  echoedBy: User!
}

type EchoConnection {
  pageInfo: PageInfo!
  edges: [EchoEdge]!
  aggregate: AggregateEcho!
}

input EchoCreateInput {
  echoId: ID
  nvoid: NVoidCreateOneWithoutEchosInput!
  originalShout: ShoutCreateOneWithoutEchosInput!
  createdBy: UserCreateOneWithoutEchoesInput!
  echoedBy: UserCreateOneWithoutEchoedShoutsInput!
}

input EchoCreateManyWithoutCreatedByInput {
  create: [EchoCreateWithoutCreatedByInput!]
  connect: [EchoWhereUniqueInput!]
}

input EchoCreateManyWithoutEchoedByInput {
  create: [EchoCreateWithoutEchoedByInput!]
  connect: [EchoWhereUniqueInput!]
}

input EchoCreateManyWithoutNvoidInput {
  create: [EchoCreateWithoutNvoidInput!]
  connect: [EchoWhereUniqueInput!]
}

input EchoCreateManyWithoutOriginalShoutInput {
  create: [EchoCreateWithoutOriginalShoutInput!]
  connect: [EchoWhereUniqueInput!]
}

input EchoCreateWithoutCreatedByInput {
  echoId: ID
  nvoid: NVoidCreateOneWithoutEchosInput!
  originalShout: ShoutCreateOneWithoutEchosInput!
  echoedBy: UserCreateOneWithoutEchoedShoutsInput!
}

input EchoCreateWithoutEchoedByInput {
  echoId: ID
  nvoid: NVoidCreateOneWithoutEchosInput!
  originalShout: ShoutCreateOneWithoutEchosInput!
  createdBy: UserCreateOneWithoutEchoesInput!
}

input EchoCreateWithoutNvoidInput {
  echoId: ID
  originalShout: ShoutCreateOneWithoutEchosInput!
  createdBy: UserCreateOneWithoutEchoesInput!
  echoedBy: UserCreateOneWithoutEchoedShoutsInput!
}

input EchoCreateWithoutOriginalShoutInput {
  echoId: ID
  nvoid: NVoidCreateOneWithoutEchosInput!
  createdBy: UserCreateOneWithoutEchoesInput!
  echoedBy: UserCreateOneWithoutEchoedShoutsInput!
}

type EchoEdge {
  node: Echo!
  cursor: String!
}

enum EchoOrderByInput {
  echoId_ASC
  echoId_DESC
  createdAt_ASC
  createdAt_DESC
}

type EchoPreviousValues {
  echoId: ID!
  createdAt: DateTime!
}

input EchoScalarWhereInput {
  echoId: ID
  echoId_not: ID
  echoId_in: [ID!]
  echoId_not_in: [ID!]
  echoId_lt: ID
  echoId_lte: ID
  echoId_gt: ID
  echoId_gte: ID
  echoId_contains: ID
  echoId_not_contains: ID
  echoId_starts_with: ID
  echoId_not_starts_with: ID
  echoId_ends_with: ID
  echoId_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [EchoScalarWhereInput!]
  OR: [EchoScalarWhereInput!]
  NOT: [EchoScalarWhereInput!]
}

type EchoSubscriptionPayload {
  mutation: MutationType!
  node: Echo
  updatedFields: [String!]
  previousValues: EchoPreviousValues
}

input EchoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EchoWhereInput
  AND: [EchoSubscriptionWhereInput!]
  OR: [EchoSubscriptionWhereInput!]
  NOT: [EchoSubscriptionWhereInput!]
}

input EchoUpdateInput {
  nvoid: NVoidUpdateOneRequiredWithoutEchosInput
  originalShout: ShoutUpdateOneRequiredWithoutEchosInput
  createdBy: UserUpdateOneRequiredWithoutEchoesInput
  echoedBy: UserUpdateOneRequiredWithoutEchoedShoutsInput
}

input EchoUpdateManyWithoutCreatedByInput {
  create: [EchoCreateWithoutCreatedByInput!]
  delete: [EchoWhereUniqueInput!]
  connect: [EchoWhereUniqueInput!]
  set: [EchoWhereUniqueInput!]
  disconnect: [EchoWhereUniqueInput!]
  update: [EchoUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [EchoUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [EchoScalarWhereInput!]
}

input EchoUpdateManyWithoutEchoedByInput {
  create: [EchoCreateWithoutEchoedByInput!]
  delete: [EchoWhereUniqueInput!]
  connect: [EchoWhereUniqueInput!]
  set: [EchoWhereUniqueInput!]
  disconnect: [EchoWhereUniqueInput!]
  update: [EchoUpdateWithWhereUniqueWithoutEchoedByInput!]
  upsert: [EchoUpsertWithWhereUniqueWithoutEchoedByInput!]
  deleteMany: [EchoScalarWhereInput!]
}

input EchoUpdateManyWithoutNvoidInput {
  create: [EchoCreateWithoutNvoidInput!]
  delete: [EchoWhereUniqueInput!]
  connect: [EchoWhereUniqueInput!]
  set: [EchoWhereUniqueInput!]
  disconnect: [EchoWhereUniqueInput!]
  update: [EchoUpdateWithWhereUniqueWithoutNvoidInput!]
  upsert: [EchoUpsertWithWhereUniqueWithoutNvoidInput!]
  deleteMany: [EchoScalarWhereInput!]
}

input EchoUpdateManyWithoutOriginalShoutInput {
  create: [EchoCreateWithoutOriginalShoutInput!]
  delete: [EchoWhereUniqueInput!]
  connect: [EchoWhereUniqueInput!]
  set: [EchoWhereUniqueInput!]
  disconnect: [EchoWhereUniqueInput!]
  update: [EchoUpdateWithWhereUniqueWithoutOriginalShoutInput!]
  upsert: [EchoUpsertWithWhereUniqueWithoutOriginalShoutInput!]
  deleteMany: [EchoScalarWhereInput!]
}

input EchoUpdateWithoutCreatedByDataInput {
  nvoid: NVoidUpdateOneRequiredWithoutEchosInput
  originalShout: ShoutUpdateOneRequiredWithoutEchosInput
  echoedBy: UserUpdateOneRequiredWithoutEchoedShoutsInput
}

input EchoUpdateWithoutEchoedByDataInput {
  nvoid: NVoidUpdateOneRequiredWithoutEchosInput
  originalShout: ShoutUpdateOneRequiredWithoutEchosInput
  createdBy: UserUpdateOneRequiredWithoutEchoesInput
}

input EchoUpdateWithoutNvoidDataInput {
  originalShout: ShoutUpdateOneRequiredWithoutEchosInput
  createdBy: UserUpdateOneRequiredWithoutEchoesInput
  echoedBy: UserUpdateOneRequiredWithoutEchoedShoutsInput
}

input EchoUpdateWithoutOriginalShoutDataInput {
  nvoid: NVoidUpdateOneRequiredWithoutEchosInput
  createdBy: UserUpdateOneRequiredWithoutEchoesInput
  echoedBy: UserUpdateOneRequiredWithoutEchoedShoutsInput
}

input EchoUpdateWithWhereUniqueWithoutCreatedByInput {
  where: EchoWhereUniqueInput!
  data: EchoUpdateWithoutCreatedByDataInput!
}

input EchoUpdateWithWhereUniqueWithoutEchoedByInput {
  where: EchoWhereUniqueInput!
  data: EchoUpdateWithoutEchoedByDataInput!
}

input EchoUpdateWithWhereUniqueWithoutNvoidInput {
  where: EchoWhereUniqueInput!
  data: EchoUpdateWithoutNvoidDataInput!
}

input EchoUpdateWithWhereUniqueWithoutOriginalShoutInput {
  where: EchoWhereUniqueInput!
  data: EchoUpdateWithoutOriginalShoutDataInput!
}

input EchoUpsertWithWhereUniqueWithoutCreatedByInput {
  where: EchoWhereUniqueInput!
  update: EchoUpdateWithoutCreatedByDataInput!
  create: EchoCreateWithoutCreatedByInput!
}

input EchoUpsertWithWhereUniqueWithoutEchoedByInput {
  where: EchoWhereUniqueInput!
  update: EchoUpdateWithoutEchoedByDataInput!
  create: EchoCreateWithoutEchoedByInput!
}

input EchoUpsertWithWhereUniqueWithoutNvoidInput {
  where: EchoWhereUniqueInput!
  update: EchoUpdateWithoutNvoidDataInput!
  create: EchoCreateWithoutNvoidInput!
}

input EchoUpsertWithWhereUniqueWithoutOriginalShoutInput {
  where: EchoWhereUniqueInput!
  update: EchoUpdateWithoutOriginalShoutDataInput!
  create: EchoCreateWithoutOriginalShoutInput!
}

input EchoWhereInput {
  echoId: ID
  echoId_not: ID
  echoId_in: [ID!]
  echoId_not_in: [ID!]
  echoId_lt: ID
  echoId_lte: ID
  echoId_gt: ID
  echoId_gte: ID
  echoId_contains: ID
  echoId_not_contains: ID
  echoId_starts_with: ID
  echoId_not_starts_with: ID
  echoId_ends_with: ID
  echoId_not_ends_with: ID
  nvoid: NVoidWhereInput
  originalShout: ShoutWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdBy: UserWhereInput
  echoedBy: UserWhereInput
  AND: [EchoWhereInput!]
  OR: [EchoWhereInput!]
  NOT: [EchoWhereInput!]
}

input EchoWhereUniqueInput {
  echoId: ID
}

scalar Long

type Mutation {
  createEcho(data: EchoCreateInput!): Echo!
  updateEcho(data: EchoUpdateInput!, where: EchoWhereUniqueInput!): Echo
  upsertEcho(where: EchoWhereUniqueInput!, create: EchoCreateInput!, update: EchoUpdateInput!): Echo!
  deleteEcho(where: EchoWhereUniqueInput!): Echo
  deleteManyEchoes(where: EchoWhereInput): BatchPayload!
  createNVoid(data: NVoidCreateInput!): NVoid!
  updateNVoid(data: NVoidUpdateInput!, where: NVoidWhereUniqueInput!): NVoid
  updateManyNVoids(data: NVoidUpdateManyMutationInput!, where: NVoidWhereInput): BatchPayload!
  upsertNVoid(where: NVoidWhereUniqueInput!, create: NVoidCreateInput!, update: NVoidUpdateInput!): NVoid!
  deleteNVoid(where: NVoidWhereUniqueInput!): NVoid
  deleteManyNVoids(where: NVoidWhereInput): BatchPayload!
  createReply(data: ReplyCreateInput!): Reply!
  updateReply(data: ReplyUpdateInput!, where: ReplyWhereUniqueInput!): Reply
  updateManyReplies(data: ReplyUpdateManyMutationInput!, where: ReplyWhereInput): BatchPayload!
  upsertReply(where: ReplyWhereUniqueInput!, create: ReplyCreateInput!, update: ReplyUpdateInput!): Reply!
  deleteReply(where: ReplyWhereUniqueInput!): Reply
  deleteManyReplies(where: ReplyWhereInput): BatchPayload!
  createShout(data: ShoutCreateInput!): Shout!
  updateShout(data: ShoutUpdateInput!, where: ShoutWhereUniqueInput!): Shout
  updateManyShouts(data: ShoutUpdateManyMutationInput!, where: ShoutWhereInput): BatchPayload!
  upsertShout(where: ShoutWhereUniqueInput!, create: ShoutCreateInput!, update: ShoutUpdateInput!): Shout!
  deleteShout(where: ShoutWhereUniqueInput!): Shout
  deleteManyShouts(where: ShoutWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type NVoid {
  nvoidId: ID!
  geohash: String!
  createdAt: DateTime!
  shouts(where: ShoutWhereInput, orderBy: ShoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shout!]
  echos(where: EchoWhereInput, orderBy: EchoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Echo!]
}

type NVoidConnection {
  pageInfo: PageInfo!
  edges: [NVoidEdge]!
  aggregate: AggregateNVoid!
}

input NVoidCreateInput {
  nvoidId: ID
  geohash: String!
  shouts: ShoutCreateManyWithoutNvoidInput
  echos: EchoCreateManyWithoutNvoidInput
}

input NVoidCreateManyInput {
  create: [NVoidCreateInput!]
  connect: [NVoidWhereUniqueInput!]
}

input NVoidCreateOneWithoutEchosInput {
  create: NVoidCreateWithoutEchosInput
  connect: NVoidWhereUniqueInput
}

input NVoidCreateOneWithoutShoutsInput {
  create: NVoidCreateWithoutShoutsInput
  connect: NVoidWhereUniqueInput
}

input NVoidCreateWithoutEchosInput {
  nvoidId: ID
  geohash: String!
  shouts: ShoutCreateManyWithoutNvoidInput
}

input NVoidCreateWithoutShoutsInput {
  nvoidId: ID
  geohash: String!
  echos: EchoCreateManyWithoutNvoidInput
}

type NVoidEdge {
  node: NVoid!
  cursor: String!
}

enum NVoidOrderByInput {
  nvoidId_ASC
  nvoidId_DESC
  geohash_ASC
  geohash_DESC
  createdAt_ASC
  createdAt_DESC
}

type NVoidPreviousValues {
  nvoidId: ID!
  geohash: String!
  createdAt: DateTime!
}

input NVoidScalarWhereInput {
  nvoidId: ID
  nvoidId_not: ID
  nvoidId_in: [ID!]
  nvoidId_not_in: [ID!]
  nvoidId_lt: ID
  nvoidId_lte: ID
  nvoidId_gt: ID
  nvoidId_gte: ID
  nvoidId_contains: ID
  nvoidId_not_contains: ID
  nvoidId_starts_with: ID
  nvoidId_not_starts_with: ID
  nvoidId_ends_with: ID
  nvoidId_not_ends_with: ID
  geohash: String
  geohash_not: String
  geohash_in: [String!]
  geohash_not_in: [String!]
  geohash_lt: String
  geohash_lte: String
  geohash_gt: String
  geohash_gte: String
  geohash_contains: String
  geohash_not_contains: String
  geohash_starts_with: String
  geohash_not_starts_with: String
  geohash_ends_with: String
  geohash_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [NVoidScalarWhereInput!]
  OR: [NVoidScalarWhereInput!]
  NOT: [NVoidScalarWhereInput!]
}

type NVoidSubscriptionPayload {
  mutation: MutationType!
  node: NVoid
  updatedFields: [String!]
  previousValues: NVoidPreviousValues
}

input NVoidSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NVoidWhereInput
  AND: [NVoidSubscriptionWhereInput!]
  OR: [NVoidSubscriptionWhereInput!]
  NOT: [NVoidSubscriptionWhereInput!]
}

input NVoidUpdateDataInput {
  geohash: String
  shouts: ShoutUpdateManyWithoutNvoidInput
  echos: EchoUpdateManyWithoutNvoidInput
}

input NVoidUpdateInput {
  geohash: String
  shouts: ShoutUpdateManyWithoutNvoidInput
  echos: EchoUpdateManyWithoutNvoidInput
}

input NVoidUpdateManyDataInput {
  geohash: String
}

input NVoidUpdateManyInput {
  create: [NVoidCreateInput!]
  update: [NVoidUpdateWithWhereUniqueNestedInput!]
  upsert: [NVoidUpsertWithWhereUniqueNestedInput!]
  delete: [NVoidWhereUniqueInput!]
  connect: [NVoidWhereUniqueInput!]
  set: [NVoidWhereUniqueInput!]
  disconnect: [NVoidWhereUniqueInput!]
  deleteMany: [NVoidScalarWhereInput!]
  updateMany: [NVoidUpdateManyWithWhereNestedInput!]
}

input NVoidUpdateManyMutationInput {
  geohash: String
}

input NVoidUpdateManyWithWhereNestedInput {
  where: NVoidScalarWhereInput!
  data: NVoidUpdateManyDataInput!
}

input NVoidUpdateOneRequiredWithoutEchosInput {
  create: NVoidCreateWithoutEchosInput
  update: NVoidUpdateWithoutEchosDataInput
  upsert: NVoidUpsertWithoutEchosInput
  connect: NVoidWhereUniqueInput
}

input NVoidUpdateOneRequiredWithoutShoutsInput {
  create: NVoidCreateWithoutShoutsInput
  update: NVoidUpdateWithoutShoutsDataInput
  upsert: NVoidUpsertWithoutShoutsInput
  connect: NVoidWhereUniqueInput
}

input NVoidUpdateWithoutEchosDataInput {
  geohash: String
  shouts: ShoutUpdateManyWithoutNvoidInput
}

input NVoidUpdateWithoutShoutsDataInput {
  geohash: String
  echos: EchoUpdateManyWithoutNvoidInput
}

input NVoidUpdateWithWhereUniqueNestedInput {
  where: NVoidWhereUniqueInput!
  data: NVoidUpdateDataInput!
}

input NVoidUpsertWithoutEchosInput {
  update: NVoidUpdateWithoutEchosDataInput!
  create: NVoidCreateWithoutEchosInput!
}

input NVoidUpsertWithoutShoutsInput {
  update: NVoidUpdateWithoutShoutsDataInput!
  create: NVoidCreateWithoutShoutsInput!
}

input NVoidUpsertWithWhereUniqueNestedInput {
  where: NVoidWhereUniqueInput!
  update: NVoidUpdateDataInput!
  create: NVoidCreateInput!
}

input NVoidWhereInput {
  nvoidId: ID
  nvoidId_not: ID
  nvoidId_in: [ID!]
  nvoidId_not_in: [ID!]
  nvoidId_lt: ID
  nvoidId_lte: ID
  nvoidId_gt: ID
  nvoidId_gte: ID
  nvoidId_contains: ID
  nvoidId_not_contains: ID
  nvoidId_starts_with: ID
  nvoidId_not_starts_with: ID
  nvoidId_ends_with: ID
  nvoidId_not_ends_with: ID
  geohash: String
  geohash_not: String
  geohash_in: [String!]
  geohash_not_in: [String!]
  geohash_lt: String
  geohash_lte: String
  geohash_gt: String
  geohash_gte: String
  geohash_contains: String
  geohash_not_contains: String
  geohash_starts_with: String
  geohash_not_starts_with: String
  geohash_ends_with: String
  geohash_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  shouts_every: ShoutWhereInput
  shouts_some: ShoutWhereInput
  shouts_none: ShoutWhereInput
  echos_every: EchoWhereInput
  echos_some: EchoWhereInput
  echos_none: EchoWhereInput
  AND: [NVoidWhereInput!]
  OR: [NVoidWhereInput!]
  NOT: [NVoidWhereInput!]
}

input NVoidWhereUniqueInput {
  nvoidId: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  echo(where: EchoWhereUniqueInput!): Echo
  echoes(where: EchoWhereInput, orderBy: EchoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Echo]!
  echoesConnection(where: EchoWhereInput, orderBy: EchoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EchoConnection!
  nVoid(where: NVoidWhereUniqueInput!): NVoid
  nVoids(where: NVoidWhereInput, orderBy: NVoidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NVoid]!
  nVoidsConnection(where: NVoidWhereInput, orderBy: NVoidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NVoidConnection!
  reply(where: ReplyWhereUniqueInput!): Reply
  replies(where: ReplyWhereInput, orderBy: ReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reply]!
  repliesConnection(where: ReplyWhereInput, orderBy: ReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReplyConnection!
  shout(where: ShoutWhereUniqueInput!): Shout
  shouts(where: ShoutWhereInput, orderBy: ShoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shout]!
  shoutsConnection(where: ShoutWhereInput, orderBy: ShoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShoutConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Reply {
  originalShout: Shout!
  voteCount: Int!
  replyId: ID!
  createdAt: DateTime!
  content: String!
  postedBy: User!
}

type ReplyConnection {
  pageInfo: PageInfo!
  edges: [ReplyEdge]!
  aggregate: AggregateReply!
}

input ReplyCreateInput {
  originalShout: ShoutCreateOneWithoutRepliesInput!
  voteCount: Int!
  replyId: ID
  content: String!
  postedBy: UserCreateOneWithoutRepliesInput!
}

input ReplyCreateManyWithoutOriginalShoutInput {
  create: [ReplyCreateWithoutOriginalShoutInput!]
  connect: [ReplyWhereUniqueInput!]
}

input ReplyCreateManyWithoutPostedByInput {
  create: [ReplyCreateWithoutPostedByInput!]
  connect: [ReplyWhereUniqueInput!]
}

input ReplyCreateWithoutOriginalShoutInput {
  voteCount: Int!
  replyId: ID
  content: String!
  postedBy: UserCreateOneWithoutRepliesInput!
}

input ReplyCreateWithoutPostedByInput {
  originalShout: ShoutCreateOneWithoutRepliesInput!
  voteCount: Int!
  replyId: ID
  content: String!
}

type ReplyEdge {
  node: Reply!
  cursor: String!
}

enum ReplyOrderByInput {
  voteCount_ASC
  voteCount_DESC
  replyId_ASC
  replyId_DESC
  createdAt_ASC
  createdAt_DESC
  content_ASC
  content_DESC
}

type ReplyPreviousValues {
  voteCount: Int!
  replyId: ID!
  createdAt: DateTime!
  content: String!
}

input ReplyScalarWhereInput {
  voteCount: Int
  voteCount_not: Int
  voteCount_in: [Int!]
  voteCount_not_in: [Int!]
  voteCount_lt: Int
  voteCount_lte: Int
  voteCount_gt: Int
  voteCount_gte: Int
  replyId: ID
  replyId_not: ID
  replyId_in: [ID!]
  replyId_not_in: [ID!]
  replyId_lt: ID
  replyId_lte: ID
  replyId_gt: ID
  replyId_gte: ID
  replyId_contains: ID
  replyId_not_contains: ID
  replyId_starts_with: ID
  replyId_not_starts_with: ID
  replyId_ends_with: ID
  replyId_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [ReplyScalarWhereInput!]
  OR: [ReplyScalarWhereInput!]
  NOT: [ReplyScalarWhereInput!]
}

type ReplySubscriptionPayload {
  mutation: MutationType!
  node: Reply
  updatedFields: [String!]
  previousValues: ReplyPreviousValues
}

input ReplySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReplyWhereInput
  AND: [ReplySubscriptionWhereInput!]
  OR: [ReplySubscriptionWhereInput!]
  NOT: [ReplySubscriptionWhereInput!]
}

input ReplyUpdateInput {
  originalShout: ShoutUpdateOneRequiredWithoutRepliesInput
  voteCount: Int
  content: String
  postedBy: UserUpdateOneRequiredWithoutRepliesInput
}

input ReplyUpdateManyDataInput {
  voteCount: Int
  content: String
}

input ReplyUpdateManyMutationInput {
  voteCount: Int
  content: String
}

input ReplyUpdateManyWithoutOriginalShoutInput {
  create: [ReplyCreateWithoutOriginalShoutInput!]
  delete: [ReplyWhereUniqueInput!]
  connect: [ReplyWhereUniqueInput!]
  set: [ReplyWhereUniqueInput!]
  disconnect: [ReplyWhereUniqueInput!]
  update: [ReplyUpdateWithWhereUniqueWithoutOriginalShoutInput!]
  upsert: [ReplyUpsertWithWhereUniqueWithoutOriginalShoutInput!]
  deleteMany: [ReplyScalarWhereInput!]
  updateMany: [ReplyUpdateManyWithWhereNestedInput!]
}

input ReplyUpdateManyWithoutPostedByInput {
  create: [ReplyCreateWithoutPostedByInput!]
  delete: [ReplyWhereUniqueInput!]
  connect: [ReplyWhereUniqueInput!]
  set: [ReplyWhereUniqueInput!]
  disconnect: [ReplyWhereUniqueInput!]
  update: [ReplyUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [ReplyUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [ReplyScalarWhereInput!]
  updateMany: [ReplyUpdateManyWithWhereNestedInput!]
}

input ReplyUpdateManyWithWhereNestedInput {
  where: ReplyScalarWhereInput!
  data: ReplyUpdateManyDataInput!
}

input ReplyUpdateWithoutOriginalShoutDataInput {
  voteCount: Int
  content: String
  postedBy: UserUpdateOneRequiredWithoutRepliesInput
}

input ReplyUpdateWithoutPostedByDataInput {
  originalShout: ShoutUpdateOneRequiredWithoutRepliesInput
  voteCount: Int
  content: String
}

input ReplyUpdateWithWhereUniqueWithoutOriginalShoutInput {
  where: ReplyWhereUniqueInput!
  data: ReplyUpdateWithoutOriginalShoutDataInput!
}

input ReplyUpdateWithWhereUniqueWithoutPostedByInput {
  where: ReplyWhereUniqueInput!
  data: ReplyUpdateWithoutPostedByDataInput!
}

input ReplyUpsertWithWhereUniqueWithoutOriginalShoutInput {
  where: ReplyWhereUniqueInput!
  update: ReplyUpdateWithoutOriginalShoutDataInput!
  create: ReplyCreateWithoutOriginalShoutInput!
}

input ReplyUpsertWithWhereUniqueWithoutPostedByInput {
  where: ReplyWhereUniqueInput!
  update: ReplyUpdateWithoutPostedByDataInput!
  create: ReplyCreateWithoutPostedByInput!
}

input ReplyWhereInput {
  originalShout: ShoutWhereInput
  voteCount: Int
  voteCount_not: Int
  voteCount_in: [Int!]
  voteCount_not_in: [Int!]
  voteCount_lt: Int
  voteCount_lte: Int
  voteCount_gt: Int
  voteCount_gte: Int
  replyId: ID
  replyId_not: ID
  replyId_in: [ID!]
  replyId_not_in: [ID!]
  replyId_lt: ID
  replyId_lte: ID
  replyId_gt: ID
  replyId_gte: ID
  replyId_contains: ID
  replyId_not_contains: ID
  replyId_starts_with: ID
  replyId_not_starts_with: ID
  replyId_ends_with: ID
  replyId_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  postedBy: UserWhereInput
  AND: [ReplyWhereInput!]
  OR: [ReplyWhereInput!]
  NOT: [ReplyWhereInput!]
}

input ReplyWhereUniqueInput {
  replyId: ID
}

type Shout {
  voteCount: Int!
  shoutId: ID!
  createdAt: DateTime!
  content: String!
  postedBy: User!
  echos(where: EchoWhereInput, orderBy: EchoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Echo!]
  nvoid: NVoid!
  replies(where: ReplyWhereInput, orderBy: ReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reply!]
}

type ShoutConnection {
  pageInfo: PageInfo!
  edges: [ShoutEdge]!
  aggregate: AggregateShout!
}

input ShoutCreateInput {
  voteCount: Int!
  shoutId: ID
  content: String!
  postedBy: UserCreateOneWithoutCreatedShoutsInput!
  echos: EchoCreateManyWithoutOriginalShoutInput
  nvoid: NVoidCreateOneWithoutShoutsInput!
  replies: ReplyCreateManyWithoutOriginalShoutInput
}

input ShoutCreateManyInput {
  create: [ShoutCreateInput!]
  connect: [ShoutWhereUniqueInput!]
}

input ShoutCreateManyWithoutNvoidInput {
  create: [ShoutCreateWithoutNvoidInput!]
  connect: [ShoutWhereUniqueInput!]
}

input ShoutCreateManyWithoutPostedByInput {
  create: [ShoutCreateWithoutPostedByInput!]
  connect: [ShoutWhereUniqueInput!]
}

input ShoutCreateOneWithoutEchosInput {
  create: ShoutCreateWithoutEchosInput
  connect: ShoutWhereUniqueInput
}

input ShoutCreateOneWithoutRepliesInput {
  create: ShoutCreateWithoutRepliesInput
  connect: ShoutWhereUniqueInput
}

input ShoutCreateWithoutEchosInput {
  voteCount: Int!
  shoutId: ID
  content: String!
  postedBy: UserCreateOneWithoutCreatedShoutsInput!
  nvoid: NVoidCreateOneWithoutShoutsInput!
  replies: ReplyCreateManyWithoutOriginalShoutInput
}

input ShoutCreateWithoutNvoidInput {
  voteCount: Int!
  shoutId: ID
  content: String!
  postedBy: UserCreateOneWithoutCreatedShoutsInput!
  echos: EchoCreateManyWithoutOriginalShoutInput
  replies: ReplyCreateManyWithoutOriginalShoutInput
}

input ShoutCreateWithoutPostedByInput {
  voteCount: Int!
  shoutId: ID
  content: String!
  echos: EchoCreateManyWithoutOriginalShoutInput
  nvoid: NVoidCreateOneWithoutShoutsInput!
  replies: ReplyCreateManyWithoutOriginalShoutInput
}

input ShoutCreateWithoutRepliesInput {
  voteCount: Int!
  shoutId: ID
  content: String!
  postedBy: UserCreateOneWithoutCreatedShoutsInput!
  echos: EchoCreateManyWithoutOriginalShoutInput
  nvoid: NVoidCreateOneWithoutShoutsInput!
}

type ShoutEdge {
  node: Shout!
  cursor: String!
}

enum ShoutOrderByInput {
  voteCount_ASC
  voteCount_DESC
  shoutId_ASC
  shoutId_DESC
  createdAt_ASC
  createdAt_DESC
  content_ASC
  content_DESC
}

type ShoutPreviousValues {
  voteCount: Int!
  shoutId: ID!
  createdAt: DateTime!
  content: String!
}

input ShoutScalarWhereInput {
  voteCount: Int
  voteCount_not: Int
  voteCount_in: [Int!]
  voteCount_not_in: [Int!]
  voteCount_lt: Int
  voteCount_lte: Int
  voteCount_gt: Int
  voteCount_gte: Int
  shoutId: ID
  shoutId_not: ID
  shoutId_in: [ID!]
  shoutId_not_in: [ID!]
  shoutId_lt: ID
  shoutId_lte: ID
  shoutId_gt: ID
  shoutId_gte: ID
  shoutId_contains: ID
  shoutId_not_contains: ID
  shoutId_starts_with: ID
  shoutId_not_starts_with: ID
  shoutId_ends_with: ID
  shoutId_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [ShoutScalarWhereInput!]
  OR: [ShoutScalarWhereInput!]
  NOT: [ShoutScalarWhereInput!]
}

type ShoutSubscriptionPayload {
  mutation: MutationType!
  node: Shout
  updatedFields: [String!]
  previousValues: ShoutPreviousValues
}

input ShoutSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShoutWhereInput
  AND: [ShoutSubscriptionWhereInput!]
  OR: [ShoutSubscriptionWhereInput!]
  NOT: [ShoutSubscriptionWhereInput!]
}

input ShoutUpdateDataInput {
  voteCount: Int
  content: String
  postedBy: UserUpdateOneRequiredWithoutCreatedShoutsInput
  echos: EchoUpdateManyWithoutOriginalShoutInput
  nvoid: NVoidUpdateOneRequiredWithoutShoutsInput
  replies: ReplyUpdateManyWithoutOriginalShoutInput
}

input ShoutUpdateInput {
  voteCount: Int
  content: String
  postedBy: UserUpdateOneRequiredWithoutCreatedShoutsInput
  echos: EchoUpdateManyWithoutOriginalShoutInput
  nvoid: NVoidUpdateOneRequiredWithoutShoutsInput
  replies: ReplyUpdateManyWithoutOriginalShoutInput
}

input ShoutUpdateManyDataInput {
  voteCount: Int
  content: String
}

input ShoutUpdateManyInput {
  create: [ShoutCreateInput!]
  update: [ShoutUpdateWithWhereUniqueNestedInput!]
  upsert: [ShoutUpsertWithWhereUniqueNestedInput!]
  delete: [ShoutWhereUniqueInput!]
  connect: [ShoutWhereUniqueInput!]
  set: [ShoutWhereUniqueInput!]
  disconnect: [ShoutWhereUniqueInput!]
  deleteMany: [ShoutScalarWhereInput!]
  updateMany: [ShoutUpdateManyWithWhereNestedInput!]
}

input ShoutUpdateManyMutationInput {
  voteCount: Int
  content: String
}

input ShoutUpdateManyWithoutNvoidInput {
  create: [ShoutCreateWithoutNvoidInput!]
  delete: [ShoutWhereUniqueInput!]
  connect: [ShoutWhereUniqueInput!]
  set: [ShoutWhereUniqueInput!]
  disconnect: [ShoutWhereUniqueInput!]
  update: [ShoutUpdateWithWhereUniqueWithoutNvoidInput!]
  upsert: [ShoutUpsertWithWhereUniqueWithoutNvoidInput!]
  deleteMany: [ShoutScalarWhereInput!]
  updateMany: [ShoutUpdateManyWithWhereNestedInput!]
}

input ShoutUpdateManyWithoutPostedByInput {
  create: [ShoutCreateWithoutPostedByInput!]
  delete: [ShoutWhereUniqueInput!]
  connect: [ShoutWhereUniqueInput!]
  set: [ShoutWhereUniqueInput!]
  disconnect: [ShoutWhereUniqueInput!]
  update: [ShoutUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [ShoutUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [ShoutScalarWhereInput!]
  updateMany: [ShoutUpdateManyWithWhereNestedInput!]
}

input ShoutUpdateManyWithWhereNestedInput {
  where: ShoutScalarWhereInput!
  data: ShoutUpdateManyDataInput!
}

input ShoutUpdateOneRequiredWithoutEchosInput {
  create: ShoutCreateWithoutEchosInput
  update: ShoutUpdateWithoutEchosDataInput
  upsert: ShoutUpsertWithoutEchosInput
  connect: ShoutWhereUniqueInput
}

input ShoutUpdateOneRequiredWithoutRepliesInput {
  create: ShoutCreateWithoutRepliesInput
  update: ShoutUpdateWithoutRepliesDataInput
  upsert: ShoutUpsertWithoutRepliesInput
  connect: ShoutWhereUniqueInput
}

input ShoutUpdateWithoutEchosDataInput {
  voteCount: Int
  content: String
  postedBy: UserUpdateOneRequiredWithoutCreatedShoutsInput
  nvoid: NVoidUpdateOneRequiredWithoutShoutsInput
  replies: ReplyUpdateManyWithoutOriginalShoutInput
}

input ShoutUpdateWithoutNvoidDataInput {
  voteCount: Int
  content: String
  postedBy: UserUpdateOneRequiredWithoutCreatedShoutsInput
  echos: EchoUpdateManyWithoutOriginalShoutInput
  replies: ReplyUpdateManyWithoutOriginalShoutInput
}

input ShoutUpdateWithoutPostedByDataInput {
  voteCount: Int
  content: String
  echos: EchoUpdateManyWithoutOriginalShoutInput
  nvoid: NVoidUpdateOneRequiredWithoutShoutsInput
  replies: ReplyUpdateManyWithoutOriginalShoutInput
}

input ShoutUpdateWithoutRepliesDataInput {
  voteCount: Int
  content: String
  postedBy: UserUpdateOneRequiredWithoutCreatedShoutsInput
  echos: EchoUpdateManyWithoutOriginalShoutInput
  nvoid: NVoidUpdateOneRequiredWithoutShoutsInput
}

input ShoutUpdateWithWhereUniqueNestedInput {
  where: ShoutWhereUniqueInput!
  data: ShoutUpdateDataInput!
}

input ShoutUpdateWithWhereUniqueWithoutNvoidInput {
  where: ShoutWhereUniqueInput!
  data: ShoutUpdateWithoutNvoidDataInput!
}

input ShoutUpdateWithWhereUniqueWithoutPostedByInput {
  where: ShoutWhereUniqueInput!
  data: ShoutUpdateWithoutPostedByDataInput!
}

input ShoutUpsertWithoutEchosInput {
  update: ShoutUpdateWithoutEchosDataInput!
  create: ShoutCreateWithoutEchosInput!
}

input ShoutUpsertWithoutRepliesInput {
  update: ShoutUpdateWithoutRepliesDataInput!
  create: ShoutCreateWithoutRepliesInput!
}

input ShoutUpsertWithWhereUniqueNestedInput {
  where: ShoutWhereUniqueInput!
  update: ShoutUpdateDataInput!
  create: ShoutCreateInput!
}

input ShoutUpsertWithWhereUniqueWithoutNvoidInput {
  where: ShoutWhereUniqueInput!
  update: ShoutUpdateWithoutNvoidDataInput!
  create: ShoutCreateWithoutNvoidInput!
}

input ShoutUpsertWithWhereUniqueWithoutPostedByInput {
  where: ShoutWhereUniqueInput!
  update: ShoutUpdateWithoutPostedByDataInput!
  create: ShoutCreateWithoutPostedByInput!
}

input ShoutWhereInput {
  voteCount: Int
  voteCount_not: Int
  voteCount_in: [Int!]
  voteCount_not_in: [Int!]
  voteCount_lt: Int
  voteCount_lte: Int
  voteCount_gt: Int
  voteCount_gte: Int
  shoutId: ID
  shoutId_not: ID
  shoutId_in: [ID!]
  shoutId_not_in: [ID!]
  shoutId_lt: ID
  shoutId_lte: ID
  shoutId_gt: ID
  shoutId_gte: ID
  shoutId_contains: ID
  shoutId_not_contains: ID
  shoutId_starts_with: ID
  shoutId_not_starts_with: ID
  shoutId_ends_with: ID
  shoutId_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  postedBy: UserWhereInput
  echos_every: EchoWhereInput
  echos_some: EchoWhereInput
  echos_none: EchoWhereInput
  nvoid: NVoidWhereInput
  replies_every: ReplyWhereInput
  replies_some: ReplyWhereInput
  replies_none: ReplyWhereInput
  AND: [ShoutWhereInput!]
  OR: [ShoutWhereInput!]
  NOT: [ShoutWhereInput!]
}

input ShoutWhereUniqueInput {
  shoutId: ID
}

type Subscription {
  echo(where: EchoSubscriptionWhereInput): EchoSubscriptionPayload
  nVoid(where: NVoidSubscriptionWhereInput): NVoidSubscriptionPayload
  reply(where: ReplySubscriptionWhereInput): ReplySubscriptionPayload
  shout(where: ShoutSubscriptionWhereInput): ShoutSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  createdAt: DateTime!
  userId: ID!
  createdShouts(where: ShoutWhereInput, orderBy: ShoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shout!]
  savedShouts(where: ShoutWhereInput, orderBy: ShoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shout!]
  echoedShouts(where: EchoWhereInput, orderBy: EchoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Echo!]
  echoes(where: EchoWhereInput, orderBy: EchoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Echo!]
  savedVoids(where: NVoidWhereInput, orderBy: NVoidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NVoid!]
  currentLocationGeohash: String!
  username: String!
  password: String!
  replies(where: ReplyWhereInput, orderBy: ReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reply!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  userId: ID
  createdShouts: ShoutCreateManyWithoutPostedByInput
  savedShouts: ShoutCreateManyInput
  echoedShouts: EchoCreateManyWithoutEchoedByInput
  echoes: EchoCreateManyWithoutCreatedByInput
  savedVoids: NVoidCreateManyInput
  currentLocationGeohash: String!
  username: String!
  password: String!
  replies: ReplyCreateManyWithoutPostedByInput
}

input UserCreateOneWithoutCreatedShoutsInput {
  create: UserCreateWithoutCreatedShoutsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEchoedShoutsInput {
  create: UserCreateWithoutEchoedShoutsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEchoesInput {
  create: UserCreateWithoutEchoesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRepliesInput {
  create: UserCreateWithoutRepliesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCreatedShoutsInput {
  userId: ID
  savedShouts: ShoutCreateManyInput
  echoedShouts: EchoCreateManyWithoutEchoedByInput
  echoes: EchoCreateManyWithoutCreatedByInput
  savedVoids: NVoidCreateManyInput
  currentLocationGeohash: String!
  username: String!
  password: String!
  replies: ReplyCreateManyWithoutPostedByInput
}

input UserCreateWithoutEchoedShoutsInput {
  userId: ID
  createdShouts: ShoutCreateManyWithoutPostedByInput
  savedShouts: ShoutCreateManyInput
  echoes: EchoCreateManyWithoutCreatedByInput
  savedVoids: NVoidCreateManyInput
  currentLocationGeohash: String!
  username: String!
  password: String!
  replies: ReplyCreateManyWithoutPostedByInput
}

input UserCreateWithoutEchoesInput {
  userId: ID
  createdShouts: ShoutCreateManyWithoutPostedByInput
  savedShouts: ShoutCreateManyInput
  echoedShouts: EchoCreateManyWithoutEchoedByInput
  savedVoids: NVoidCreateManyInput
  currentLocationGeohash: String!
  username: String!
  password: String!
  replies: ReplyCreateManyWithoutPostedByInput
}

input UserCreateWithoutRepliesInput {
  userId: ID
  createdShouts: ShoutCreateManyWithoutPostedByInput
  savedShouts: ShoutCreateManyInput
  echoedShouts: EchoCreateManyWithoutEchoedByInput
  echoes: EchoCreateManyWithoutCreatedByInput
  savedVoids: NVoidCreateManyInput
  currentLocationGeohash: String!
  username: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  userId_ASC
  userId_DESC
  currentLocationGeohash_ASC
  currentLocationGeohash_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  createdAt: DateTime!
  userId: ID!
  currentLocationGeohash: String!
  username: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  createdShouts: ShoutUpdateManyWithoutPostedByInput
  savedShouts: ShoutUpdateManyInput
  echoedShouts: EchoUpdateManyWithoutEchoedByInput
  echoes: EchoUpdateManyWithoutCreatedByInput
  savedVoids: NVoidUpdateManyInput
  currentLocationGeohash: String
  username: String
  password: String
  replies: ReplyUpdateManyWithoutPostedByInput
}

input UserUpdateManyMutationInput {
  currentLocationGeohash: String
  username: String
  password: String
}

input UserUpdateOneRequiredWithoutCreatedShoutsInput {
  create: UserCreateWithoutCreatedShoutsInput
  update: UserUpdateWithoutCreatedShoutsDataInput
  upsert: UserUpsertWithoutCreatedShoutsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutEchoedShoutsInput {
  create: UserCreateWithoutEchoedShoutsInput
  update: UserUpdateWithoutEchoedShoutsDataInput
  upsert: UserUpsertWithoutEchoedShoutsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutEchoesInput {
  create: UserCreateWithoutEchoesInput
  update: UserUpdateWithoutEchoesDataInput
  upsert: UserUpsertWithoutEchoesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutRepliesInput {
  create: UserCreateWithoutRepliesInput
  update: UserUpdateWithoutRepliesDataInput
  upsert: UserUpsertWithoutRepliesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCreatedShoutsDataInput {
  savedShouts: ShoutUpdateManyInput
  echoedShouts: EchoUpdateManyWithoutEchoedByInput
  echoes: EchoUpdateManyWithoutCreatedByInput
  savedVoids: NVoidUpdateManyInput
  currentLocationGeohash: String
  username: String
  password: String
  replies: ReplyUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutEchoedShoutsDataInput {
  createdShouts: ShoutUpdateManyWithoutPostedByInput
  savedShouts: ShoutUpdateManyInput
  echoes: EchoUpdateManyWithoutCreatedByInput
  savedVoids: NVoidUpdateManyInput
  currentLocationGeohash: String
  username: String
  password: String
  replies: ReplyUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutEchoesDataInput {
  createdShouts: ShoutUpdateManyWithoutPostedByInput
  savedShouts: ShoutUpdateManyInput
  echoedShouts: EchoUpdateManyWithoutEchoedByInput
  savedVoids: NVoidUpdateManyInput
  currentLocationGeohash: String
  username: String
  password: String
  replies: ReplyUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutRepliesDataInput {
  createdShouts: ShoutUpdateManyWithoutPostedByInput
  savedShouts: ShoutUpdateManyInput
  echoedShouts: EchoUpdateManyWithoutEchoedByInput
  echoes: EchoUpdateManyWithoutCreatedByInput
  savedVoids: NVoidUpdateManyInput
  currentLocationGeohash: String
  username: String
  password: String
}

input UserUpsertWithoutCreatedShoutsInput {
  update: UserUpdateWithoutCreatedShoutsDataInput!
  create: UserCreateWithoutCreatedShoutsInput!
}

input UserUpsertWithoutEchoedShoutsInput {
  update: UserUpdateWithoutEchoedShoutsDataInput!
  create: UserCreateWithoutEchoedShoutsInput!
}

input UserUpsertWithoutEchoesInput {
  update: UserUpdateWithoutEchoesDataInput!
  create: UserCreateWithoutEchoesInput!
}

input UserUpsertWithoutRepliesInput {
  update: UserUpdateWithoutRepliesDataInput!
  create: UserCreateWithoutRepliesInput!
}

input UserWhereInput {
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  createdShouts_every: ShoutWhereInput
  createdShouts_some: ShoutWhereInput
  createdShouts_none: ShoutWhereInput
  savedShouts_every: ShoutWhereInput
  savedShouts_some: ShoutWhereInput
  savedShouts_none: ShoutWhereInput
  echoedShouts_every: EchoWhereInput
  echoedShouts_some: EchoWhereInput
  echoedShouts_none: EchoWhereInput
  echoes_every: EchoWhereInput
  echoes_some: EchoWhereInput
  echoes_none: EchoWhereInput
  savedVoids_every: NVoidWhereInput
  savedVoids_some: NVoidWhereInput
  savedVoids_none: NVoidWhereInput
  currentLocationGeohash: String
  currentLocationGeohash_not: String
  currentLocationGeohash_in: [String!]
  currentLocationGeohash_not_in: [String!]
  currentLocationGeohash_lt: String
  currentLocationGeohash_lte: String
  currentLocationGeohash_gt: String
  currentLocationGeohash_gte: String
  currentLocationGeohash_contains: String
  currentLocationGeohash_not_contains: String
  currentLocationGeohash_starts_with: String
  currentLocationGeohash_not_starts_with: String
  currentLocationGeohash_ends_with: String
  currentLocationGeohash_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  replies_every: ReplyWhereInput
  replies_some: ReplyWhereInput
  replies_none: ReplyWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  userId: ID
  username: String
}
`
      }
    