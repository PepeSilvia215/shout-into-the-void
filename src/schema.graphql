# container of all post messages, such as shout, echo, and replies
# designed so that these are created when an original shout or reply is created
# saves space since all saved shouts, echos, saved echos, and saved replies will
# connect to this and it will only be created once
# also will present unique deletion method where when a user deletes their own shout,
# they can choose to delete the shout and the reference content
# this will cause any that uses this like saved shouts, echos, and saved replies 
# will no longer have the content, very similar to reddits delete function and users
# will see a placeholder. a refernce will be made if this user choses to delete all
# of their content in the future, in a deeper menu to be made
type Content {
    contentId: ID! 
    createdAt: String! 
    createdBy: User! 
    message: String!
}
type UserLocation {
    userLocationId: ID! 
    userGeohash: String!
    createdAt: String! 
    createdBy: User! 
}
type User {
    userId: ID! 
    createdAt: String! 
    username: String!
    password: String!
    #currentLocationGeohash: String!
    lastLocation: UserLocation
    locationHistory: [UserLocation!]
    #lastLocationUpdateTime: String!
    createdContent: [Content!]
    createdVoids: [NVoid!]
    savedVoids: [UserSavedVoid!]
    createdShoutsInVoids: [ShoutInVoid!]
    activatedEchosOfShouts: [UserActivatedEchoOfShout!]
    createdEchosOfShoutsInVoid: [EchoOfShoutInVoid!]
    repliesToShoutsInVoid: [ReplyToShoutInVoid!]
    repliesToEchosOfShoutsInVoid: [ReplyToEchoOfShoutInVoid!] 
}
type ShoutInVoid {
    shoutInVoidId: ID! 
    createdAt: String! 
    createdBy: User! 
    content: Content!
    contenMessageHash: String # to make shout message unique
    nVoid: NVoid! 
    voteCount: Int!
    echos: [EchoOfShoutInVoid!]
    replies: [ReplyToShoutInVoid!]
}
type ReplyToShoutInVoid {
    replyToShoutInVoidId: ID! 
    createdAt: String! 
    createdBy: User! 
    content: Content! 
    voteCount: Int!
    originalShoutInVoid: ShoutInVoid! 
}
type UserActivatedEchoOfShout {
    userActivatedEchoOfShoutId: ID! 
    createdAt: String! 
    createdBy: User! 
    originalShoutContent: Content! 
    originalShoutVoidGeohash: String!
    originalEchoOfShoutInVoid: EchoOfShoutInVoid 
}
type EchoOfShoutInVoid {
    echoOfShoutInVoidId: ID! 
    createdAt: String! 
    createdBy: User! 
    originalShoutContent: Content! 
    originalShoutVoidGeohash: String!
    originalShoutInVoid: ShoutInVoid! 
    originalEchoOfShoutInVoid: EchoOfShoutInVoid # used if echo of echo
    nVoid: NVoid! 
    voteCount: Int!
    echosOfEchos: [EchoOfShoutInVoid!] # used to find echos of echo
    replies: [ReplyToEchoOfShoutInVoid!] 
}
type ReplyToEchoOfShoutInVoid {
    replyToEchoOfShoutInVoidId: ID! 
    createdAt: String! 
    createdBy: User! 
    content: Content! 
    voteCount: Int!
    originalEchoOfShoutInVoid: EchoOfShoutInVoid! 
}
type NVoid {
    voidId: ID! 
    createdAt: String! 
    createdBy: User! 
    voidGeohash: String!
    shouts: [ShoutInVoid!]
    echos: [EchoOfShoutInVoid!]
}
type UserSavedVoid {
    userSavedVoidId: ID! 
    createdAt: String! 
    createdBy: User! 
    originalVoidGeohash: String!
}
type AuthPayload {
    token: String
    user: User
}
type Query {
    myUser: User
    nearbyVoidGeohashes: [String!]
    getNearbyVoidGeohashesByLocation(geohash: String!): [String!]
    getVoidByVoidGeohash(voidGeohash: String!): NVoid
#    getVoidById(voidId: ID!): NVoid
#    getVoidByLocation(geohash: String!): NVoid
#    # shouldnt actually need anythign else, otherwise its for admin clients
#    #adminGetShout(shoutId: ID!): Shout
#    #adminGetVoid(voidId: ID!); NVoid
#    #getEchoInVoid(echoInVoidId: ID!): Echo
#    #getShout(shoutId: ID!): Shout
#    #getReply(replayId: ID!): Reply
}
type Mutation {
#    #todo: add all unsave mutations
    login(username: String!, password: String!): AuthPayload
    signup(username: String!, password: String!): AuthPayload
    updateLocation(geohash: String!): User! # todo: should this return UserLocaton to optimize?
    shoutIntoTheVoid(message: String!): ShoutInVoid
#    shoutInVoid(content: String!): ShoutInVoid
#    upvoteShout(shoutInVoidId: ID!): ShoutInVoid!
#    downvoteShout(shoutInVoidId: ID!): ShoutInVoid!
#    saveShout(shoutInVoidId: ID!): SavedShoutInVoid!
#    replyToShout(shoutInVoidId: ID!): ReplyToShoutInVoid
#    upvoteReplyToShout(replyToShoutInVoidId: ID!): ReplyToShoutInVoid! 
#    downvoteReplyToShout(replyToShoutInVoidId: ID!): ReplyToShoutInVoid!
#    saveReplyToShout(replyToShoutInVoidId: ID!): SavedReplyToShoutInVoid!
#    unsaveReplyToShout(savedReplyToShoutInVoidId: ID!): User! #what should this be
#    saveShoutAndEchoInVoid(shoutInVoidId: ID!): EchoInVoid!
#    echoInVoid(savedShoutId: ID!): EchoInVoid!
#    upvoteEcho(echoInVoidId: ID!): EchoInVoid!
#    downvoteEcho(echoInVoidId: ID!): EchoInVoid!
#    saveEcho(echoInVoidId: ID!): SavedEcho!
#    saveReplyToEcho(replyToEchoInVoidId: ID!); SavedReplyToEchoInVoid!
#    upvoteReplyToEcho(replyToEchoInVoidId: ID!); ReplyToEchoInVoid!
#    downvoteReplyToEcho(replyToEchoInVoidId: ID!); ReplyToEchoInVoid!
#    #todo: did i get em all?
#    saveVoid(voidId: ID!): User!
#    #todo: echo replies? seems crazy...
}

















#type User {
#    userId: ID!
#    createdAt: String!
#    username: String!
#    password: String!
#    currentLocationGeohash: String!
#    shoutsInVoids: [ShoutInVoid!]
#    savedShouts: [SavedShout!]
#    echosInVoids: [EchoInVoid!]
#    savedEchos: [SavedEcho!]
#    repliesToShoutsInVoids: [ReplyToShoutInVoid!]
#    savedRepliesToShoutsInVoids: [SavedReplyToShoutInVoid!]
#    repliesToEchosInVoids: [ReplyToEchoInVoid!]
#    savedRepliesToEchosInVoids: [SavedReplyToEchoInVoid!]
#    savedVoids: [SavedVoid!]
#}
#type ShoutInVoid {
#    shoutInVoidId: ID!
#    createdAt: String!
#    shoutedBy: User!
#    content: Content!
#    voteCount: Int!
#    nvoid: NVoid!
#    savedShouts: [SavedShout!]
#    replies: [ReplyToShoutInVoid!]
#    # would only be used if no one has the shout still saved but want to see if an echo still has its original shout
#    echoEdges: [EchoEdge!]
#}
#type ReplyToShoutInVoid {
#    replyToShoutInVoidId: ID!
#    createdAt: String!
#    createdBy: User!
#    content: Content!
#    voteCount: Int!
#    shoutInVoid: ShoutInVoid!
#    savedReplies: [SavedReplyToShoutInVoid!]
#}
#type SavedReplyToShoutInVoid {
#    savedReplyToShoutInVoidId: ID!
#    createdAt: String!
#    savedBy: User!
#    originalReplyContent: Content!
#    originalShoutContent: Content!
#    originalVoidGeohash: String!
#    replyToShoutInVoid: ReplyToShoutInVoid!
#}
## user saves a shout in void
#type SavedShout {
#    savedShoutId: ID!
#    createdAt: String!
#    savedBy: User!
#    originalContent: Content!
#    originalShoutVoidGeohash: String!
#    shoutInVoid: ShoutInVoid!
#    echoEdges: [EchoEdge!]
#}
#type EchoEdge { # used soo that when a saved shout is deleted or shout is deleted we can still see if it was echoed
#    echoEdegId: ID! 
#    shoutInVoid: ShoutInVoid 
#    savedShout: SavedShout 
#    echoInVoid: EchoInVoid 
#    savedEcho: SavedEcho
#}
## echo of a saved shout
#type EchoInVoid {
#    echoInVoidId: ID!
#    createdAt: String!
#    echoedBy: User!
#    originalContent: Content!
#    voteCount: Int!
#    originalShoutVoidGeohash: String!
#    nvoid: NVoid!
#    savedEchos: [SavedEcho!]
#    replies: [ReplyToEchoInVoid!]
#    echoEdge: EchoEdge
#}
#type ReplyToEchoInVoid {
#    replyToEchoInVoidId: ID!
#    createdAt: String!
#    createdBy: User!
#    content: Content!
#    voteCount: Int!
#    echoInVoid: EchoInVoid!
#    savedReplies: [SavedReplyToEchoInVoid!]
#}
#type SavedReplyToEchoInVoid {
#    savedReplyToEchoInVoid: ID!
#    createdAt: String!
#    savedBy: User!
#    originalReplyContent: Content!
#    originalShoutContent: Content!
#    originalVoidGeohash: String!
#    replyToEchoInVoid: ReplyToEchoInVoid!
#}
#type SavedEcho {
#    savedEcho: ID!
#    createdAt: String!
#    savedBy: User!
#    originalContent: Content!
#    originalShoutVoidGeohash: String!
#    originalEchoVoidGeohash: String!
#    echoInVoid: EchoInVoid
#}
#type NVoid {
#    voidId: ID!
#    createdAt: String!
#    createdBy: User!
#    voidGeohash: String!
#    shouts: [ShoutInVoid!]
#    echos: [EchoInVoid!]
#}
#type SavedVoid {
#    savedVoidId: ID!
#    createdAt: String!
#    createdBy: User!
#    voidGeohash: String!
#}
#type AuthPayload {
#    token: String
#    user: User
#}
#type Query {
#    getUser(userId: ID!): User
#    getVoidById(voidId: ID!): NVoid
#    getVoidByLocation(geohash: String!): NVoid
#    # shouldnt actually need anythign else, otherwise its for admin clients
#    #adminGetShout(shoutId: ID!): Shout
#    #adminGetVoid(voidId: ID!); NVoid
#    #getEchoInVoid(echoInVoidId: ID!): Echo
#    #getShout(shoutId: ID!): Shout
#    #getReply(replayId: ID!): Reply
#}
#type Mutation {
#    #todo: add all unsave mutations
#    login(username: String!, password: String!): AuthPayload
#    signup(username: String!, password: String!, currentLocationGeohash: String!): AuthPayload
#    updateLocation(currentLocationGeohash: String!): User!
#    shoutInVoid(content: String!): ShoutInVoid
#    upvoteShout(shoutInVoidId: ID!): ShoutInVoid!
#    downvoteShout(shoutInVoidId: ID!): ShoutInVoid!
#    saveShout(shoutInVoidId: ID!): SavedShoutInVoid!
#    replyToShout(shoutInVoidId: ID!): ReplyToShoutInVoid
#    upvoteReplyToShout(replyToShoutInVoidId: ID!): ReplyToShoutInVoid! 
#    downvoteReplyToShout(replyToShoutInVoidId: ID!): ReplyToShoutInVoid!
#    saveReplyToShout(replyToShoutInVoidId: ID!): SavedReplyToShoutInVoid!
#    unsaveReplyToShout(savedReplyToShoutInVoidId: ID!): User! #what should this be
#    saveShoutAndEchoInVoid(shoutInVoidId: ID!): EchoInVoid!
#    echoInVoid(savedShoutId: ID!): EchoInVoid!
#    upvoteEcho(echoInVoidId: ID!): EchoInVoid!
#    downvoteEcho(echoInVoidId: ID!): EchoInVoid!
#    saveEcho(echoInVoidId: ID!): SavedEcho!
#    saveReplyToEcho(replyToEchoInVoidId: ID!); SavedReplyToEchoInVoid!
#    upvoteReplyToEcho(replyToEchoInVoidId: ID!); ReplyToEchoInVoid!
#    downvoteReplyToEcho(replyToEchoInVoidId: ID!); ReplyToEchoInVoid!
#    #todo: did i get em all?
#    saveVoid(voidId: ID!): User!
#    #todo: echo replies? seems crazy...
#}
##type Shitpost {
##    shitpostId: ID! 
##    postedBy: User! 
##    createdAt: String! 
##    encryptedContent: String!
##    channel: Channel!
##}
#
##type Channel {
##    channelId: ID!
##    name: String!
##    owner: User! 
##    createdAt: String! 
##    memberEdges: [Edge!] 
##    shitposts: [Shitpost!] 
##}
#
##type User {
#    userId: ID! 
#    name: String!
#    memberOfChannelEdges: [Edge!]  
#    ownerOfChannels: [Channel!] 
#}

#type Edge {
#    edgeId: ID!
#    user: User!
#    channel: Channel!
#}

#ype AuthPayload {
#    token: String
#    user: User
#}

#type Query {
    #getShitpost(shitpostId: ID!): Shitpost
    #getChannel(channelId: ID!): Channel
    #getUser(userId: ID!): User
#}

#type Mutation {
    #login(email: String!, password: String!): AuthPayload
    #signup(email: String!, password: String!, name: String!): AuthPayload
    #createChannel(name: String!): Channel
    #addMember(channelId: ID!, memberUserId: ID!): User
    #shitpost(encryptedContent: String!, channelId: ID!): Shitpost
    #deleteShitpost(shitpostId: ID!): Shitpost
    #removeMember(channelId: ID!, memberId: ID!): Channel!
    #deleteChannel(channelId: ID!): Channel
#}