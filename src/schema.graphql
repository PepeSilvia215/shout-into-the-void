# container of all post messages, such as shout, echo, and replies
# designed so that these are created when an original shout or reply is created
# saves space since all saved shouts, echos, saved echos, and saved replies will
# connect to this and it will only be created once
# also will present unique deletion method where when a user deletes their own shout,
# they can choose to delete the shout and the reference content
# this will cause any that uses this like saved shouts, echos, and saved replies 
# will no longer have the content, very similar to reddits delete function and users
# will see a placeholder. a refernce will be made if this user choses to delete all
# of their content in the future, in a deeper menu to be made
type Content {
    contentId: ID! 
    createdAt: String! 
    createdBy: User! 
    message: String!
}
type VoteBucket {
    voteBucketId: ID!
    #createdAt: String!
    voteCount: Int!
    votes: [Vote!]
}
type Vote {
    voteId: ID!
    #createdAt: String!
    updatedAt: String!
    createdBy: User!
    voteBucket: VoteBucket!
    isUpvote: Boolean!
    uniqueHash: String!
}
type UserLocation {
    userLocationId: ID! 
    userGeohash: String!
    createdAt: String! 
    createdBy: User! 
}
type User {
    userId: ID! 
    createdAt: String! 
    username: String!
    password: String!
    lastLocation: UserLocation
    locationHistory: [UserLocation!]
    createdContent: [Content!]
    createdVotes: [Vote!]
    createdVoids: [NVoid!]
    savedVoids: [UserSavedVoid!]
    createdShoutsInVoids: [ShoutInVoid!]
    activatedEchosOfShouts: [UserActivatedEchoOfShout!]
    createdEchosOfShoutsInVoid: [EchoOfShoutInVoid!]
    repliesToShoutsInVoid: [ReplyToShoutInVoid!]
    repliesToEchosOfShoutsInVoid: [ReplyToEchoOfShoutInVoid!] 
}
type ShoutInVoid {
    shoutInVoidId: ID! 
    createdAt: String! 
    createdBy: User! 
    content: Content!
    uniqueContentMessageHash: String # to make shout message unique
    nVoid: NVoid! 
    voteBucket: VoteBucket!
    #voteCount: Int!
    echos: [EchoOfShoutInVoid!]
    replies: [ReplyToShoutInVoid!]
}
type ReplyToShoutInVoid {
    replyToShoutInVoidId: ID! 
    createdAt: String! 
    createdBy: User! 
    content: Content! 
    voteBucket: VoteBucket!
    #voteCount: Int!
    originalShoutInVoid: ShoutInVoid! 
}
type UserActivatedEchoOfShout {
    userActivatedEchoOfShoutId: ID! 
    createdAt: String! 
    createdBy: User! 
    originalShoutContent: Content! 
    originalShoutVoidGeohash: String!
    originalEchoOfShoutInVoid: EchoOfShoutInVoid 
}
type EchoOfShoutInVoid {
    echoOfShoutInVoidId: ID! 
    createdAt: String! 
    createdBy: User! 
    originalShoutContent: Content! 
    originalShoutVoidGeohash: String!
    originalShoutInVoid: ShoutInVoid! 
    originalEchoOfShoutInVoid: EchoOfShoutInVoid # used if echo of echo
    nVoid: NVoid! 
    voteBucket: VoteBucket!
    #voteCount: Int!
    echosOfEchos: [EchoOfShoutInVoid!] # used to find echos of echo
    replies: [ReplyToEchoOfShoutInVoid!] 
}
type ReplyToEchoOfShoutInVoid {
    replyToEchoOfShoutInVoidId: ID! 
    createdAt: String! 
    createdBy: User! 
    content: Content! 
    voteBucket: VoteBucket!
    #voteCount: Int!
    originalEchoOfShoutInVoid: EchoOfShoutInVoid! 
}
type NVoid {
    voidId: ID! 
    createdAt: String! 
    createdBy: User! 
    voidGeohash: String!
    shouts: [ShoutInVoid!]
    echos: [EchoOfShoutInVoid!]
}
type UserSavedVoid {
    userSavedVoidId: ID! 
    createdAt: String! 
    createdBy: User! 
    originalVoidGeohash: String!
}
type AuthPayload {
    token: String
    user: User
}
type Query {
    myUser: User
    # nearbyVoids: [NVoid!]
    nearbyVoidGeohashes: [String!]
    # todo: querys for users to explore outside of location
    # getNearbyVoidGeohashesByLocation(geohash: String!): [NVoid!]
    getVoidByVoidGeohash(voidGeohash: String!): NVoid
#    getVoidById(voidId: ID!): NVoid
#    getVoidByLocation(geohash: String!): NVoid
#    # shouldnt actually need anythign else, otherwise its for admin clients
#    #adminGetShout(shoutId: ID!): Shout
#    #adminGetVoid(voidId: ID!); NVoid
#    #getEchoInVoid(echoInVoidId: ID!): Echo
#    #getShout(shoutId: ID!): Shout
#    #getReply(replayId: ID!): Reply
}
type Mutation {
#    #todo: add all unsave mutations
    login(username: String!, password: String!): AuthPayload
    signup(username: String!, password: String!): AuthPayload
    updateLocation(geohash: String!): User! # todo: should this return UserLocaton to optimize?
    shoutIntoTheVoid(message: String!): ShoutInVoid
    upvoteShout(shoutInVoidId: ID!): VoteBucket!
    downvoteShout(shoutInVoidId: ID!): VoteBucket 
#    shoutInVoid(content: String!): ShoutInVoid
#    upvoteShout(shoutInVoidId: ID!): ShoutInVoid!
#    downvoteShout(shoutInVoidId: ID!): ShoutInVoid!
#    saveShout(shoutInVoidId: ID!): SavedShoutInVoid!
#    replyToShout(shoutInVoidId: ID!): ReplyToShoutInVoid
#    upvoteReplyToShout(replyToShoutInVoidId: ID!): ReplyToShoutInVoid! 
#    downvoteReplyToShout(replyToShoutInVoidId: ID!): ReplyToShoutInVoid!
#    saveReplyToShout(replyToShoutInVoidId: ID!): SavedReplyToShoutInVoid!
#    unsaveReplyToShout(savedReplyToShoutInVoidId: ID!): User! #what should this be
#    saveShoutAndEchoInVoid(shoutInVoidId: ID!): EchoInVoid!
#    echoInVoid(savedShoutId: ID!): EchoInVoid!
#    upvoteEcho(echoInVoidId: ID!): EchoInVoid!
#    downvoteEcho(echoInVoidId: ID!): EchoInVoid!
#    saveEcho(echoInVoidId: ID!): SavedEcho!
#    saveReplyToEcho(replyToEchoInVoidId: ID!); SavedReplyToEchoInVoid!
#    upvoteReplyToEcho(replyToEchoInVoidId: ID!); ReplyToEchoInVoid!
#    downvoteReplyToEcho(replyToEchoInVoidId: ID!); ReplyToEchoInVoid!
#    #todo: did i get em all?
#    saveVoid(voidId: ID!): User!
#    #todo: echo replies? seems crazy...
}